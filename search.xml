<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>FastDFS</title>
      <link href="/2020/10/28/FastDFS/"/>
      <url>/2020/10/28/FastDFS/</url>
      <content type="html"><![CDATA[<p>FastDFS 是一个开源的分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同<br>步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合<br>以文件为载体的在线服务，如相册网站、视频网站等等。</p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ol><li>fastDFS 概述：<br>○ 是用 c 语言编写的一款开源的分布式文件系统。<br>○ 为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注<br>重高可用、高性能等指标<br>○ 可以很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。  </li><li>fastDFS 特点:<br>○ 应用层级的文件系统<br>○ 不能挂载和卸载，也就是不能进行 mount 操作  </li><li>fastDFS 框架中的三个角色<br>○ 追踪器 - tracker<br>○ 存储节点 - storage<br>○ 客户端 - client  </li><li>fastDFS 三个角色之间的关系<br>○ Client 和 Storage 主动连接 Tracker。<br>○ Storage 主动向 Tracker 报告其状态信息<br>§ 磁盘剩余空间<br>§ 文件同步状况<br>§ 文件上传下载次数<br>○ Storage 会启动一个单独的线程来完成对一台 Tracker 的连接和定时报告。<br>一个组包含的 Storage 不是通过配置文件设定的，而是通过 Tracker 获取到的。</li></ol><img src="/2020/10/28/FastDFS/6.png"><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>默认配置文件位置：<br>○ /etc/fdfs  </li><li>Tracker（追踪器）<br>○ 修改配置文件<br>§ bind_addr=192.168.52.139<br>□ 当前主机的 IP<br>§ port=22122<br>□ 绑定的端口<br>§ base_path=/home/milo/fastDFS/tracker<br>□ log 目录<br>○ 启动 Tracker 服务<br>§ fdfs_trackerd /etc/fdfs/tracker.conf<br>§ sudo fdfs_trackerd /etc/fdfs/tracker.conf restart<br>§ sudo fdfs_trackerd /etc/fdfs/tracker.conf stop  </li><li>Storage（存储节点）<br>○ 修改配置文件<br>§ group_name=group1<br>□ 存储节点所属的组<br>§ bind_addr=192.168.52.139<br>□ 存储节点绑定的 IP<br>§ port=23000<br>□ 绑定的端口<br>§ base_path=/home/milo/fastDFS/storage<br>□ 存储日志文件的目录<br>§ store_path_count=1<br>□ 存储目录的个数<br>§ store_path0=/home/milo/fastDFS/storage<br>□ 配置具体的存储目录<br>§ tracker_server=192.168.52.139:22122<br>□ 连接 tracker 的时候使用的 IP 和端口<br>○ 启动 Stroage 服务<br>§ fdfs_storaged /etc/fdfs/storage.conf<br>§ sudo fdfs_storaged /etc/fdfs/storage.conf restart<br>§ sudo fdfs_storaged /etc/fdfs/storage.conf stop  </li><li>Client<br>○ 修改配置文件<br>§ base_path=/home/milo/fastDFS/client<br>□ log 日志目录<br>§ tracker_server=192.168.52.139:22122<br>□ 连接 tracker 时候需要的 iP 和端口信息  </li><li>检测当前 fdfs 环境是否是通的  </li></ol><h2 id="Storage-server-同步过程"><a href="#Storage-server-同步过程" class="headerlink" title="Storage server 同步过程"></a>Storage server 同步过程</h2><p>从 fastdfs 文件同步原理中我们知道 Storage server 之间的同步都是由一个独立线程负责的，<br>这个线程中的所有操作都是以同步方式执行的。比如一组服务器有 A、B、C 三台机器，那<br>么在每台机器上都有两个线程负责同步，如 A 机器，线程 1 负责同步数据到 B，线程 2 负责<br>同步数据到 C。每个同步线程负责到一台 Storage 的同步，以阻塞方式进行。<br>以 IP 为 192.168.1.1 的 Storage server 的 服 务 器 为 例 ， 它 的 同 步 目 录 下 有<br>192.168.1.2_33450.mark 192.168.1.3_33450.mark binlog.100 等文件现在 Storage server 将会从<br>ip 为 192.168.1.2 的 Storage server 的存储里面同步数据。<br>1 ） 打 开 对 应 Storage server 的 mark 文 件 ， 如 负 责 到 192.168.1.1 的 同 步 则 打 开<br>192.168.1.2_33450.mark 文件，从中读取 binlog_index、binlog_offset 两个字段值，如取到值<br>为：100、1000，那么就打开 binlog.100 文件，seek 到 1000 这个位置。<br>2）进入一个 while 循环，尝试着读取一行，若读取不到则睡眠等待。若读取到一行，并且<br>该行的操作方式为源操作，如 C、A、D、T（大写的都是），则将该行指定的操作同步给对<br>方（非源操作不需要同步），同步成功后更新 binlog_offset 标志，该值会定期写入到<br>192.168.1.2_33450.mark 文件之中。<br>同步过程中可能因为同步较为缓慢，导致可能在同步一个文件之前，文件已经被客户端删除，<br>此时同步线程将打印一条日志，然后直接处理后面的 Binlog。</p><h2 id="代码实现-fastDFS-文件上传和下载"><a href="#代码实现-fastDFS-文件上传和下载" class="headerlink" title="代码实现 fastDFS 文件上传和下载"></a>代码实现 fastDFS 文件上传和下载</h2><ol><li>fastDFS api 实现  </li><li>进程方式实现<br>○ 创建匿名管道<br>○ 创建子进程<br>○ 子进程中执行 execlp<br>&nbsp;§ 关闭读端<br>&nbsp;§ 将得到的文件 ID 写入管道<br>○ 父进程<br>&nbsp;§ 读管道<br>&nbsp;&nbsp;&nbsp;□ 关闭写端<br>&nbsp;&nbsp;&nbsp;□ 将 fileID 读到内存<br>&nbsp;&nbsp;&nbsp;□ 回收子进程 pcb  </li></ol><img src="/2020/10/28/FastDFS/1.png"><p>1.execlp()/execl 的区别  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int execlp(const char * file,const char * arg,....); 直接指定可执行程序的名字，在执行时会搜索环境变量。</span><br><span class="line">/use/bin/fdfs_upload_file  </span><br><span class="line"></span><br><span class="line">int execl(const char *path, const char *arg, ...); 用户自己生成的，绝对路径</span><br></pre></td></tr></table></figure><p>2 父子进程始终共享的东西  </p><p>○ 文件描述符<br>&nbsp;§ open<br>&nbsp;§ pipe<br>○ 内存映射区 - - mmap(函数)  </p><p>3.子进程写管道<br>父进程读管道  </p>]]></content>
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastDFS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FastCGI</title>
      <link href="/2020/10/27/FastCGI/"/>
      <url>/2020/10/27/FastCGI/</url>
      <content type="html"><![CDATA[<h1 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h1><h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>公共网关接口<br>Common Gateway Interface， 简称 CGI<br>在物理层面上是一段程序， 运行在服务器上，提供同客户端 HTML 页面的接口</p><h2 id="浏览器请求流程"><a href="#浏览器请求流程" class="headerlink" title="浏览器请求流程"></a>浏览器请求流程</h2><img src="/2020/10/27/FastCGI/1.png"><h2 id="CGI-工作流程"><a href="#CGI-工作流程" class="headerlink" title="CGI 工作流程"></a>CGI 工作流程</h2><img src="/2020/10/27/FastCGI/2.png"><h2 id="FastCGI-1"><a href="#FastCGI-1" class="headerlink" title="FastCGI"></a>FastCGI</h2><p>CGI每次都需要fork一个进程去处理，导致浪费服务器资源。<br>于是有了FastCGI管理CGI</p><img src="/2020/10/27/FastCGI/3.png"><h2 id="FastCGI-进程管理器"><a href="#FastCGI-进程管理器" class="headerlink" title="FastCGI 进程管理器"></a>FastCGI 进程管理器</h2><p>fastcgi 可使用 spawn-fcgi 或者 php-fpm 来管理 (fastcgi 进程管理器，有很多不同类型的)<br>nginx 下 fastcgi 与服务器是分离的</p><h3 id="spawn-fcgi"><a href="#spawn-fcgi" class="headerlink" title="spawn-fcgi"></a>spawn-fcgi</h3><p>• 相当一个代理工具<br>• 角色完成 nginx 和 fastcgi 之间的进程间通信  </p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>nginx 处理不了的指令, 交给 fastcgi 处理<br>• 数据需要转发<br>• 数据需要发送到指定的端口<br>• 处理一个指令 test<br>• url: <a href="http://192.168.52.139/test" target="_blank" rel="noopener">http://192.168.52.139/test</a>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location /test&#123;</span><br><span class="line">#配置 fastcgi 模块</span><br><span class="line">fastcgi_pass 127.0.0.1:9001;</span><br><span class="line">#IP:</span><br><span class="line">#127.0.0.1/localhost/192.168.52.139</span><br><span class="line">#端口:</span><br><span class="line">#将要处理的数据发送到 9001 端口</span><br><span class="line">#9001 端口对应一个进程, 该进程可以收到 nginx 发送过来的数据</span><br><span class="line">include fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fastCGI-协议、Spawn-fcgi、Nginx-三者关系"><a href="#fastCGI-协议、Spawn-fcgi、Nginx-三者关系" class="headerlink" title="fastCGI 协议、Spawn-fcgi、Nginx 三者关系"></a>fastCGI 协议、Spawn-fcgi、Nginx 三者关系</h3><p>Nginx 是 web 服务器，只提供 HTTP 协议的输入和输出。<br>spawn-fcgi 服务器，只支持 Fastcgi 协议的输入和输出。<br>它们 2 者直接由 Nginx 将 HTTP 协议转换为 Fastcgi 协议传输给 fastCGI 进程处理。  </p><img src="/2020/10/27/FastCGI/4.png"><h3 id="与Tomcat区别"><a href="#与Tomcat区别" class="headerlink" title="与Tomcat区别"></a>与Tomcat区别</h3><img src="/2020/10/27/FastCGI/5.png">]]></content>
      
      <categories>
          
          <category> FastCGI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastCGI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Makefile</title>
      <link href="/2020/10/22/Makefile/"/>
      <url>/2020/10/22/Makefile/</url>
      <content type="html"><![CDATA[<h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><p>就是在命令前加了⼀个‘@’。 这⼀符号告诉 make，<br>在运⾏时不要将这⼀⾏命令显示出来。</p><p>make 在检查⼀个规则时，采⽤的⽅法是：如果先决条件中相关的⽂<br>件的时间戳⼤于⽬标的时间戳，即先决条件中的⽂件⽐⽬标更新，则知道有变化，那么需要运⾏规则当中<br>的命令重新构建⽬标。</p><h3 id="假目标"><a href="#假目标" class="headerlink" title="假目标"></a>假目标</h3><p>.PHONY: clean</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="自动变量"><a href="#自动变量" class="headerlink" title="自动变量"></a>自动变量</h3><p>$@⽤于表示⼀个规则中的⽬标。当我们的⼀个规则中有多个⽬标时，$@所指的是其中任何造成命令被<br>运⾏的⽬标。<br>$^则表示的是规则中的所有先择条件。<br>$&lt;表示的是规则中的第⼀个先决条件。  </p><h3 id="变量类别"><a href="#变量类别" class="headerlink" title="变量类别"></a>变量类别</h3><p>“=”  可递归</p><p>“:=” make 只对其进⾏⼀次扫描和替换  </p><p>“?=” 条件赋值的意思是当变量以前没有定义时，就定义它并且将左边的值赋值给它，如果已<br>经定义了那么就不再改变其值。条件赋值类似于提供了给变量赋缺省值的功能。  </p><h3 id="引用替换"><a href="#引用替换" class="headerlink" title="引用替换"></a>引用替换</h3><p>Makefile<br>.PHONY: all<br>foo = a.o b.o c.o<br>bar := $(foo:.o=.c)<br>all:<br>@echo “bar = $(bar)”  </p><p>执⾏<br>$make<br>bar = a.c b.c c.c  </p><h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><p>手动替换</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><img src="/2020/10/22/Makefile/1.png"><img src="/2020/10/22/Makefile/2.png"><h2 id="包含文件"><a href="#包含文件" class="headerlink" title="包含文件"></a>包含文件</h2><p>include $(DEPS)</p><p>-include $(DEPS)  忽略文件</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">PHONY: all clean</span><br><span class="line">MKDIR = mkdir</span><br><span class="line">RM = rm</span><br><span class="line">RMFLAGS = -fr</span><br><span class="line">CC = gcc</span><br><span class="line">AR = ar</span><br><span class="line">ARFLAGS = crs</span><br><span class="line">DIR_OBJS = objs</span><br><span class="line">DIR_EXES = $(ROOT)/build/exes</span><br><span class="line">DIR_DEPS = deps</span><br><span class="line">DIR_LIBS = $(ROOT)/build/libs</span><br><span class="line">DIRS = $(DIR_DEPS) $(DIR_OBJS) $(DIR_EXES) $(DIR_LIBS)</span><br><span class="line">RMS = $(DIR_OBJS) $(DIR_DEPS)</span><br><span class="line">ifneq ($(EXE), &quot;&quot;)</span><br><span class="line">EXE := $(addprefix $(DIR_EXES)/, $(EXE))</span><br><span class="line">RMS += $(EXE)</span><br><span class="line">endif</span><br><span class="line">ifneq ($(LIB), &quot;&quot;)</span><br><span class="line">LIB := $(addprefix $(DIR_LIBS)/, $(LIB))</span><br><span class="line">RMS += $(LIB)</span><br><span class="line">endif</span><br><span class="line">SRCS = $(wildcard *.c)</span><br><span class="line">OBJS = $(SRCS:.c=.o)</span><br><span class="line">OBJS := $(addprefix $(DIR_OBJS)/, $(OBJS))</span><br><span class="line">DEPS = $(SRCS:.c=.dep)</span><br><span class="line">DEPS := $(addprefix $(DIR_DEPS)/, $(DEPS))</span><br><span class="line">ifneq ($(EXE), &quot;&quot;)</span><br><span class="line">all: $(EXE)</span><br><span class="line">endif</span><br><span class="line">ifneq ($(LIB), &quot;&quot;)</span><br><span class="line">all: $(LIB)</span><br><span class="line">endif</span><br><span class="line">ifneq ($(MAKECMDGOALS), clean)</span><br><span class="line">include $(DEPS)</span><br><span class="line">endif</span><br><span class="line">ifneq ($(INC_DIRS), &quot;&quot;)</span><br><span class="line">INC_DIRS := $(strip $(INC_DIRS))</span><br><span class="line">INC_DIRS := $(addprefix -I, $(INC_DIRS))</span><br><span class="line">endif</span><br><span class="line">ifneq ($(LINK_LIBS), &quot;&quot;)</span><br><span class="line">LINK_LIBS := $(strip $(LINK_LIBS))</span><br><span class="line">LINK_LIBS := $(addprefix -l, $(LINK_LIBS))</span><br><span class="line">endif</span><br><span class="line">$(DIRS):</span><br><span class="line">$(MKDIR) $@</span><br><span class="line">$(EXE): $(DIR_EXES) $(OBJS)</span><br><span class="line">$(CC) -L$(DIR_LIBS) -o $@ $(filter %.o, $^) $(LINK_LIBS)</span><br><span class="line">$(LIB): $(DIR_LIBS) $(OBJS)</span><br><span class="line">$(AR) $(ARFLAGS) $@ $(filter %.o, $^)</span><br><span class="line">$(DIR_OBJS)/%.o: $(DIR_OBJS) %.c</span><br><span class="line">$(CC) $(INC_DIRS) -o $@ -c $(filter %.c, $^)</span><br><span class="line">$(DIR_DEPS)/%.dep: $(DIR_DEPS) %.c</span><br><span class="line">@echo &quot;Making $@ ...&quot;</span><br><span class="line">set -e ; \</span><br><span class="line">$(RM) $(RMFLAGS) $@.tmp ; \</span><br><span class="line">$(CC) $(INC_DIRS) -E -MM $(filter %.c, $^) &gt; $@.tmp ; \</span><br><span class="line">sed &apos;s,\(.*\)\.o[ :]*,objs/\1.o $@: ,g&apos; &lt; $@.tmp &gt; $@ ; \</span><br><span class="line">$(RM) $(RMFLAGS) $@.tmp</span><br><span class="line">clean:</span><br><span class="line">$(RM) $(RMFLAGS) $(RMS)</span><br><span class="line">source/foo/src/Makefile</span><br><span class="line">EXE =</span><br><span class="line">LIB = libfoo.a</span><br><span class="line">INC_DIRS = $(ROOT)/source/foo/inc</span><br><span class="line">LINK_LIBS =</span><br><span class="line">include $(ROOT)/build/make.rule</span><br><span class="line">source/huge/src/Makefile</span><br><span class="line">EXE = huge</span><br><span class="line">LIB =</span><br><span class="line">INC_DIRS = $(ROOT)/source/foo/inc</span><br><span class="line">LINK_LIBS = foo</span><br><span class="line">include $(ROOT)/build/make.rule</span><br></pre></td></tr></table></figure><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">⽬录 /Makefile/huge/source/huge/src</span><br><span class="line">$make</span><br><span class="line">/Makefile/huge/build/make.rule:43: deps/main.dep: No such file or directory</span><br><span class="line">mkdir deps</span><br><span class="line">Making deps/main.dep ...</span><br><span class="line">mkdir objs</span><br><span class="line">gcc -I/Makefile/huge/source/foo/inc -o objs/main.o -c main.c</span><br><span class="line">gcc -L/Makefile/huge/build/libs -o /Makefile/huge/build/exes/huge objs/main.o -lfoo</span><br><span class="line">⽬录 /Makefile/huge/source/huge/src</span><br><span class="line">$$ROOT/build/exes/huge</span><br><span class="line">This is foo ()!</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">source/build/Makefile</span><br><span class="line">.PHONY: all clean</span><br><span class="line">DIRS = $(ROOT)/source/foo/src \</span><br><span class="line">$(ROOT)/source/bar/src \</span><br><span class="line">$(ROOT)/source/huge/src</span><br><span class="line">RM = rm</span><br><span class="line">RMFLAGS = -fr</span><br><span class="line">RMS = $(ROOT)/build/exes $(ROOT)/build/libs</span><br><span class="line">all:</span><br><span class="line">@set -e; \</span><br><span class="line">for dir in $(DIRS); \</span><br><span class="line">do \</span><br><span class="line">cd $$dir &amp;&amp; $(MAKE) ; \</span><br><span class="line">done</span><br><span class="line">@echo &quot;&quot;</span><br><span class="line">@echo &quot;:-) Completed&quot;</span><br><span class="line">@echo &quot;&quot;</span><br><span class="line">clean:</span><br><span class="line">@set -e; \</span><br><span class="line">for dir in $(DIRS); \</span><br><span class="line">do \</span><br><span class="line">cd $$dir &amp;&amp; $(MAKE) clean;\</span><br><span class="line">done</span><br><span class="line">$(RM) $(RMFLAGS) $(RMS)</span><br><span class="line">@echo &quot;&quot;</span><br><span class="line">@echo &quot;:-) Completed&quot;</span><br><span class="line">@echo &quot;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">⽬录 /Makefile/build</span><br><span class="line">$make</span><br><span class="line">make[1]: Entering directory `/Makefile/huge/source/foo/src&apos;</span><br><span class="line">/Makefile/huge/build/make.rule:43: deps/foo.dep: No such file or directory</span><br><span class="line">mkdir deps</span><br><span class="line">Making deps/foo.dep ...</span><br><span class="line">make[1]: Leaving directory `/Makefile/huge/source/foo/src&apos;</span><br><span class="line">make[1]: Entering directory `/Makefile/huge/source/foo/src&apos;</span><br><span class="line">mkdir /Makefile/huge/build/libs</span><br><span class="line">mkdir objs</span><br><span class="line">gcc -I/Makefile/huge/source/foo/inc -o objs/foo.o -c foo.c</span><br><span class="line">ar crs /Makefile/huge/build/libs/libfoo.a objs/foo.o</span><br><span class="line">make[1]: Leaving directory `/Makefile/huge/source/foo/src&apos;</span><br><span class="line">make[1]: Entering directory `/Makefile/huge/source/bar/src&apos;</span><br><span class="line">/Makefile/huge/build/make.rule:43: deps/bar.dep: No such file or director</span><br><span class="line">mkdir deps</span><br><span class="line">Making deps/bar.dep ...</span><br><span class="line">make[1]: Leaving directory `/Makefile/huge/source/bar/src&apos;</span><br><span class="line">make[1]: Entering directory `/Makefile/huge/source/bar/src&apos;</span><br><span class="line">mkdir objs</span><br><span class="line">gcc -I/Makefile/huge/source/bar/inc -o objs/bar.o -c bar.c</span><br><span class="line">ar crs /Makefile/huge/build/libs/libbar.a objs/bar.o</span><br><span class="line">make[1]: Leaving directory `/Makefile/huge/source/bar/src&apos;</span><br><span class="line">make[1]: Entering directory `/Makefile/huge/source/huge/src&apos;</span><br><span class="line">/Makefile/huge/build/make.rule:43: deps/main.dep: No such file or directory</span><br><span class="line">mkdir deps</span><br><span class="line">Making deps/main.dep ...</span><br><span class="line">make[1]: Leaving directory `/Makefile/huge/source/huge/src&apos;</span><br><span class="line">make[1]: Entering directory `/Makefile/huge/source/huge/src&apos;</span><br><span class="line">mkdir /Makefile/huge/build/exes</span><br><span class="line">mkdir objs</span><br><span class="line">gcc -I/Makefile/huge/source/foo/inc -I/Makefile/huge/source/bar/inc -o objs/main.o -c</span><br><span class="line">main.c</span><br><span class="line">gcc -L/Makefile/huge/build/libs -o /Makefile/huge/build/exes/huge objs/main.o -lfoo -lbar</span><br><span class="line">make[1]: Leaving directory `/Makefile/huge/source/huge/src&apos;</span><br><span class="line">:-) Completed</span><br><span class="line">⽬录 /Makefile/build</span><br><span class="line">$make clean</span><br><span class="line">make[1]: Entering directory `/Makefile/huge/source/foo/src&apos;</span><br><span class="line">rm -fr objs deps /Makefile/huge/build/libs/libfoo.a</span><br><span class="line">make[1]: Leaving directory `/Makefile/huge/source/foo/src&apos;</span><br><span class="line">make[1]: Entering directory `/Makefile/huge/source/bar/src&apos;</span><br><span class="line">rm -fr objs deps /Makefile/huge/build/libs/libbar.a</span><br><span class="line">make[1]: Leaving directory `/Makefile/huge/source/bar/src&apos;</span><br><span class="line">make[1]: Entering directory `/Makefile/huge/source/huge/src&apos;</span><br><span class="line">rm -fr objs deps /Makefile/huge/build/exes/huge</span><br><span class="line">make[1]: Leaving directory `/Makefile/huge/source/huge/src&apos;</span><br><span class="line">rm -fr /Makefile/huge/build/exes /Makefile/huge/build/libs</span><br><span class="line">:-) Completed</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux系统命令</title>
      <link href="/2020/10/19/Linux%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/10/19/Linux%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><img src="/2020/10/19/Linux系统命令/1.png"><p>grep login -r msg_server/<br>反向查找，查找文件中，不包含 hello 的行。  </p><p>grep -v login ImUser.cpp<br>找出文件中包含 login 的行，并打印出行号</p><p>grep -n login ImUser.cpp<br>找出文件中包含 login 的行，打印出行号，并显示前后 3 行</p><p>grep -C 3 -n login ImUser.cpp<br>找出文件中包含 login 的行，打印出行号，并显示前后 3 行，并忽略大小写</p><p>grep -C 3 -i -n login ImUser.cpp</p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>find . -name FILE_NAME<br>find . -iname FILE_NAME 忽略文件名称大小写</p><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><p>scp <a href="mailto:liaoqingfu@122.152.222.180" target="_blank" rel="noopener">liaoqingfu@122.152.222.180</a>:/home/liaoqingfu/test.txt . //下载文件<br>scp mi9.aac <a href="mailto:liaoqingfu@122.152.222.180" target="_blank" rel="noopener">liaoqingfu@122.152.222.180</a>:/home/liaoqingfu/ //上传文件<br>scp ‐r <a href="mailto:liaoqingfu@122.152.222.180" target="_blank" rel="noopener">liaoqingfu@122.152.222.180</a>:/home/liaoqingfu/ . //下载目录<br>scp ‐r test <a href="mailto:liaoqingfu@122.152.222.180" target="_blank" rel="noopener">liaoqingfu@122.152.222.180</a>:/home/liaoqingfu/ //上传目录  </p><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p> -t 可以查看最新修改的时间<br> -l 每行显示一个条目<br> -h 可以结合显示文件的 GB，MB 等(human)；<br> -R 递归显示<br> -n 显示组 id 和 gid  </p><p>ls -lt 按最新修改的时间排序，新修改的在前面显示。<br>ls -ltR 按最新修改的时间排序，新修改的在前面显示，并显示子目录的文件信息<br>ls -lh 以单位显示文件大小  </p><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p>wc 命令用于计算字数。 利用 wc 指令我们可以计算文件的 Byte 数、字数、或是列<br>数，若不指定文件名称、或是所给予的文件名为”-“，则 wc 指令会从标准输入设备读<br>取数据。</p><p>语法<br>wc [-clw][–help][–version][文件…] </p><p>参数：<br>-c 或–bytes 或–chars 只显示 Bytes 数。<br>-l 或–lines 只显示行数。<br>-w 或–words 只显示字数。<br>–help 在线帮助。<br>–version 显示版本信息。  </p><h2 id="pidstat"><a href="#pidstat" class="headerlink" title="pidstat"></a>pidstat</h2><p>pidstat 用于监控全部或指定的进程占用系统资源的情况，包括 CPU、内存、磁盘 I/O、<br>程切换、线程数等数据。</p><p>• -u：表示查看 cpu 相关的性能指标<br>• -w：表示查看上下文切换情况<br>• -t：查看线程相关的信息，默认是进程的;常与-w 结合使用(cpu 的上下文切换包<br>括进程的切换、线程的切换、中断的切换)<br>• -d：展示磁盘 I/O 统计数据<br>• -p：指明进程号<br>使用方式：pidstat [option] interval [count]  </p><p>[root@VM_0_3_centos ~]# pidstat -urd -p 24615<br>Linux 3.10.0-957.5.1.el7.x86_64 (VM_0_3_centos) 08/22/2019 _x86_64_ (1<br>CPU)<br>输出 CPU 的使用信息 -u<br>03:48:12 PM UID PID %usr %system %guest %CPU CPU Command<br>03:48:12 PM 0 24615 0.00 0.00 0.00 0.00 0 nginx<br>输出内存的使用信息 -r<br>03:48:12 PM UID PID minflt/s majflt/s VSZ RSS %MEM<br>Command<br>03:48:12 PM 0 24615 0.00 0.00 58252 24940 1.32 nginx<br>输出磁盘 I/O 的使用信息 -d<br>03:48:12 PM UID PID kB_rd/s kB_wr/s kB_ccwr/s Command<br>03:48:12 PM 0 24615 0.07 0.00 0.00 nginx  </p><p>03:20:54 PM UID PID cswch/s nvcswch/s Command<br>03:20:54 PM 0 24615 0.03 0.00 nginx</p><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>此命令用于显示系统内存的使用情况，包括总体内存、己经使用的内存；还可用于显<br>示系统内核使用的缓冲区，包括缓冲（buffer）和缓存（cache）等。<br>使用方式：free<br>命令输出：<br><img src="/2020/10/19/Linux系统命令/2.png"></p><p>buffer: 攒数据，然后批量写入，比如硬盘数据的写入</p><p>cache: 低速设备到高速设备的缓存（预读），比如从硬盘读取数据，读取100字节，但实际读了4K到cache里面，下次直接从cache里取</p><h2 id="mpstat"><a href="#mpstat" class="headerlink" title="mpstat"></a>mpstat</h2><p>此命令用于实时监控系统 CPU 的一些统计信息，这些信息存放在/proc/stat 文件中，在<br>多核 CPU 系统里，不但能查看所有 CPU 的平均使用信息，还能查看某个特定 CPU 的信息。<br>使用方式：mpstat [-P {cpu|ALL}] [internal [count]]<br>当 mpstat 不带参数时，输出为从系统启动以来的平均值。</p><h2 id="df"><a href="#df" class="headerlink" title="df"></a>df</h2><p>硬盘使用情况</p><p>df -h </p><img src="/2020/10/19/Linux系统命令/3.png"><h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><p>验证服务器端口有没有开放</p><p>参数<br>-l 用于指定 nc 将处于侦听模式。指定该参数，则意味着 nc 被当作 server，侦听并<br>接受连接，而非向其它地址发起连接。<br>-p 暂未用到（老版本的 nc 可能需要在端口号前加-p 参数，下面测试环境是<br>centos6.6，nc 版本是 nc-1.84，未用到-p 参数）<br>-s 指定发送数据的源 IP 地址，适用于多网卡机<br>-u 指定 nc 使用 UDP 协议，默认为 TCP<br>-v 输出交互或出错信息，新手调试时尤为有用<br>-w 超时秒数，后面跟数字  </p><img src="/2020/10/19/Linux系统命令/4.png"><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><p>解析IP地址</p><p>nslookup sina.com</p><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><p>tcpdump 是网络状况分析和跟踪工具，是可以用来抓包的实用命令，使用前需要对<br>TCP/IP 有所熟悉，因为过滤使用的信息都是 TCP/IP 格式。</p><img src="/2020/10/19/Linux系统命令/5.png"><h2 id="proc"><a href="#proc" class="headerlink" title="proc"></a>proc</h2><p>Linux 系统内核提供了通过/proc 文件系统查看运行时内核内部数据结构的能力，也可<br>以改变内核参数设置。  </p><p>显示 CPU 信息：<br>cat /proc/cpuinfo</p><p>显示内存信息：<br>cat /proc/meminfo</p><p>显示详细的内存映射信息：<br>cat /proc/zoneinfo</p><p>显示磁盘映射信息：<br>cat /proc/mounts</p><p>查看系统平均负载命令：<br>cat /proc/loadavg</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Valgrind/gdb</title>
      <link href="/2020/10/15/Valgrind-gdb/"/>
      <url>/2020/10/15/Valgrind-gdb/</url>
      <content type="html"><![CDATA[<h1 id="Valgrind"><a href="#Valgrind" class="headerlink" title="Valgrind"></a>Valgrind</h1><p>Valgrind 是一套 Linux 下，开放源代码（ GPL V2）的仿真调试工具的集合。 Valgrind<br>由内核（ core）以及基于内核的其他调试工具组成。内核类似于一个框架（ framework），<br>它模拟了一个 CPU 环境，并提供服务给其他工具；而其他工具则类似于插件 (plug-in)，<br>利用内核提供的服务完成各种特定的内存调试任务。</p><p>1.编译安装 Valgrind<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">wget https://fossies.org/linux/misc/valgrind-3.15.0.tar.bz2</span><br><span class="line">tar -jxvf valgrind-3.15.0.tar.bz2</span><br><span class="line">cd valgrind-3.15.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">示例：</span><br><span class="line">alpha@alpha:~/share/gdb/valgrind$</span><br><span class="line">-g sample.c -o sample</span><br><span class="line">alpha@alpha:~/share/gdb/valgrind$ ls</span><br><span class="line">badacc.c badleak2.cpp badloop.c README.md sample.c valgrind-3.15.0</span><br><span class="line">badlap.c badleak.cpp badmac.cpp sample uninitial.c valgrind-3.15.0.tar.bz2</span><br><span class="line">alpha@alpha:~/share/gdb/valgrind$ valgrind ./sample</span><br><span class="line">==31558== Memcheck, a memory error detector</span><br><span class="line">==31558== LEAK SUMMARY:</span><br><span class="line">==31558== definitely lost: 40 bytes in 1 blocks</span><br><span class="line">==31558== indirectly lost: 0 bytes in 0 blocks</span><br><span class="line">==31558== possibly lost: 0 bytes in 0 blocks</span><br><span class="line">==31558== still reachable: 0 bytes in 0 blocks</span><br><span class="line">==31558== suppressed: 0 bytes in 0 blocks</span><br><span class="line">==31558== Rerun with --leak-check=full to see details of leaked memory</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">void fun( )</span><br><span class="line">&#123;</span><br><span class="line">int *p = (int *)malloc(10*sizeof(int));</span><br><span class="line">p[10] = 0;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">fun();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>申请了空间，但是没有被释放<br>物理内存不一定连续，虚拟地址是连续的</p><h1 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h1><p>在编译时需要加上-g<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">–g –o hello_server hello_server.c</span><br><span class="line">alpha@alpha:~/share/gdb/gdb$ ls</span><br><span class="line">core_dump.c hello_server.c jump.c next.c redis-4.0.11.tar.gz step1.c watch.c</span><br><span class="line">alpha@alpha:~/share/gdb/gdb$</span><br><span class="line">-o hello_server hello_server.c</span><br><span class="line">alpha@alpha:~/share/gdb/gdb$ gdb hello_server</span><br><span class="line">GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.3) 7.7.1</span><br><span class="line">Copyright (C) 2014 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law. Type &quot;show copying&quot;</span><br><span class="line">and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from hello_server...(no debugging symbols found)...done.</span><br></pre></td></tr></table></figure></p><h2 id="调试-redis"><a href="#调试-redis" class="headerlink" title="调试 redis"></a>调试 redis</h2><p>安装 redis<br>1.下载源码并解压<br>wget <a href="http://download.redis.io/releases/redis-4.0.11.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-4.0.11.tar.gz</a><br>tar zxvf redis-4.0.11.tar.gz  </p><ol start="2"><li>进入 redis 源码目录并编译，注意编译时要生成调试符号并且关闭编译器优化选<br>项。<br>cd redis-4.0.11<br>make CFLAGS=”-g -O0” -j 2<br>由于 redis 是纯 C 项目，使用的编译器是 ，因而这里设置编译器的选项时使用的是 CFLAGS 选项；如<br>果项目使用的语言是 C++，那么使用的编译器一般是 g++，相对应的编译器选项是 CXXFLAGS。这点请<br>读者注意区别。另外，这里 makefile 使用了 -j 选项，其值是 2，表示开启 2 个进程同时编译，加<br>快编译速度。编译成功后，会在 src 目录下生成多个可执行程序，其中 redis-server 和 redis-cli 是需要调<br>试的程序。 进入 src 目录，使用 GDB 启动 redis-server 这个程序：<br>cd src<br>gdb ./redis-server  </li></ol><img src="/2020/10/15/Valgrind-gdb/1.png"><h2 id="gdb三种调试方式"><a href="#gdb三种调试方式" class="headerlink" title="gdb三种调试方式"></a>gdb三种调试方式</h2><h3 id="gdb-filename-直接调试目标程序"><a href="#gdb-filename-直接调试目标程序" class="headerlink" title="gdb filename 直接调试目标程序"></a>gdb filename 直接调试目标程序</h3><p>gdb ./hello_server  </p><h3 id="gdb-attach-pid-附加进程"><a href="#gdb-attach-pid-附加进程" class="headerlink" title="gdb attach pid 附加进程"></a>gdb attach pid 附加进程</h3><p>在某些情况下，一个程序已经启动了，我们想调试这个程序，但是又不想重启这个程序。 比如调试 redis。<br><img src="/2020/10/15/Valgrind-gdb/2.png"></p><p>得到 redis 进程 PID 为 35456，然后使用 gdb attach 35456，如果不是 root 权限需要加上 sudo，即是<br>sudo gdb attach 35456。</p><img src="/2020/10/15/Valgrind-gdb/3.png"><p>当用 gdb attach 上目标进程后，调试器会暂停下来，此时可以使用 continue 命令让程序继续运行，或者加<br>上相应的断点再继续运行程序。当调试完程序想结束此次调试时，而且不对当前进程 redis 有任何影响，<br>也就是说想让这个程序继续运行，可以在GDB 的命令行界面输入 detach 命令让程序与 GDB调试器分离，<br>这样 redis 就可以继续运行了：</p><img src="/2020/10/15/Valgrind-gdb/4.png"><h3 id="gdb-filename-corename-调试-core-文件"><a href="#gdb-filename-corename-调试-core-文件" class="headerlink" title="gdb filename corename 调试 core 文件"></a>gdb filename corename 调试 core 文件</h3><p>ulimit –c unlimited  暂时生效<br>产生 coredump 的条件发现 core file size 那一行默认是 0，表示关闭生成 core 文件，可以使用“ ulimit 选项名 设置值”来修改。例如，可以将 core 文件生成改成具体某个值（最大允许的字节数），这里我们使用 ulimit -c unlimited （ unlimited 是 -c 选项值）直接修改成不限制大小。将 ulimit -c unlimited 放入/etc/profile 中，然后执行 source /etc/profile 即可立即生效。即是：<br>（ 1） 将 ulimit -c unlimited 放入/etc/profile<br>（ 2） source /etc/profile<br>（ 3） 再次查看 ulimit -a<br>alpha@alpha:~/share/redis-4.0.11/src$ ulimit -a core file size          (blocks, -c) unlimited   </p><p>范例测试<br><img src="/2020/10/15/Valgrind-gdb/5.png"></p><p>编译运行<br><img src="/2020/10/15/Valgrind-gdb/6.png"></p><img src="/2020/10/15/Valgrind-gdb/7.png"><img src="/2020/10/15/Valgrind-gdb/8.png">]]></content>
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>log4cpp</title>
      <link href="/2020/10/13/log4cpp/"/>
      <url>/2020/10/13/log4cpp/</url>
      <content type="html"><![CDATA[<img src="/2020/10/13/log4cpp/1.png">]]></content>
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> log4cpp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reactor模型</title>
      <link href="/2020/10/12/reactor%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/10/12/reactor%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>作为一个高性能服务器程序通常需要考虑处理三类事件： I/O 事件，定时事件及信号。</p><p>应用程序需要提供相应的接口并注册到 Reactor 上，<br>如果相应的时间发生，Reactor 将主动调用应用程序注册的接口，所以Reactor译为反应堆。</p><p>Reactor 模型有三个重要的组件：<br> 多路复用器：由操作系统提供，在 linux 上一般是 select, poll, epoll 等系统调用。<br> 事件分发器：将多路复用器中返回的就绪事件分到对应的处理函数中。<br> 事件处理器：负责处理特定事件的处理函数。  </p><p>问题在于他是单线程，CPU现在的发展状况是以核心数上升。当程序需要使用多核资源时，Reactor 模型就会悲剧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;sys/epoll.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define BUFFER_LENGTH4096</span><br><span class="line">#define MAX_EPOLL_EVENTS1024</span><br><span class="line">#define SERVER_PORT8888</span><br><span class="line"></span><br><span class="line">typedef int NCALLBACK(int ,int, void*);</span><br><span class="line"></span><br><span class="line">struct ntyevent &#123;</span><br><span class="line">int fd;</span><br><span class="line">int events;</span><br><span class="line">void *arg;</span><br><span class="line">int (*callback)(int fd, int events, void *arg);</span><br><span class="line"></span><br><span class="line">int status;</span><br><span class="line">char buffer[BUFFER_LENGTH];</span><br><span class="line">int length;</span><br><span class="line">long last_active;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 核心是epoll和反应堆的管理</span><br><span class="line"> */</span><br><span class="line">struct ntyreactor &#123;</span><br><span class="line">int epfd;</span><br><span class="line">struct ntyevent *events;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int recv_cb(int fd, int events, void *arg);</span><br><span class="line">int send_cb(int fd, int events, void *arg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void nty_event_set(struct ntyevent *ev, int fd, NCALLBACK callback, void *arg) &#123;</span><br><span class="line"></span><br><span class="line">ev-&gt;fd = fd;</span><br><span class="line">ev-&gt;callback = callback;</span><br><span class="line">ev-&gt;events = 0;</span><br><span class="line">ev-&gt;arg = arg;</span><br><span class="line">ev-&gt;last_active = time(NULL);</span><br><span class="line"></span><br><span class="line">return ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int nty_event_add(int epfd, int events, struct ntyevent *ev) &#123;</span><br><span class="line"></span><br><span class="line">struct epoll_event ep_ev = &#123;0, &#123;0&#125;&#125;;</span><br><span class="line">ep_ev.data.ptr = ev;</span><br><span class="line">ep_ev.events = ev-&gt;events = events;</span><br><span class="line"></span><br><span class="line">int op;</span><br><span class="line">if (ev-&gt;status == 1) &#123;</span><br><span class="line">op = EPOLL_CTL_MOD;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">op = EPOLL_CTL_ADD;</span><br><span class="line">ev-&gt;status = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (epoll_ctl(epfd, op, ev-&gt;fd, &amp;ep_ev) &lt; 0) &#123;</span><br><span class="line">printf(&quot;event add failed [fd=%d], events[%d]\n&quot;, ev-&gt;fd, events);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int nty_event_del(int epfd, struct ntyevent *ev) &#123;</span><br><span class="line"></span><br><span class="line">struct epoll_event ep_ev = &#123;0, &#123;0&#125;&#125;;</span><br><span class="line"></span><br><span class="line">if (ev-&gt;status != 1) &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ep_ev.data.ptr = ev;</span><br><span class="line">ev-&gt;status = 0;</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_DEL, ev-&gt;fd, &amp;ep_ev);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int recv_cb(int fd, int events, void *arg) &#123;</span><br><span class="line"></span><br><span class="line">struct ntyreactor *reactor = (struct ntyreactor*)arg;</span><br><span class="line">struct ntyevent *ev = reactor-&gt;events+fd;</span><br><span class="line"></span><br><span class="line">int len = recv(fd, ev-&gt;buffer, BUFFER_LENGTH, 0);</span><br><span class="line">nty_event_del(reactor-&gt;epfd, ev);</span><br><span class="line"></span><br><span class="line">if (len &gt; 0) &#123;</span><br><span class="line"></span><br><span class="line">ev-&gt;length = len;</span><br><span class="line">ev-&gt;buffer[len] = &apos;\0&apos;;</span><br><span class="line"></span><br><span class="line">printf(&quot;C[%d]:%s\n&quot;, fd, ev-&gt;buffer);</span><br><span class="line"></span><br><span class="line">nty_event_set(ev, fd, send_cb, reactor);</span><br><span class="line">nty_event_add(reactor-&gt;epfd, EPOLLOUT, ev);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; else if (len == 0) &#123;</span><br><span class="line"></span><br><span class="line">close(ev-&gt;fd);</span><br><span class="line">printf(&quot;[fd=%d] pos[%ld], closed\n&quot;, fd, ev-reactor-&gt;events);</span><br><span class="line"> </span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">close(ev-&gt;fd);</span><br><span class="line">printf(&quot;recv[fd=%d] error[%d]:%s\n&quot;, fd, errno, strerror(errno));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int send_cb(int fd, int events, void *arg) &#123;</span><br><span class="line"></span><br><span class="line">struct ntyreactor *reactor = (struct ntyreactor*)arg;</span><br><span class="line">struct ntyevent *ev = reactor-&gt;events+fd;</span><br><span class="line"></span><br><span class="line">int len = send(fd, ev-&gt;buffer, ev-&gt;length, 0);</span><br><span class="line">if (len &gt; 0) &#123;</span><br><span class="line">printf(&quot;send[fd=%d], [%d]%s\n&quot;, fd, len, ev-&gt;buffer);</span><br><span class="line"></span><br><span class="line">nty_event_del(reactor-&gt;epfd, ev);</span><br><span class="line">nty_event_set(ev, fd, recv_cb, reactor);</span><br><span class="line">nty_event_add(reactor-&gt;epfd, EPOLLIN, ev);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">close(ev-&gt;fd);</span><br><span class="line"></span><br><span class="line">nty_event_del(reactor-&gt;epfd, ev);</span><br><span class="line">printf(&quot;send[fd=%d] error %s\n&quot;, fd, strerror(errno));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int accept_cb(int fd, int events, void *arg) &#123;</span><br><span class="line"></span><br><span class="line">struct ntyreactor *reactor = (struct ntyreactor*)arg;</span><br><span class="line">if (reactor == NULL) return -1;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in client_addr;</span><br><span class="line">socklen_t len = sizeof(client_addr);</span><br><span class="line"></span><br><span class="line">int clientfd;</span><br><span class="line"></span><br><span class="line">if ((clientfd = accept(fd, (struct sockaddr*)&amp;client_addr, &amp;len)) == -1) &#123;</span><br><span class="line">if (errno != EAGAIN &amp;&amp; errno != EINTR) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;accept: %s\n&quot;, strerror(errno));</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">do &#123;</span><br><span class="line"></span><br><span class="line">for (i = 0;i &lt; MAX_EPOLL_EVENTS;i ++) &#123;</span><br><span class="line">if (reactor-&gt;events[i].status == 0) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (i == MAX_EPOLL_EVENTS) &#123;</span><br><span class="line">printf(&quot;%s: max connect limit[%d]\n&quot;, __func__, MAX_EPOLL_EVENTS);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int flag = 0;</span><br><span class="line">if ((flag = fcntl(clientfd, F_SETFL, O_NONBLOCK)) &lt; 0) &#123;</span><br><span class="line">printf(&quot;%s: fcntl nonblocking failed, %d\n&quot;, __func__, MAX_EPOLL_EVENTS);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nty_event_set(&amp;reactor-&gt;events[clientfd], clientfd, recv_cb, reactor);</span><br><span class="line">nty_event_add(reactor-&gt;epfd, EPOLLIN, &amp;reactor-&gt;events[clientfd]);</span><br><span class="line"></span><br><span class="line">&#125; while (0);</span><br><span class="line"></span><br><span class="line">printf(&quot;new connect [%s:%d][time:%ld], pos[%d]\n&quot;, </span><br><span class="line">inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port), reactor-&gt;events[i].last_active, i);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int init_sock(short port) &#123;</span><br><span class="line"></span><br><span class="line">int fd = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">fcntl(fd, F_SETFL, O_NONBLOCK);</span><br><span class="line"></span><br><span class="line">struct sockaddr_in server_addr;</span><br><span class="line">memset(&amp;server_addr, 0, sizeof(server_addr));</span><br><span class="line">server_addr.sin_family = AF_INET;</span><br><span class="line">server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">server_addr.sin_port = htons(port);</span><br><span class="line"></span><br><span class="line">bind(fd, (struct sockaddr*)&amp;server_addr, sizeof(server_addr));</span><br><span class="line"></span><br><span class="line">if (listen(fd, 20) &lt; 0) &#123;</span><br><span class="line">printf(&quot;listen failed : %s\n&quot;, strerror(errno));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int ntyreactor_init(struct ntyreactor *reactor) &#123;</span><br><span class="line"></span><br><span class="line">if (reactor == NULL) return -1;</span><br><span class="line">memset(reactor, 0, sizeof(struct ntyreactor));</span><br><span class="line"></span><br><span class="line">reactor-&gt;epfd = epoll_create(1);</span><br><span class="line">if (reactor-&gt;epfd &lt;= 0) &#123;</span><br><span class="line">printf(&quot;create epfd in %s err %s\n&quot;, __func__, strerror(errno));</span><br><span class="line">return -2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reactor-&gt;events = (struct ntyevent*)malloc((MAX_EPOLL_EVENTS) * sizeof(struct ntyevent));</span><br><span class="line">if (reactor-&gt;events == NULL) &#123;</span><br><span class="line">printf(&quot;create epfd in %s err %s\n&quot;, __func__, strerror(errno));</span><br><span class="line">close(reactor-&gt;epfd);</span><br><span class="line">return -3;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int ntyreactor_destory(struct ntyreactor *reactor) &#123;</span><br><span class="line"></span><br><span class="line">close(reactor-&gt;epfd);</span><br><span class="line">free(reactor-&gt;events);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int ntyreactor_addlistener(struct ntyreactor *reactor, int sockfd, NCALLBACK *acceptor) &#123;</span><br><span class="line"></span><br><span class="line">if (reactor == NULL) return -1;</span><br><span class="line">if (reactor-&gt;events == NULL) return -1;</span><br><span class="line"></span><br><span class="line">nty_event_set(&amp;reactor-&gt;events[sockfd], sockfd, acceptor, reactor);</span><br><span class="line">nty_event_add(reactor-&gt;epfd, EPOLLIN, &amp;reactor-&gt;events[sockfd]);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int ntyreactor_run(struct ntyreactor *reactor) &#123;</span><br><span class="line">if (reactor == NULL) return -1;</span><br><span class="line">if (reactor-&gt;epfd &lt; 0) return -1;</span><br><span class="line">if (reactor-&gt;events == NULL) return -1;</span><br><span class="line"></span><br><span class="line">struct epoll_event events[MAX_EPOLL_EVENTS+1];</span><br><span class="line"></span><br><span class="line">int checkpos = 0, i;</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line"></span><br><span class="line">long now = time(NULL);</span><br><span class="line">for (i = 0;i &lt; 100;i ++, checkpos ++) &#123;</span><br><span class="line">if (checkpos == MAX_EPOLL_EVENTS) &#123;</span><br><span class="line">checkpos = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (reactor-&gt;events[checkpos].status != 1) &#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long duration = now - reactor-&gt;events[checkpos].last_active;</span><br><span class="line"></span><br><span class="line">if (duration &gt;= 60) &#123;</span><br><span class="line">close(reactor-&gt;events[checkpos].fd);</span><br><span class="line">printf(&quot;[fd=%d] timeout\n&quot;, reactor-&gt;events[checkpos].fd);</span><br><span class="line">nty_event_del(reactor-&gt;epfd, &amp;reactor-&gt;events[checkpos]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int nready = epoll_wait(reactor-&gt;epfd, events, MAX_EPOLL_EVENTS, 1000);</span><br><span class="line">if (nready &lt; 0) &#123;</span><br><span class="line">printf(&quot;epoll_wait error, exit\n&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (i = 0;i &lt; nready;i ++) &#123;</span><br><span class="line"></span><br><span class="line">struct ntyevent *ev = (struct ntyevent*)events[i].data.ptr;</span><br><span class="line"></span><br><span class="line">if ((events[i].events &amp; EPOLLIN) &amp;&amp; (ev-&gt;events &amp; EPOLLIN)) &#123;</span><br><span class="line">ev-&gt;callback(ev-&gt;fd, events[i].events, ev-&gt;arg);</span><br><span class="line">&#125;</span><br><span class="line">if ((events[i].events &amp; EPOLLOUT) &amp;&amp; (ev-&gt;events &amp; EPOLLOUT)) &#123;</span><br><span class="line">ev-&gt;callback(ev-&gt;fd, events[i].events, ev-&gt;arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line"></span><br><span class="line">unsigned short port = SERVER_PORT;</span><br><span class="line">if (argc == 2) &#123;</span><br><span class="line">port = atoi(argv[1]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int sockfd = init_sock(port);</span><br><span class="line"></span><br><span class="line">struct ntyreactor *reactor = (struct ntyreactor*)malloc(sizeof(struct ntyreactor));</span><br><span class="line">ntyreactor_init(reactor);</span><br><span class="line"></span><br><span class="line">ntyreactor_addlistener(reactor, sockfd, accept_cb);</span><br><span class="line">ntyreactor_run(reactor);</span><br><span class="line"></span><br><span class="line">ntyreactor_destory(reactor);</span><br><span class="line">close(sockfd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何使用reactor实现百万并发"><a href="#如何使用reactor实现百万并发" class="headerlink" title="如何使用reactor实现百万并发"></a>如何使用reactor实现百万并发</h2><p>服务需要解决的问题：<br>1.操作系统fd的限制<br>2.Segmentation fault(core dumped)<br>3.端口的问题</p><p>客户端端口以及服务器端口，并且同时listen多个端口</p><p>遇到问题考虑tcp五元组(sip, dip, sport, dport, proto)  </p><img src="/2020/10/12/reactor模型/1.png">]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reactor </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>消息队列和ZeroMQ</title>
      <link href="/2020/10/09/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%92%8CZeroMQ/"/>
      <url>/2020/10/09/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%92%8CZeroMQ/</url>
      <content type="html"><![CDATA[<h2 id="消息可靠性处理"><a href="#消息可靠性处理" class="headerlink" title="消息可靠性处理"></a>消息可靠性处理</h2><p>(1) 确认ACK，如果没有ACK就超时重传；<br>(2) 定义序列号，消息序号是连续，中间发现消息不连续的时候就知道丢了信息；<br>(3) 备份；<br>(4) 持久化 RocketMQ</p><h2 id="消息吞吐量"><a href="#消息吞吐量" class="headerlink" title="消息吞吐量"></a>消息吞吐量</h2><img src="/2020/10/09/消息队列和ZeroMQ/1.png"><h2 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h2><p>使用消息队列隔离网关和后端服务，以达到流量控制和保护后端服务的目的</p><img src="/2020/10/09/消息队列和ZeroMQ/2.png"><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><img src="/2020/10/09/消息队列和ZeroMQ/3.png"><img src="/2020/10/09/消息队列和ZeroMQ/4.png">]]></content>
      
      <categories>
          
          <category> ZeroMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZeroMQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>内存池</title>
      <link href="/2020/10/09/%E5%86%85%E5%AD%98%E6%B1%A0/"/>
      <url>/2020/10/09/%E5%86%85%E5%AD%98%E6%B1%A0/</url>
      <content type="html"><![CDATA[<img src="/2020/10/09/内存池/1.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define MP_ALIGNMENT       32</span><br><span class="line">#define MP_PAGE_SIZE4096</span><br><span class="line">#define MP_MAX_ALLOC_FROM_POOL(MP_PAGE_SIZE-1)</span><br><span class="line"></span><br><span class="line">#define mp_align(n, alignment) (((n)+(alignment-1)) &amp; ~(alignment-1))</span><br><span class="line">#define mp_align_ptr(p, alignment) (void *)((((size_t)p)+(alignment-1)) &amp; ~(alignment-1))</span><br><span class="line"></span><br><span class="line">struct mp_large_s &#123;</span><br><span class="line">    struct mp_large_s *next;</span><br><span class="line">    void *alloc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct mp_node_s &#123;</span><br><span class="line"></span><br><span class="line">    unsigned char *last; // 已经使用区段末尾</span><br><span class="line">    unsigned char *end; // 整个数据区段末尾</span><br><span class="line"></span><br><span class="line">    struct mp_node_s *next;</span><br><span class="line">    size_t failed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct mp_pool_s &#123;</span><br><span class="line"></span><br><span class="line">    size_t max;</span><br><span class="line"></span><br><span class="line">    struct mp_node_s *current; // 指向mp_node_s 结点</span><br><span class="line">    struct mp_large_s *large; //大块内存</span><br><span class="line"></span><br><span class="line">    struct mp_node_s head[0];</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//内存池创建</span><br><span class="line">struct mp_pool_s *mp_create_pool(size_t size) &#123;</span><br><span class="line">    struct mp_pool_s *p;</span><br><span class="line">    int ret = posix_memalign((void **)&amp;p, MP_ALIGNMENT, size + sizeof(struct mp_pool_s) + sizeof(struct mp_node_s));</span><br><span class="line">    if (ret) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p-&gt;max = (size &lt; MP_MAX_ALLOC_FROM_POOL) ? size : MP_MAX_ALLOC_FROM_POOL;</span><br><span class="line">    p-&gt;current = p-&gt;head;</span><br><span class="line">    p-&gt;large = NULL;</span><br><span class="line"></span><br><span class="line">    p-&gt;head-&gt;last = (unsigned char *)p + sizeof(struct mp_pool_s) + sizeof(struct mp_node_s);</span><br><span class="line">    p-&gt;head-&gt;end = p-&gt;head-&gt;last + size;</span><br><span class="line">    p-&gt;head-&gt;failed = 0;</span><br><span class="line"></span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//内存池销毁</span><br><span class="line">void mp_destory_pool(struct mp_pool_s *pool) &#123;</span><br><span class="line"></span><br><span class="line">    struct mp_node_s *h, *n;</span><br><span class="line">    struct mp_large_s *l;</span><br><span class="line">    for (l = pool-&gt;large; l; l-&gt;next) &#123;</span><br><span class="line">        if (l-&gt;alloc) &#123;</span><br><span class="line">            free(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h = pool-&gt;head-&gt;next;</span><br><span class="line">    while(h) &#123;</span><br><span class="line">        n = h-&gt;next;</span><br><span class="line">        free(h);</span><br><span class="line">        h = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    free(pool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//释放大页内存</span><br><span class="line">void mp_free(struct mp_pool_s *pool, void *p) &#123;</span><br><span class="line"></span><br><span class="line">    struct mp_large_s *l;</span><br><span class="line">    for (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        if (p == l-&gt;alloc) &#123;</span><br><span class="line">            free(l-&gt;alloc);</span><br><span class="line">            l-&gt;alloc = NULL;</span><br><span class="line"></span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//内存池重置</span><br><span class="line">//1.释放large</span><br><span class="line">//2.将node节点last重置</span><br><span class="line">void mp_reset_pool(struct mp_pool_s *pool) &#123;</span><br><span class="line"></span><br><span class="line">    struct mp_node_s *h;</span><br><span class="line">    struct mp_large_s *l;</span><br><span class="line"></span><br><span class="line">    for (l = pool-&gt;large; l; l = l-&gt;next) &#123;</span><br><span class="line">        if (l-&gt;alloc) &#123;</span><br><span class="line">            free(l-&gt;alloc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pool-&gt;large = NULL;</span><br><span class="line">    for (h = pool-&gt;head; h; h = h-&gt;next) &#123;</span><br><span class="line">        h-&gt;last = (unsigned char *)h + sizeof(struct mp_node_s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//分配小块内存</span><br><span class="line">static void *mp_alloc_block(struct mp_pool_s *pool, size_t size) &#123;</span><br><span class="line"></span><br><span class="line">    unsigned char *m;</span><br><span class="line">    struct mp_node_s *h = pool-&gt;head;</span><br><span class="line">    size_t psize = (size_t)(h-&gt;end - (unsigned char *)h);</span><br><span class="line"></span><br><span class="line">    int ret = posix_memalign((void **)&amp;m, MP_ALIGNMENT, psize);</span><br><span class="line">    if (ret) return NULL;</span><br><span class="line"></span><br><span class="line">    struct mp_node_s *p, *new_node, *current;</span><br><span class="line">    new_node = (struct mp_node_s*)m;</span><br><span class="line"></span><br><span class="line">    new_node-&gt;end = m + psize;</span><br><span class="line">    new_node-&gt;next = NULL;</span><br><span class="line">    new_node-&gt;failed = 0;</span><br><span class="line"></span><br><span class="line">    m += sizeof(struct mp_node_s);</span><br><span class="line">    m = mp_align_ptr(m, MP_ALIGNMENT);</span><br><span class="line">    new_node-&gt;last = m + size;</span><br><span class="line"></span><br><span class="line">    current = pool-&gt;current;</span><br><span class="line"></span><br><span class="line">    for(p = current; p-&gt;next; p = p-&gt;next) &#123;</span><br><span class="line">        if (p-&gt;failed++ &gt; 4) &#123;</span><br><span class="line">            current = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = new_node;</span><br><span class="line"></span><br><span class="line">    pool-&gt;current = current ? current : new_node;</span><br><span class="line">    return m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//分配大块内存</span><br><span class="line">static void *mp_alloc_large(struct mp_pool_s *pool, size_t size) &#123;</span><br><span class="line"></span><br><span class="line">    void *p = malloc(size);</span><br><span class="line">    if (p == NULL) return NULL;</span><br><span class="line"></span><br><span class="line">    size_t n = 0;</span><br><span class="line">    struct mp_large_s *large;</span><br><span class="line">    for (large = pool-&gt;large; large; large = large-&gt;next) &#123;</span><br><span class="line">        if (large-&gt;alloc == NULL) &#123;</span><br><span class="line">            large-&gt;alloc = p;</span><br><span class="line">            return p;</span><br><span class="line">        &#125;</span><br><span class="line">        if (n ++ &gt; 3) break;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large = mp_alloc(pool, sizeof(struct mp_large_s));</span><br><span class="line">    if (large == NULL) &#123;</span><br><span class="line">        free(p);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    large-&gt;alloc = p;</span><br><span class="line">    large-&gt;next = pool-&gt;large;</span><br><span class="line">    pool-&gt;large = large;</span><br><span class="line"></span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//内存池分配</span><br><span class="line">void *mp_alloc(struct mp_pool_s *pool, size_t size) &#123;</span><br><span class="line"></span><br><span class="line">    unsigned char *m;</span><br><span class="line">    struct mp_node_s *p;</span><br><span class="line"></span><br><span class="line">    if (size &lt;= pool-&gt;max) &#123;</span><br><span class="line">        p = pool-&gt;current;</span><br><span class="line"></span><br><span class="line">        do &#123;</span><br><span class="line">            m = mp_align_ptr(p-&gt;last, MP_ALIGNMENT);</span><br><span class="line">            if((size_t)(p-&gt;end - m) &gt;= size) &#123;</span><br><span class="line">                p-&gt;last = m + size;</span><br><span class="line">                return m;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125; while (p);</span><br><span class="line"></span><br><span class="line">        return mp_alloc_block(pool, size);</span><br><span class="line">    &#125;</span><br><span class="line">    return mp_alloc_large(pool, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line"></span><br><span class="line">    int size = 1 &lt;&lt; 12;</span><br><span class="line"></span><br><span class="line">    struct mp_pool_s *p = mp_create_pool(size);</span><br><span class="line"></span><br><span class="line">    int i = 0;</span><br><span class="line">    for (i = 0;i &lt; 10;i ++) &#123;</span><br><span class="line"></span><br><span class="line">        void *mp = mp_alloc(p, 512);</span><br><span class="line">//mp_free(mp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //printf(&quot;mp_create_pool: %ld\n&quot;, p-&gt;max);</span><br><span class="line">    printf(&quot;mp_align(123, 32): %d, mp_align(17, 32): %d\n&quot;, mp_align(24, 32), mp_align(17, 32));</span><br><span class="line">    //printf(&quot;mp_align_ptr(p-&gt;current, 32): %lx, p-&gt;current: %lx, mp_align(p-&gt;large, 32): %lx, p-&gt;large: %lx\n&quot;, mp_align_ptr(p-&gt;current, 32), p-&gt;current, mp_align_ptr(p-&gt;large, 32), p-&gt;large);</span><br><span class="line"></span><br><span class="line">    int j = 0;</span><br><span class="line">    for (i = 0;i &lt; 5;i ++) &#123;</span><br><span class="line"></span><br><span class="line">        char *pp = mp_calloc(p, 32);</span><br><span class="line">        for (j = 0;j &lt; 32;j ++) &#123;</span><br><span class="line">            if (pp[j]) &#123;</span><br><span class="line">                printf(&quot;calloc wrong\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            printf(&quot;calloc success\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //printf(&quot;mp_reset_pool\n&quot;);</span><br><span class="line"></span><br><span class="line">    for (i = 0;i &lt; 5;i ++) &#123;</span><br><span class="line">        void *l = mp_alloc(p, 8192);</span><br><span class="line">        mp_free(p, l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mp_reset_pool(p);</span><br><span class="line"></span><br><span class="line">    //printf(&quot;mp_destory_pool\n&quot;);</span><br><span class="line">    for (i = 0;i &lt; 58;i ++) &#123;</span><br><span class="line">        mp_alloc(p, 256);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mp_destory_pool(p);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存池 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>字符编码Unicode原理数据流压缩Zlib与Miniz的实现</title>
      <link href="/2020/10/08/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81Unicode%E5%8E%9F%E7%90%86%E6%95%B0%E6%8D%AE%E6%B5%81%E5%8E%8B%E7%BC%A9Zlib%E4%B8%8EMiniz%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/10/08/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81Unicode%E5%8E%9F%E7%90%86%E6%95%B0%E6%8D%AE%E6%B5%81%E5%8E%8B%E7%BC%A9Zlib%E4%B8%8EMiniz%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>字符Unicode其实是根据码表转化映射出图形。<br>根据码表找到位图文件显示出文字。</p><p>UTF-8 1-6字节<br>UTF-16 2或4字节<br>UTF-32 4字节  </p><p>通过前缀码，编译器可以知道是这个文件是按什么格式编码的。</p><p>Mysql的“uft8”不是真正的UTF-8，“utf8”只支持每个字符最多3个字节。</p><p>Mysql真正的UTF-8是”utf8mb4”。  </p><img src="/2020/10/08/字符编码Unicode原理数据流压缩Zlib与Miniz的实现/1.png">]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Golang 系统监控</title>
      <link href="/2020/10/07/Golang-%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/"/>
      <url>/2020/10/07/Golang-%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<p>系统监控程序会定期的检查上次垃圾回收器什么时候执行的，如果发现已经有很长时间没有执行垃圾回收操作了，它就强制执行一次回收。  </p><p>它来定期扫描自由内存块，如果长时间不用，它就会建议操作系统把物理内存收回去。  </p><p>在函数头部插入一段汇编指令：<br>第一件事用来判断栈帧空间够不够用，不够用进行扩张<br>第二件事检查当前的G执行多长，如果系统调度发出抢占通知，立即中止G执行。</p>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Golang 并发</title>
      <link href="/2020/10/07/Golang-%E5%B9%B6%E5%8F%91/"/>
      <url>/2020/10/07/Golang-%E5%B9%B6%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="PMG模型"><a href="#PMG模型" class="headerlink" title="PMG模型"></a>PMG模型</h2><img src="/2020/10/07/Golang-并发/1.png"><p>第一本地队列超过 256 个任务转移一半任务到全局队列，第二本地队列执行 60 个任务则到全局队列执行一个确保公平性。  </p><h2 id="runnext"><a href="#runnext" class="headerlink" title="runnext"></a>runnext</h2><p>G对象有runnext属性，记录最后一个G对象。执行 runnext 优先，然后 runq 队列。</p><h2 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h2><p>M 的所有的状态都保存在 G 任务栈，优点是在任意时 M 都能上下文切换。</p><p>M 使用的栈保存在 G 栈上，切换时只需要把 M 使用的 SP 等寄存器保存到 G 的寄存器上，保存后 M 就可以上下文切换。</p><p>G 自带栈可以从 2KB 扩容到 1GB，那么怎么扩容呢？实际上重新分配两倍的内存，然后把数据拷贝进来，栈指针指向新的地址，原来的释放掉，称之为拷贝栈。收缩也一样，创建小一点的块，把数据拷贝进来，用它来替换原来的释放。</p>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>垃圾回收</title>
      <link href="/2020/10/07/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
      <url>/2020/10/07/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
      <content type="html"><![CDATA[<h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>引用计数实现方式非常简单，每个对象头部有一个计数器，引用对象时计数器加一，取消引用时计数器减一，等于零时释放内存。</p><p>缺点：<br>1.易内存泄漏<br>2.不支持循环引用 </p><h2 id="代龄"><a href="#代龄" class="headerlink" title="代龄"></a>代龄</h2><p>代龄机制是这样的，对象通常分成三级代龄 0、1、2。新创建的对象的代龄是 0，每级代龄都有阈值，当 0 级对象数量超过阈值就会启动垃圾回收，垃圾回收扫描所有 0 级代龄对象，扫描完对象是活着或者死着两种状态。理论来说在第一次回收活着对象在第二次回收活着几率很高，垃圾回收器把第一次扫描活着对象标记为 1 级代龄对象，下次扫描 0 级代龄对象不用扫描第一次扫描过的对象，减少扫描对象的数量。当 1 级代龄对象数量超过阈值便扫描 1 级代龄对象，如果 1 级代龄还活着说明这个对象生命周期更长，就标记为 2 级代龄对象。  </p><p>优点1：减少扫描对象数量<br>优点2：支持内存压缩  </p><h2 id="标记清理"><a href="#标记清理" class="headerlink" title="标记清理"></a>标记清理</h2><p>回收器启动把所有对象标记成白色。A引用B，B变成灰色。白色可以释放。下次扫描灰色。<br>B变成黑色，如果B引用C。C依然是灰色。不断递归，只剩黑色和白色。那么黑色的都是活着的白色的都是死的。</p><h2 id="并发清理"><a href="#并发清理" class="headerlink" title="并发清理"></a>并发清理</h2><p>回收白色对象的时候可以和用户逻辑并发。</p><h2 id="写屏障"><a href="#写屏障" class="headerlink" title="写屏障"></a>写屏障</h2><p>一旦进入垃圾回收状态时进行短暂 STW 暂停，打开标记位标记为正在执行垃圾回收。扫描当时状态。<br>在垃圾回收阶段重新引用另外新对象，这个屏障把这种行为重新过滤。</p><h2 id="信用授权"><a href="#信用授权" class="headerlink" title="信用授权"></a>信用授权</h2><p>回收的速度跟不上分配的速度垃圾回收器会把用户逻辑暂停，用户逻辑暂停后不会有新的对象出现。<br>黑白对象标记完的对象数量累计到公共账户信用值，如果小于等于零则调度切换为垃圾回收，切换后不停的增加信用值和检查公共账户信用值，尽早提前结束切换执行用户代码，保证用户代码和垃圾回收的并行。  </p>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>内存分配器</title>
      <link href="/2020/10/07/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/"/>
      <url>/2020/10/07/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>为了避免程序频繁的向操作系统申请，占用更多的空间延长内存的使用时间。可以一次性申请<br>多一部分的内存重复使用。例如：对象池、连接池。并且一次性申请大块内存可以做到连续分<br>配，通过相邻的地址空间的合并减少碎片化。  </p><h3 id="虚拟地址空间如何使用"><a href="#虚拟地址空间如何使用" class="headerlink" title="虚拟地址空间如何使用"></a>虚拟地址空间如何使用</h3><p>每个进程有一个虚拟地址空间，内存分配在某段虚拟地址空间内就能保证是连续的。</p><p>1.让操作系统随机开始，保留一段地址空间，如果失败，加上或者减去偏移量重新选择。<br>2.如果连续的方式不行使用分段的方式。空间扩展尝试同一方向扩展，失败则换个相反<br>方向扩展，这样空间还是连续的。操作系统随机从两个方向扩展的方式称之为稀疏堆。<br>3.使用一个数组。数组存储内存指针指向自由块，自由块有各种状态，比如当前使用多<br>少内存、是否是空闲状态等，形成类似反查表的作用。自由块的内存起始地址减去初始<br>位置得到偏移量，偏移量按页大小对齐作为数组索引。这样的优点是只需检查数组就知<br>道内存分配的信息、检查相邻的两项的是否空闲可以合并成大块内存。通过反查表实现<br>碎片化问题。</p><h3 id="Go管理内存框架"><a href="#Go管理内存框架" class="headerlink" title="Go管理内存框架"></a>Go管理内存框架</h3><p>内存分配的完整流程首先检查 Cache 里有没有自由块，有的话直接返回；没有的话计算<br>向哪个 Central 申请，如果 Central 有则取回一批，如果没有，则向Heap申请大块自由<br>块切割，如果Heap没有多余的自由块，Heap向操作系统申请。Go语言在初始化时建立一个<br>静态表，通过静态表知道一次取多少个，这个数字是基于大量的统计得到的，有些语言根<br>据程序运行期动态调整这个数字。  </p><p>任何时候内存管理都会涉及两个核心问题。  </p><p>第一个快速分配，比如实现无锁操作或者减少锁。因为 Central 被很多Cache共享，操作<br>数据必须加锁处理，Heap 被很多 Central 共享，操作数据要加锁。</p><p>第二个尽可能在内存复用方面做到平衡。快速操作意味着用批处理代替单次处理实现性能<br>提升，但是批处理会浪费大量的资源。所以一来用批处理来实现快速分配操作的性能，一<br>来实现内存节约避免快速消耗，需要在中间找到平衡点。</p>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线程池</title>
      <link href="/2020/10/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2020/10/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;assert.h&gt;</span><br><span class="line">#include &lt;stdarg.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line">#define LL_ADD(item, list) do &#123; \</span><br><span class="line">item-&gt;prev = NULL;\</span><br><span class="line">item-&gt;next = list;\</span><br><span class="line">list = item;\</span><br><span class="line">&#125; while(0)</span><br><span class="line"></span><br><span class="line">#define LL_REMOVE(item, list) do &#123;\</span><br><span class="line">if (item-&gt;prev != NULL) item-&gt;prev-&gt;next = item-&gt;next;\</span><br><span class="line">if (item-&gt;next != NULL) item-&gt;next-&gt;prev = item-&gt;prev;\</span><br><span class="line">if (list == item) list = item-&gt;next;\</span><br><span class="line">item-&gt;prev = item-&gt;next = NULL;\</span><br><span class="line">&#125; while(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//执行（线程ID，终止标识，池管理组件对象）</span><br><span class="line">typedef struct NWORKER &#123;</span><br><span class="line">pthread_t thread;</span><br><span class="line">int terminate;</span><br><span class="line">struct NWORKQUEUE *workqueue;</span><br><span class="line">struct NWORKER *prev;</span><br><span class="line">struct NWORKER *next;</span><br><span class="line">&#125; nWorker;</span><br><span class="line"></span><br><span class="line">//任务（任务回调函数，任务执行的参数）</span><br><span class="line">typedef struct NJOB &#123;</span><br><span class="line">void (*job_function)(struct NJOB *job);</span><br><span class="line">void *user_data;</span><br><span class="line">struct NJOB *prev;</span><br><span class="line">struct NJOB *next;</span><br><span class="line">&#125; nJob;</span><br><span class="line"></span><br><span class="line">//池管理组件（互斥锁，条件变量，执行队列，任务队列）</span><br><span class="line">typedef struct NWORKQUEUE &#123;</span><br><span class="line">struct NWORKER *workers;</span><br><span class="line">struct NJOB *waiting_jobs;</span><br><span class="line">pthread_mutex_t jobs_mtx;</span><br><span class="line">pthread_cond_t jobs_cond;</span><br><span class="line">&#125; nWorkQueue;</span><br><span class="line"></span><br><span class="line">typedef nWorkQueue nThreadPool;</span><br><span class="line"></span><br><span class="line">static void *ntyWorkerThread(void *ptr) &#123;</span><br><span class="line">nWorker *worker = (nWorker*)ptr;</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line">pthread_mutex_lock(&amp;worker-&gt;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">while (worker-&gt;workqueue-&gt;waiting_jobs == NULL) &#123;</span><br><span class="line">if (worker-&gt;terminate) break;</span><br><span class="line">pthread_cond_wait(&amp;worker-&gt;workqueue-&gt;jobs_cond, &amp;worker-&gt;workqueue-&gt;jobs_mtx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (worker-&gt;terminate) &#123;</span><br><span class="line">pthread_mutex_unlock(&amp;worker-&gt;workqueue-&gt;jobs_mtx);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nJob *job = worker-&gt;workqueue-&gt;waiting_jobs;</span><br><span class="line">if (job != NULL) &#123;</span><br><span class="line">LL_REMOVE(job, worker-&gt;workqueue-&gt;waiting_jobs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;worker-&gt;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">if (job == NULL) continue;</span><br><span class="line"></span><br><span class="line">job-&gt;job_function(job);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">free(worker);</span><br><span class="line">pthread_exit(NULL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int ntyThreadPoolCreate(nThreadPool *workqueue, int numWorkers) &#123;</span><br><span class="line"></span><br><span class="line">if (numWorkers &lt; 1) numWorkers = 1;</span><br><span class="line">memset(workqueue, 0, sizeof(nThreadPool));</span><br><span class="line"></span><br><span class="line">pthread_cond_t blank_cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line">memcpy(&amp;workqueue-&gt;jobs_cond, &amp;blank_cond, sizeof(workqueue-&gt;jobs_cond));</span><br><span class="line"></span><br><span class="line">pthread_mutex_t blank_mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line">memcpy(&amp;workqueue-&gt;jobs_mtx, &amp;blank_mutex, sizeof(workqueue-&gt;jobs_mtx));</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">for (i = 0;i &lt; numWorkers;i ++) &#123;</span><br><span class="line">nWorker *worker = (nWorker*)malloc(sizeof(nWorker));</span><br><span class="line">if (worker == NULL) &#123;</span><br><span class="line">perror(&quot;malloc&quot;);</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memset(worker, 0, sizeof(nWorker));</span><br><span class="line">worker-&gt;workqueue = workqueue;</span><br><span class="line"></span><br><span class="line">        //printf(&quot;pthread_create --&gt; %d\n&quot;, i);</span><br><span class="line">int ret = pthread_create(&amp;worker-&gt;thread, NULL, ntyWorkerThread, (void *)worker);</span><br><span class="line">if (ret) &#123;</span><br><span class="line"></span><br><span class="line">perror(&quot;pthread_create&quot;);</span><br><span class="line">free(worker);</span><br><span class="line"></span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LL_ADD(worker, worker-&gt;workqueue-&gt;workers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void ntyThreadPoolShutdown(nThreadPool *workqueue) &#123;</span><br><span class="line">nWorker *worker = NULL;</span><br><span class="line"></span><br><span class="line">for (worker = workqueue-&gt;workers;worker != NULL;worker = worker-&gt;next) &#123;</span><br><span class="line">worker-&gt;terminate = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_mutex_lock(&amp;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">workqueue-&gt;workers = NULL;</span><br><span class="line">workqueue-&gt;waiting_jobs = NULL;</span><br><span class="line"></span><br><span class="line">pthread_cond_broadcast(&amp;workqueue-&gt;jobs_cond);</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ntyThreadPoolQueue(nThreadPool *workqueue, nJob *job) &#123;</span><br><span class="line"></span><br><span class="line">pthread_mutex_lock(&amp;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">LL_ADD(job, workqueue-&gt;waiting_jobs);</span><br><span class="line"></span><br><span class="line">pthread_cond_signal(&amp;workqueue-&gt;jobs_cond);</span><br><span class="line">pthread_mutex_unlock(&amp;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define KING_MAX_THREAD80</span><br><span class="line">#define KING_COUNTER_SIZE1000</span><br><span class="line"></span><br><span class="line">void king_counter(nJob *job) &#123;</span><br><span class="line"></span><br><span class="line">int index = *(int*)job-&gt;user_data;</span><br><span class="line"></span><br><span class="line">printf(&quot;index : %d, selfid : %lu\n&quot;, index, pthread_self());</span><br><span class="line"></span><br><span class="line">free(job-&gt;user_data);</span><br><span class="line">free(job);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line"></span><br><span class="line">nThreadPool pool;</span><br><span class="line"></span><br><span class="line">ntyThreadPoolCreate(&amp;pool, KING_MAX_THREAD);</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">for (i = 0;i &lt; KING_COUNTER_SIZE;i ++) &#123;</span><br><span class="line">nJob *job = (nJob*)malloc(sizeof(nJob));</span><br><span class="line">if (job == NULL) &#123;</span><br><span class="line">perror(&quot;malloc&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">job-&gt;job_function = king_counter;</span><br><span class="line">job-&gt;user_data = malloc(sizeof(int));</span><br><span class="line">*(int*)job-&gt;user_data = i;</span><br><span class="line"></span><br><span class="line">ntyThreadPoolQueue(&amp;pool, job);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>无锁CAS无锁队列</title>
      <link href="/2020/10/07/%E6%97%A0%E9%94%81CAS%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/"/>
      <url>/2020/10/07/%E6%97%A0%E9%94%81CAS%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;pthread.h&gt;#include &lt;mutex&gt;#include &lt;time.h&gt;#include &lt;atomic&gt;#include &lt;list&gt;#include &lt;memory&gt;#define MAX_THREAD_NUM 1#define FOR_LOOP_COUNT 10000000static int counter = 0;static pthread_spinlock_t spinlock;static std::mutex s_mutex;static int s_count_push = 0;static int s_count_pop = 0;// using namespace lock_free;// 有锁队列，直接使用liststatic std::list&lt;int&gt; s_list;typedef void *(*thread_func_t)(void *argv);static int lxx_atomic_add(int *ptr, int increment){  int old_value = *ptr;  __asm__ volatile(&quot;lock; xadd %0, %1 \n\t&quot;                   : &quot;=r&quot;(old_value), &quot;=m&quot;(*ptr)                   : &quot;0&quot;(increment), &quot;m&quot;(*ptr)                   : &quot;cc&quot;, &quot;memory&quot;);  return *ptr;}template &lt;typename ElemType&gt;struct qnode // 链表节点{  struct qnode *_next;  ElemType _data;};template &lt;typename ElemType&gt;class Queue{private:  struct qnode&lt;ElemType&gt; *volatile _head = NULL;  // 随着pop后指向的位置是不一样的, head不是固定的  struct qnode&lt;ElemType&gt; *volatile _tail = NULL;public:  Queue()  {    _head = _tail = new qnode&lt;ElemType&gt;;    _head-&gt;_next = NULL;    _tail-&gt;_next = NULL;    printf(&quot;Queue _head:%p\n&quot;, _head);  }  void push(const ElemType &amp;e)  {    struct qnode&lt;ElemType&gt; *p = new qnode&lt;ElemType&gt;;    p-&gt;_data = e;    p-&gt;_next = NULL;    struct qnode&lt;ElemType&gt; *t = _tail; // 获取尾部    t-&gt;_next = p; // 插到尾部    _tail = p; // 更新尾部节点  }  void push2(const ElemType &amp;e)  {    struct qnode&lt;ElemType&gt; *p = new qnode&lt;ElemType&gt;;    // printf(&quot;push head:%p, p:%p\n&quot;, _head, p);    p-&gt;_next = NULL;    p-&gt;_data = e;    struct qnode&lt;ElemType&gt; *t = _tail;    struct qnode&lt;ElemType&gt; *old_t = _tail;    int count = 0;    do    {      while (t-&gt;_next != NULL) // 非空的时候要去更新 t-&gt;_next        t = t-&gt;_next;          // 找到最后的节点      if (count++ &gt;= 1)      {        printf(&quot;push count:%d, t-&gt;_next:%p\n&quot;, count, t-&gt;_next);      }      // 将null换为p即是插入的节点    } while (!__sync_bool_compare_and_swap(&amp;t-&gt;_next, NULL, p));    // 将最后的节点_tail更换为p节点    __sync_bool_compare_and_swap(&amp;_tail, old_t, p);  }  bool pop(ElemType &amp;e)  {    struct qnode&lt;ElemType&gt; *p = _head;         // 头结点    struct qnode&lt;ElemType&gt; *np = _head-&gt;_next; // 首元素节点    if (!np)    {      return false;    }    e = np-&gt;_data;    _head-&gt;_next = np-&gt;_next;    delete np;    return true;  }  bool pop2(ElemType &amp;e)  {    struct qnode&lt;ElemType&gt; *p = NULL;    struct qnode&lt;ElemType&gt; *np = NULL;    int count = 0;    do    {      p = _head; // 头节点，不真正存储数据      np = p-&gt;_next;      if (p-&gt;_next == NULL) // 首元节点为空，则返回      {        return false;      }      if (count++ &gt;= 1)      {        printf(&quot;pop count:%d, p-&gt;_next:%p\n&quot;, count, p-&gt;_next);      }      // 更新头结点位置    } while (!__sync_bool_compare_and_swap(&amp;_head, p, p-&gt;_next));    e = p-&gt;_next-&gt;_data;    // printf(&quot;pop p:%p\n&quot;, p);    delete p; // 因为我们已经将头部节点换成了p-&gt;_next, 所以可以释放掉    return true;  }  ~Queue()  {    struct qnode&lt;ElemType&gt; *volatile tmp;    while (_head)    {      tmp = _head-&gt;_next;      printf(&quot;_head:%p\n&quot;, _head);      delete _head;      _head = tmp;    }  }};void *mutex_thread_push(void *argv){  for (int i = 0; i &lt; FOR_LOOP_COUNT; i++)  {    s_mutex.lock();    s_count_push++;    s_list.push_back(i);    s_mutex.unlock();  }  return NULL;}void *mutex_thread_pop(void *argv){  while (true)  {    int value = 0;    s_mutex.lock();    if (s_list.size() &gt; 0)    {      value = s_list.front();      s_list.pop_front();      s_count_pop++;    }    s_mutex.unlock();    if (s_count_pop &gt;= FOR_LOOP_COUNT * MAX_THREAD_NUM)    {      printf(&quot;%s dequeue:%d\n&quot;, __FUNCTION__, value);      break;    }  }  printf(&quot;%s exit\n&quot;, __FUNCTION__);  return NULL;}static Queue&lt;int&gt; s_queue;void *queue_free_thread_push(void *argv){  for (int i = 0; i &lt; FOR_LOOP_COUNT; i++)  {    s_queue.push2(i);    lxx_atomic_add(&amp;s_count_push, 1);    // printf(&quot;s_count_push:%d\n&quot;,s_count_push);  }  return NULL;}void *queue_free_thread_pop(void *argv){  // for (int i = 0; i &lt; FOR_LOOP_COUNT*5; i++)  int last_value = 0;  static int s_pid_count = 0;  s_pid_count++;  int pid = s_pid_count;  while (true)  {    int value = 0;    if (s_queue.pop2(value))    {      last_value = value;      if (s_count_pop != value)      {        printf(&quot;pid:%d, -&gt; value:%d, expected:%d\n&quot;, pid, value, s_count_pop);      }      s_count_pop++;      // printf(&quot;pid:%d, -&gt; value:%d\n&quot;, pid, value);    }    else    {      // printf(&quot;pid:%d, null\n&quot;, pid);    }    if (s_count_pop &gt;= FOR_LOOP_COUNT * MAX_THREAD_NUM)    {      printf(&quot;%s dequeue:%d\n&quot;, __FUNCTION__, last_value);      break;    }  }  printf(&quot;%s exit\n&quot;, __FUNCTION__);  return NULL;}int test_queue(thread_func_t func_push, thread_func_t func_pop, char **argv){  clock_t start = clock();  pthread_t tid_push[MAX_THREAD_NUM] = {0};  for (int i = 0; i &lt; MAX_THREAD_NUM; i++)  {    int ret = pthread_create(&amp;tid_push[i], NULL, func_push, argv);    if (0 != ret)    {      printf(&quot;create thread failed\n&quot;);    }  }  pthread_t tid_pop[MAX_THREAD_NUM] = {0};  for (int i = 0; i &lt; MAX_THREAD_NUM; i++)  {    int ret = pthread_create(&amp;tid_pop[i], NULL, func_pop, argv);    if (0 != ret)    {      printf(&quot;create thread failed\n&quot;);    }  }  for (int i = 0; i &lt; MAX_THREAD_NUM; i++)  {    pthread_join(tid_push[i], NULL);  }  for (int i = 0; i &lt; MAX_THREAD_NUM; i++)  {    pthread_join(tid_pop[i], NULL);  }  clock_t end = clock();  printf(&quot;spend clock : %ld, push:%d, pop:%d\n&quot;, (end - start) / CLOCKS_PER_SEC,         s_count_push, s_count_pop);  return 0;}// 多尝试几次 g++ -o 4_test_queue 4_test_queue.cpp -lpthread -latomic -std=c++11int main(int argc, char **argv){  printf(&quot;THREAD_NUM:%d\n\n&quot;, MAX_THREAD_NUM);  for (int i = 0; i &lt; 100; i++)  {    s_count_push = 0;    s_count_pop = 0;    printf(&quot;\n\n---------&gt;i:%d\n\n&quot;, i);    printf(&quot;use mutex queue -----------&gt;\n&quot;);    test_queue(mutex_thread_push, mutex_thread_pop, NULL);    s_count_push = 0;    s_count_pop = 0;    printf(&quot;\nuse queue_free queue -----------&gt;\n&quot;);    test_queue(queue_free_thread_push, queue_free_thread_pop, NULL);  }  printf(&quot;finish\n&quot;);  return 0;}</code></pre>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>进程协程线程</title>
      <link href="/2020/09/27/%E8%BF%9B%E7%A8%8B%E5%8D%8F%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/09/27/%E8%BF%9B%E7%A8%8B%E5%8D%8F%E7%A8%8B%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>进程是一种资源单位，操作系统按照进程来分配资源管理资源。线程是进程内的，专门用来执行。  </p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程我们严格意义上来说指的是任务加上任务执行所需的资源，称之为线程，如果线程只是执行单位没有任何资源，称之为任务，它是可复用的，线程本身有状态的，因为线程执行时有线程栈，所以任务加上任务执行所需的线程栈等资源称之为线程。</p><h3 id="系统线程与用户线程"><a href="#系统线程与用户线程" class="headerlink" title="系统线程与用户线程"></a>系统线程与用户线程</h3><img src="/2020/09/27/进程协程线程/1.png">  <p>系统线程指的是操作系统提供的的任务单元。用户线程指的是在用户空间实现的一些并发任务，跟操作系统没关系。</p><h3 id="线程池模型"><a href="#线程池模型" class="headerlink" title="线程池模型"></a>线程池模型</h3><p>使用池模型不再需要频繁的创建系统线程，用户态可以创建很多用来存储状态的执行单位。执行时把它绑定到一个系统线程上去执行，执行完把系统线程释放，系统线程把绑定状态删除放到池中，不需要杀掉系统线程，接下来另外一个执行单位重新的绑定到这个系统线程上去执行。</p><p>如下图所示：<br><img src="/2020/09/27/进程协程线程/2.png"></p><p>首先创建一定数量的系统线程专门用来执行的。其次在用户态空间创建一些对象专门用来保存执行时所需要的状态，包括线程栈。它不负责执行，它只是很普通的数据抽象容器。它执行时把它绑定到某个系统线程上，这个系统线程就具备了普通线程状态然后去执行，执行完把这个线程的状态全部剥离，这个线程就恢复成原始状态，接下来可以执行其他的任务。</p><p>实现用户态的执行和系统态的执行分离，避免反复系统调用所消耗的资源。</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>为了充分利用时间片，利用异步机制，在用户态实现调度机制把阻塞的时间片执行其他的任务，当任务执行完成时，下次再执行时去检查返回的事件，把事件返回的结果返还给原先任务。</p><p>很明显，协程是串行不是并行，它的执行序是执行 A 任务，当 A 任务阻塞时唤醒 B 任务，B 任务执行结束检查 A 的结果是否有返回，不断的切换实现多任务并发。</p><h3 id="上下文切换对性能的影响"><a href="#上下文切换对性能的影响" class="headerlink" title="上下文切换对性能的影响"></a>上下文切换对性能的影响</h3><p>无论进程级别、线程级别、主动系统调用引发的上下文切换都会造成一定的性能损失。尽可能的减少系统调用实际上是减少上下文切换造成的性能损失。因为离 CPU 近的资源比如 L 级的 Cache，寄存器数据都要写回到主存，系统代码执行完要把主存数据读回来，相对 CPU 执行速度从主存操作数据非常慢。 </p>]]></content>
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/09/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/09/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p><img src="/2020/09/26/设计模式/1.png"><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>装饰器模式中主要有两个角色：</p><p>1.装饰器  2.被装饰的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">老王（ 被装饰的对象 ）：</span><br><span class="line">public interface Person &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 计算累计消费</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public Double cost();</span><br><span class="line">    public void show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class LaoWang implements Person&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Double cost() &#123;</span><br><span class="line">        return 0.0; //赤果果的时候累计消费为0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(&quot;我是赤果果的老王&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">装饰器超类，和被装饰的对象实现同一个接口 Person ：</span><br><span class="line">public abstract class ClothesDecorator implements Person &#123;</span><br><span class="line">    //装饰器中要使用被装饰器的对象，构造方法中传入</span><br><span class="line">    protected Person person;</span><br><span class="line"></span><br><span class="line">    public ClothesDecorator(Person person)&#123;</span><br><span class="line">        this.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">具体的装饰，夹克和帽子：</span><br><span class="line">public class Jacket extends ClothesDecorator &#123;</span><br><span class="line"></span><br><span class="line">    public Jacket(Person person) &#123;</span><br><span class="line">        super(person);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        person.show();</span><br><span class="line">        System.out.println(&quot;穿上夹克，累计消费&quot; + this.cost());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Double cost() &#123;</span><br><span class="line">        return person.cost() + 100; //夹克100元</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Hat extends ClothesDecorator &#123;</span><br><span class="line"></span><br><span class="line">    public Hat(Person person) &#123;</span><br><span class="line">        super(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        //执行已有功能</span><br><span class="line">        person.show();</span><br><span class="line">        //此处是附加的功能</span><br><span class="line">        System.out.println(&quot;戴上帽子，累计消费&quot; + this.cost());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Double cost() &#123;</span><br><span class="line">        return person.cost() + 50; //帽子50元</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">测试：</span><br><span class="line">Person laowang = new LaoWang();</span><br><span class="line">//穿上夹克</span><br><span class="line">laowang = new Jacket(laowang);</span><br><span class="line">//戴上帽子</span><br><span class="line">laowang = new Hat(laowang);</span><br><span class="line"></span><br><span class="line">laowang.show();</span><br><span class="line">System.out.println(&quot;买单，老王总共消费：&quot;+laowang.cost());</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">观察者（客户）:</span><br><span class="line">public abstract class Customer &#123;</span><br><span class="line">    public abstract void update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class CustomerA extends Customer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;我是客户A,我收到报纸啦&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class CustomerB extends Customer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;我是客户B,我收到报纸啦&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">被观察者（报社）：</span><br><span class="line">public class NewsOffice &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public void addCustomer(Customer customer)&#123;</span><br><span class="line">        this.customers.add(customer);</span><br><span class="line">    &#125;</span><br><span class="line">    //模拟报纸来了</span><br><span class="line">    public void newspaperCome()&#123;</span><br><span class="line">        this.notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void notifyAllObservers()&#123;</span><br><span class="line">        for (Customer customer : customers)&#123;</span><br><span class="line">            customer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">测试：</span><br><span class="line">NewsOffice office= new NewsOffice();</span><br><span class="line"></span><br><span class="line">Customer customerA = new CustomerA();</span><br><span class="line">Customer customerB = new CustomerB();</span><br><span class="line">//客户A订阅报纸</span><br><span class="line">office.addCustomer(customerA);</span><br><span class="line">//客户B订阅报纸</span><br><span class="line">office.addCustomer(customerB);</span><br><span class="line">//报纸来了</span><br><span class="line">office.newspaperCome();</span><br></pre></td></tr></table></figure><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器适合用于解决新旧系统（ 或新旧接口 ）之间的兼容问题，而不建议在一开始就直接使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">定义接口：</span><br><span class="line">public interface MusicPlayer &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 播放音乐</span><br><span class="line">     * @param type 音乐格式</span><br><span class="line">     * @param filename 文件</span><br><span class="line">     */</span><br><span class="line">    public void play(String type, String filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">现成的库：</span><br><span class="line">public class ExistPlayer &#123;</span><br><span class="line"></span><br><span class="line">    public void playMp3(String filename)&#123;</span><br><span class="line">        System.out.println(&quot;play mp3 : &quot;+filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void playWma(String filename)&#123;</span><br><span class="line">        System.out.println(&quot;play wma : &quot;+filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class PlayerAdapter implements MusicPlayer</span><br><span class="line">&#123;</span><br><span class="line">    //在适配器中使用旧接口</span><br><span class="line">    private ExistPlayer player;</span><br><span class="line"></span><br><span class="line">    public PlayerAdapter()&#123;</span><br><span class="line">        player = new ExistPlayer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void play(String type, String filename) &#123;</span><br><span class="line">        if(type == &quot;mp3&quot;)&#123;</span><br><span class="line">            player.playMp3(filename);</span><br><span class="line">        &#125;else if(type == &quot;wma&quot;)&#123;</span><br><span class="line">            player.playWma(filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">测试：</span><br><span class="line"> MusicPlayer player = new PlayerAdapter();</span><br><span class="line"> player.play(&quot;mp3&quot;,&quot;xxx.mp3&quot;);</span><br><span class="line"> player.play(&quot;mp4&quot;,&quot;xxx.mp4&quot;);</span><br></pre></td></tr></table></figure><h2 id="单例模式与工厂模式"><a href="#单例模式与工厂模式" class="headerlink" title="单例模式与工厂模式"></a>单例模式与工厂模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>懒汉式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class SingleObject &#123;</span><br><span class="line"></span><br><span class="line">    private static SingleObject instance;</span><br><span class="line"></span><br><span class="line">    private SingleObject()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static SingleObject getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">            instance = new SingleObject();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决线程安全问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class SingleObject &#123;</span><br><span class="line"></span><br><span class="line">    private static SingleObject instance;</span><br><span class="line"></span><br><span class="line">    private SingleObject()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static synchronized SingleObject getInstance()&#123;</span><br><span class="line">        if(instance == null)&#123;</span><br><span class="line">            instance = new SingleObject();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Not Lazy Loading：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class SingleObject &#123;</span><br><span class="line"></span><br><span class="line">    private static SingleObject instance = new SingleObject();</span><br><span class="line"></span><br><span class="line">    private SingleObject()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static  SingleObject getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>简单工厂模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Factory &#123;</span><br><span class="line"></span><br><span class="line">    public Girl createGirl(String whatYouLike)&#123;</span><br><span class="line"></span><br><span class="line">        Girl girl = null;</span><br><span class="line"></span><br><span class="line">        if(whatYouLike == &quot;fat&quot;)&#123;</span><br><span class="line">            girl = new FatGirl();</span><br><span class="line">        &#125;else if(whatYouLike == &quot;thin&quot;)&#123;</span><br><span class="line">            girl = new ThinGirl();</span><br><span class="line">        &#125;</span><br><span class="line">        return girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">测试:</span><br><span class="line">Girl girl = (new GirlFactory()).createGirl(&quot;fat&quot;);</span><br></pre></td></tr></table></figure><p>工厂提供者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class GirlStore &#123;</span><br><span class="line"></span><br><span class="line">    GirlFactory factory;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 可以动态选择工厂</span><br><span class="line">     * @param factory</span><br><span class="line">     */</span><br><span class="line">    public GirlStore(GirlFactory factory)&#123;</span><br><span class="line">        this.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Girl createGirl(String whatYouLike)&#123;</span><br><span class="line">        return factory.createGirl(whatYouLike);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">测试：</span><br><span class="line">GirlStore store = new GirlStore(new GirlFactory());</span><br><span class="line">store.createGirl(&quot;thin&quot;);</span><br></pre></td></tr></table></figure><p>抽象工厂模式</p><p>某某程序猿现在不满足于选择 Girl 的胖瘦，他的口味有点特殊，喜欢美国产的长发姑娘，遵循开闭原则，我们需要使用抽象工厂</p><p>抽象工厂：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractGirlFactory &#123;</span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @param whatYouLike 高矮胖瘦等类型</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public abstract Girl createGirl(String whatYouLike);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>美国工厂：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class AmericanGirlFactory extends AbstractGirlFactory&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Girl createGirl(String whatYouLike) &#123;</span><br><span class="line">        Girl girl = null;</span><br><span class="line"></span><br><span class="line">        if(whatYouLike == &quot;fat&quot;)&#123;</span><br><span class="line">            girl = new FatGirl();</span><br><span class="line">        &#125;else if(whatYouLike == &quot;thin&quot;)&#123;</span><br><span class="line">            girl = new ThinGirl();</span><br><span class="line">        &#125;</span><br><span class="line">        return girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>中国工厂：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class ChineseGirlFactory extends AbstractGirlFactory&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Girl createGirl(String whatYouLike) &#123;</span><br><span class="line">        Girl girl = null;</span><br><span class="line">        if(whatYouLike.equals(&quot;longhair&quot;))&#123;</span><br><span class="line">            //girl = new LongHairGirl();</span><br><span class="line">        &#125;</span><br><span class="line">        return girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>工厂提供者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class GirlStore &#123;</span><br><span class="line"></span><br><span class="line">    AbstractGirlFactory factory;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 可以动态选择工厂</span><br><span class="line">     * @param factory</span><br><span class="line">     */</span><br><span class="line">    public GirlStore(AbstractGirlFactory factory)&#123;</span><br><span class="line">        this.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Girl createGirl(String whatYouLike)&#123;</span><br><span class="line">        return factory.createGirl(whatYouLike);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //也可以返回工厂，让客户端自己去createGirl()</span><br><span class="line">    //public abstract AbstractGirlFactory createFactory(String country);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GirlStore store = new GirlStore(new AmericanGirlFactory());</span><br><span class="line">Girl girl = store.createGirl(&quot;longhair&quot;);</span><br></pre></td></tr></table></figure></p><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//CPU</span><br><span class="line">public class CPU &#123;</span><br><span class="line">    public void start()&#123;</span><br><span class="line">        System.out.println(&quot;启动CPU&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//硬盘</span><br><span class="line">public class Disk &#123;</span><br><span class="line">    public void start()&#123;</span><br><span class="line">        System.out.println(&quot;启动硬盘&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//内存</span><br><span class="line">public class Memory &#123;</span><br><span class="line">    public void start()&#123;</span><br><span class="line">        System.out.println(&quot;启动内存&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//开机键</span><br><span class="line">public class StartBtn &#123;</span><br><span class="line"></span><br><span class="line">    public void start()&#123;</span><br><span class="line">        new CPU().start();</span><br><span class="line">        new Disk().start();</span><br><span class="line">        new Memory().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new StartBtn().start();</span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class LazyLoadList&lt;E&gt; implements List &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 关联外键</span><br><span class="line">     */</span><br><span class="line">    private Integer key;</span><br><span class="line"></span><br><span class="line">    private boolean hasSelect = false;</span><br><span class="line"></span><br><span class="line">    public LazyLoadList(Integer key)&#123;</span><br><span class="line">        this.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private List list = new ArrayList();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 真正查询数据库</span><br><span class="line">     */</span><br><span class="line">    private void doSelect()&#123;</span><br><span class="line">        //已查询过不用再查询</span><br><span class="line">        if(hasSelect) return;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;开始查询&quot;);</span><br><span class="line">        String sql = &quot; select * from address where user_id = &quot; + this.key;</span><br><span class="line"></span><br><span class="line">        // sql查询</span><br><span class="line"></span><br><span class="line">        //使用反射，注解等机制组装查询结果，此处模拟一下即可</span><br><span class="line">        list.add(new Address(&quot;地址1&quot;));</span><br><span class="line">        list.add(new Address(&quot;地址2&quot;));</span><br><span class="line"></span><br><span class="line">        hasSelect = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int size() &#123;</span><br><span class="line">        this.doSelect();</span><br><span class="line">        return list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object get(int index) &#123;</span><br><span class="line">        this.doSelect();</span><br><span class="line">        return list.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>论坛用户发表帖子，但是常常会有用户发一些不良的信息，如广告信息、涉黄信息、涉及政治的敏感词等。这时我们就可以使用责任链模式来过滤用户发表的信息。</p><p>父类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 帖子处理器</span><br><span class="line"> */</span><br><span class="line">public abstract class PostHandler &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 后继者</span><br><span class="line">     */</span><br><span class="line">    protected PostHandler successor;</span><br><span class="line"></span><br><span class="line">    public void setSuccessor(PostHandler handler)&#123;</span><br><span class="line">        this.successor = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public abstract void handlerRequest(Post post);</span><br><span class="line"></span><br><span class="line">    protected final void next(Post post)&#123;</span><br><span class="line">        if(this.successor != null)&#123;</span><br><span class="line">            this.successor.handlerRequest(post);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 广告处理器</span><br><span class="line"> */</span><br><span class="line">public class AdHandler extends PostHandler &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void handlerRequest(Post post) &#123;</span><br><span class="line">        //屏蔽广告内容</span><br><span class="line">        String content = post.getContent();</span><br><span class="line">        //.....</span><br><span class="line">        content = content.replace(&quot;广告&quot;,&quot;**&quot;);</span><br><span class="line">        post.setContent(content);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;过滤广告...&quot;);</span><br><span class="line">        //传递给下一个处理器</span><br><span class="line">        next(post);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 涉黄处理器</span><br><span class="line"> */</span><br><span class="line">public class YellowHandler extends PostHandler &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void handlerRequest(Post post) &#123;</span><br><span class="line">        //屏蔽涉黄内容</span><br><span class="line">        String content = post.getContent();</span><br><span class="line">        //.....</span><br><span class="line">        content = content.replace(&quot;涉黄&quot;,&quot;**&quot;);</span><br><span class="line">        post.setContent(content);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;过滤涉黄内容...&quot;);</span><br><span class="line">        //传递给下一个处理器</span><br><span class="line">        next(post);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//创建责任对象</span><br><span class="line">PostHandler adHandler = new AdHandler();</span><br><span class="line">PostHandler yellowHandler = new YellowHandler();</span><br><span class="line">PostHandler swHandler = new SensitiveWordsHandler();</span><br><span class="line"></span><br><span class="line">//形成责任链</span><br><span class="line">yellowHandler.setSuccessor(swHandler);</span><br><span class="line">adHandler.setSuccessor(yellowHandler);</span><br><span class="line"></span><br><span class="line">Post post = new Post();</span><br><span class="line">post.setContent(&quot;我是正常内容，我是广告，我是涉黄，我是敏感词，我是正常内容&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;过滤前的内容为：&quot;+post.getContent());</span><br><span class="line"></span><br><span class="line">post = adHandler.handlerRequest(post);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;过滤后的内容为：&quot;+post.getContent());</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>http</title>
      <link href="/2020/09/26/http/"/>
      <url>/2020/09/26/http/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HTTP 协议，即超文本传输协议(Hypertext transfer protocol)。是一种详细规定了浏览器和<br>万维网(WWW = World Wide Web)服务器之间互相通信的规则，通过因特网传送万维网文档<br>的数据传送协议，可以传输文本，图片，视频等。  </p><img src="/2020/09/26/http/1.png"><p>简单快速：协议简单，通信速度快；<br>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记；<br>无状态：：HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状<br>态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据<br>量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p><h2 id="http工作原理"><a href="#http工作原理" class="headerlink" title="http工作原理"></a>http工作原理</h2><p>以下是 HTTP 请求/响应的步骤：<br>1、客户端连接到 Web 服务器<br>一个 HTTP 客户端，通常是浏览器，与 Web 服务器的 HTTP 端口（默认为 80）建立一个 TCP<br>套接字连接。例如，<a href="http://www.0voice.com。" target="_blank" rel="noopener">http://www.0voice.com。</a><br>2、发送 HTTP 请求<br>通过 TCP 套接字，客户端向 Web 服务器发送一个文本的请求报文，一个请求报文由请求行、<br>请求头部、空行和请求数据 4 部分组成。<br>3、服务器接受请求并返回 HTTP 响应<br>Web 服务器解析请求，定位请求资源。服务器将资源复本写到 TCP 套接字，由客户端读取。<br>一个响应由状态行、响应头部、空行和响应数据 4 部分组成。<br>4、释放连接 TCP 连接<br>若 connection 模式为 close，则服务器主动关闭 TCP 连接，客户端被动关闭连接，释放 TCP<br>连接;若 connection 模式为 keepalive，则该连接会保持一段时间，在该时间内可以继续接收<br>请求;<br>5、客户端浏览器解析 HTML 内容<br>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，<br>响应头告知以下为若干字节的 HTML 文档和文档的字符集。客户端浏览器读取响应数据<br>HTML，根据 HTML 的语法对其进行格式化，并在浏览器窗口中显示。  </p><h2 id="http请求方法"><a href="#http请求方法" class="headerlink" title="http请求方法"></a>http请求方法</h2><p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。<br>HTTP1.0 定义了三种请求方法: GET、POST 和 HEAD 方法。<br>HTTP1.1 新增了六种请求方法: OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。  </p><p>1 GET 请求指定的页面信息，并返回实体主体。<br>2 HEAD 类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取<br>报头<br>3 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。<br>数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/<br>或已有资源的修改。<br>4 PUT 从客户端向服务器传送的数据取代指定的文档的内容。<br>5 DELETE 请求服务器删除指定的页面。<br>6 CONNECT HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。<br>7 OPTIONS 允许客户端查看服务器的性能。<br>8 TRACE 回显服务器收到的请求，主要用于测试或诊断。<br>9 PATCH 是对 PUT 方法的补充，用来对已知资源进行局部更新 。  </p><h2 id="GET和POST区别"><a href="#GET和POST区别" class="headerlink" title="GET和POST区别"></a>GET和POST区别</h2><p>1、GET 提交的数据会放在 URL 之后，以?分割 URL 和传输数据，参数之间以&amp;相连，<br>如<a href="http://localhost:8600/user?name=test1&amp;id=123456" target="_blank" rel="noopener">http://localhost:8600/user?name=test1&amp;id=123456</a>. POST 方法是把提交的数据放在 HTTP<br>包的 Body 中。<br>2、GET 提交的数据大小有限制（因为浏览器对 URL 的长度有限制），而 POST 方法提交的<br>数据没有限制。<br>3、GET 方式需要使用 Request.QueryString 来取得变量的值，而 POST 方式通过 Request.Form<br>来获取变量的值。<br>4、GET 方式提交数据，会带来安全问题，比如一个登录页面，通过 GET 方式提交数据时，<br>用户名和密码将出现在 URL 上，如果页面可以被缓存或者其他人可以访问这台机器，就可<br>以从历史记录获得该用户的账号和密码。</p><h2 id="http响应头信息"><a href="#http响应头信息" class="headerlink" title="http响应头信息"></a>http响应头信息</h2><img src="/2020/09/26/http/2.png"><img src="/2020/09/26/http/3.png"><img src="/2020/09/26/http/4.png"><h2 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h2><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:<br>1xx：指示信息–表示请求已接收，继续处理<br>2xx：成功–表示请求已被成功接收、理解、接受<br>3xx：重定向–要完成请求必须进行更进一步的操作<br>4xx：客户端错误–请求有语法错误或请求无法实现<br>5xx：服务器端错误–服务器未能实现合法的请求  </p>]]></content>
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx</title>
      <link href="/2020/09/24/nginx/"/>
      <url>/2020/09/24/nginx/</url>
      <content type="html"><![CDATA[<p>负载均衡可以在多个层上去做，nginx只是在应用层上面的负载均衡。</p><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p>从配置入手</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 4; ##进程数</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">worker_connections 1024;  #连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">upstream backend &#123; #负载均衡</span><br><span class="line">server 192.168.142.128 weight=2;</span><br><span class="line">server 192.168.142.129 weight=1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 8888;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">client_max_body_size 100m; #客户端最大包体</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">#root /usr/local/nginx/html/;</span><br><span class="line">#proxy_pass http://192.168.142.128;</span><br><span class="line">proxy_pass http://backend;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /images/ &#123;</span><br><span class="line">root /usr/local/nginx/; #静态资源映射</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.(mp3|mp4) &#123;</span><br><span class="line">root /usr/local/nginx/media/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 9000;</span><br><span class="line"></span><br><span class="line">location ~ \.cgi &#123;</span><br><span class="line">fastcgi_pass 127.0.0.1:9001;</span><br><span class="line">fastcgi_index index.cgi;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME cgi$fastcgi_script_name;</span><br><span class="line">include ../conf/fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cgi应用于在线编程工具，通过nginx映射到cgi端口，实际上并没有进入Server服务器，只是在cgi进程做的处理。<br>fastcgi用进程池去处理。</p>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql</title>
      <link href="/2020/09/22/mysql/"/>
      <url>/2020/09/22/mysql/</url>
      <content type="html"><![CDATA[<h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><img src="/2020/09/22/mysql/2.png"><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>事务四大特征：<br>原子性（Atomicity，或称不可分割性）、<br>一致性（Consistency）、<br>隔离性（Isolation，又称独立性）、<br>持久性（Durability）。<br>一致性：数据库在操作前和操作后，完整性不被破坏。<br>隔离性：多个事务可以同时执行，防止多个事务并发执行引起交叉执行数据不一致。<br>持久性：事务结束后，对数据的修改是永久的。</p><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>（1）读未提交：read uncommitted（2）读已提交：read committed<br>（3）可重复读：repeatable read（4）串行化：serializable  </p><img src="/2020/09/22/mysql/1.png"><h3 id="undolog"><a href="#undolog" class="headerlink" title="undolog"></a>undolog</h3><p>每一个事务都有undolog，事务开启时一个临时表存事务的操作，这个临时表就是undolog，一旦有错误就X掉这次事务。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>四条从效果上第一条影响最大，后面越来越小。<br>① SQL语句及索引的优化 ② 数据库表结构的优化<br>③ 系统配置的优化<br>④ 硬件的优化</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>表级锁<br>行级锁<br>页级锁  </p><h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><p>Myisam(表级锁) Innodb(行级锁)<br>1.为什么Myisam快？<br>因为Myisam B+树存的是引用，加载到内存快。 等Innodb加载完，Myisam都查完了<br>2.为什么Innodb不支持全文索引？<br>数据直接在叶子结点上，如果要全文索引，相当于复制了一份数据库，浪费空间  </p><h2 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h2><img src="/2020/09/22/mysql/3.png"><p>binlog实际是除了select以外所有操作数据库动作的记录，方便恢复数据库。master主动推送到slave结点的relay log，从结点io线程去读relay log然后在sql线程去更新数据库。</p>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis补充</title>
      <link href="/2020/09/20/redis%E8%A1%A5%E5%85%85/"/>
      <url>/2020/09/20/redis%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<h2 id="扩容与缩容"><a href="#扩容与缩容" class="headerlink" title="扩容与缩容"></a>扩容与缩容</h2><p>扩容<br>当used &gt; size 的时候扩容，当进行持久化aof,rdb,script(lua事务) block的时候，如果used &gt; 5size 翻倍扩容<br>缩容<br>当used &lt; size * 0.1的时候缩容<br>扩容和缩容导致rehash<br>scan<br>遇到扩充时</p><h2 id="io多线程"><a href="#io多线程" class="headerlink" title="io多线程"></a>io多线程</h2><img src="/2020/09/20/redis补充/1.png"> <h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><p>当数据量少的时候用压缩列表<br>当数据量大于128用跳表实现</p><h2 id="redis与mongo的区别"><a href="#redis与mongo的区别" class="headerlink" title="redis与mongo的区别"></a>redis与mongo的区别</h2><img src="/2020/09/20/redis补充/2.png"><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><img src="/2020/09/20/redis补充/3.png"><h2 id="C语言使用Redis"><a href="#C语言使用Redis" class="headerlink" title="C语言使用Redis"></a>C语言使用Redis</h2><h3 id="编译hiredis"><a href="#编译hiredis" class="headerlink" title="编译hiredis"></a>编译hiredis</h3><p>进入 redis-6.0.3/deps/hiredis<br>$ make<br>$ sudo make install<br>mkdir -p /usr/local/include/hiredis /usr/local/include/hiredis/adapters /usr/local/lib<br>cp -pPR hiredis.h async.h read.h sds.h /usr/local/include/hiredis<br>cp -pPR adapters/*.h /usr/local/include/hiredis/adapters<br>cp -pPR libhiredis.so /usr/local/lib/libhiredis.so.0.14<br>cd /usr/local/lib &amp;&amp; ln -sf libhiredis.so.0.14 libhiredis.so<br>cp -pPR libhiredis.a /usr/local/lib<br>mkdir -p /usr/local/lib/pkgconfig<br>cp -pPR hiredis.pc /usr/local/lib/pkgconfig<br>可以看到头文件、和库文件的安装目录  </p><h3 id="连接Redis服务"><a href="#连接Redis服务" class="headerlink" title="连接Redis服务"></a>连接Redis服务</h3><img src="/2020/09/20/redis补充/4.png"><h3 id="授权-Auth"><a href="#授权-Auth" class="headerlink" title="授权 Auth"></a>授权 Auth</h3><img src="/2020/09/20/redis补充/5.png"><h3 id="redisCommand-详解"><a href="#redisCommand-详解" class="headerlink" title="redisCommand 详解"></a>redisCommand 详解</h3><p>原型<br>void <em>redisCommand(redisContext </em>c, const char *format, …);  </p><p>参数说明<br>这个函数是一个带有不定参数的。可以按着 format 格式给出对应的参数，这就和 printf 函数类似。<br>c 是一个 reidsConnect 函数返回的一个对象。  </p><p>返回值<br>返回值是一个 void 类型的指针，实际为指向一个 redisReply 类型的指针。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">redisReply 的定义</span><br><span class="line">/* This is the reply object returned by redisCommand() */</span><br><span class="line">typedef struct redisReply &#123;</span><br><span class="line"> /*命令执行结果的返回类型*/</span><br><span class="line"> int type; /* REDIS_REPLY_* */</span><br><span class="line"> /*存储执行结果返回为整数*/</span><br><span class="line"> long long integer; /* The integer when type is REDIS_REPLY_INTEGER */</span><br><span class="line"> /*字符串值的长度*/</span><br><span class="line"> size_t len; /* Length of string */</span><br><span class="line"> /*存储命令执行结果返回是字符串*/</span><br><span class="line"> char *str; /* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING */</span><br><span class="line"> /*返回结果是数组的大小*/</span><br><span class="line"> size_t elements; /* number of elements, for REDIS_REPLY_ARRAY */</span><br><span class="line"> /*存储执行结果返回是数组*/</span><br><span class="line"> struct redisReply **element; /* elements vector for REDIS_REPLY_ARRAY */</span><br><span class="line">&#125; redisReply;</span><br></pre></td></tr></table></figure></p><p>返回结果的类型 reply-&gt;type,reply 为 redisReply* 类型。<br>• REDIS_REPLY_STRING == 1:返回值是字符串,字符串储存在 redis-&gt;str 当中,字符串长度<br>为 redis-&gt;len。<br>• REDIS_REPLY_ARRAY == 2：返回值是数组，数组大小存在 redis-&gt;elements 里面，数组<br>值存储在 redis-&gt;element[i]里面。数组里面存储的是指向 redisReply 的指针，数组里<br>面的返回值可以通过 redis-&gt;element[i]-&gt;str 来访问，数组的结果里全是<br>type==REDIS_REPLY_STRING 的 redisReply 对象指针。<br>• REDIS_REPLY_INTEGER == 3：返回值为整数 long long。<br>• REDIS_REPLY_NIL==4：返回值为空表示执行结果为空。<br>• REDIS_REPLY_STATUS ==5：返回命令执行的状态，比如 set foo bar 返回的状态为 OK，<br>存储在 str 当中 reply-&gt;str == “OK”。<br>• REDIS_REPLY_ERROR ==6 ：命令执行错误,错误信息存放在 reply-&gt;str 当中。  </p><img src="/2020/09/20/redis补充/6.png">]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis</title>
      <link href="/2020/09/20/redis/"/>
      <url>/2020/09/20/redis/</url>
      <content type="html"><![CDATA[<h1 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>基本操作: set key value;    get key;   del key;   mset;   mget;   strlen;   append;<br>数值增减 incr  decr<br>数据时效性 setex psetex<br>(user:id:3506728370:fans 12210947   json)</p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>基本操作: hset key field value;   hget key field;   hgetall key;   hdel key field1 [field2];   hmset;   hmget;  hlen(获取key数量);    hexists<br>扩展操作: hkeys;  hvals;  hincrby;   hincrbyfloat;  hsetnx<br>(京东购物车)</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>底层是双向链表<br>基本操作: lpush;   rpush;   lrange key start stop<br>(朋友圈点赞、最新消息展示)</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>基本操作: sadd;   smembers;   srem;   scard;   sismember;   srandmember;   spop<br>扩展操作: 交并补 sinter   sunion   sdiff;    到指定集合   sinterstore destination key1 key2 sunionstore;   sdiffstore   smove<br>(热点歌单推荐、实现黑白名单)</p><h3 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted_set"></a>sorted_set</h3><p>基本操作: zadd key score1 member1 [score2 member2];   zrange key start stop [withscores];   zrevrange   ;zrem   ;<br>zrangebyscore key min max [withscores] [limit];   zrevrangebyscore;   zremrangebyrank;   zremrangebyscore;   zcard;   zcount;   zinterstore;   zunionstore;<br>扩展操作: zrank key member;   zrevrank key member;   zscore key member;   zincrby key increment member;   </p><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>基本操作: del key;   exists key;   type key;<br>扩展操作: expire key seconds;   pexpire key milliseconds;   expireat(timestamp);   pexpireat;   ttl key(有效时间);   pttl;   persist key(切换key从时效性转换到永久性);<br>其他操作: rename key newkey;   renamenx key newkey(如果对应的新newkey不存在再执行);   sort;   </p><h3 id="db"><a href="#db" class="headerlink" title="db"></a>db</h3><p>基本操作: select index;   quit;   ping;   echo massage;<br>其他操作: move key db;   dbsize;   flushdb   flushall;</p><h1 id="Redis高级"><a href="#Redis高级" class="headerlink" title="Redis高级"></a>Redis高级</h1><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>1.将当先数据状态进行保存<br>2.将数据的操作过程进行保存</p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>1.save。save指令的执行会阻塞当前Redis服务器，知道当前RDB过程完成为止<br>2.bgsave。<br><img src="/2020/09/20/redis/1.png"></p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>AOF重写<br>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将对同一个数据的若干条命令执行结果转化成最终结果数据对应的指令进行记录。<br><img src="/2020/09/20/redis/2.png"></p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>开启: multi<br>执行: exec<br>取消: discard<br>锁: watch key (watch 监控的指令一旦有人修改了，那么事务不会在执行)  取消锁: unwatch<br>分布式锁: setnx lock-key value  有值返回失败，无值返回设置成功     expire lock-key second(解决死锁)    del lock-key  </p><h3 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h3><p>定时删除<br>惰性删除<br>定期删除<br><img src="/2020/09/20/redis/3.png"><br>逐出策略<br><img src="/2020/09/20/redis/4.png"></p><h3 id="高级数据类型"><a href="#高级数据类型" class="headerlink" title="高级数据类型"></a>高级数据类型</h3><p>bitmaps:<br>setbit time bit value;  bitcount<br>HyperLogLog:<br>pfadd;  pfcount;  pfmerge<br>GEO:<br>geoadd key longitude latitude member;   geopos key member;   geodist key member member;   georadius;   georadiusbymember;   geohash;</p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><img src="/2020/09/20/redis/5.png">  <img src="/2020/09/20/redis/6.png"><img src="/2020/09/20/redis/7.png"><img src="/2020/09/20/redis/8.png"><img src="/2020/09/20/redis/9.png"><img src="/2020/09/20/redis/10.png"><img src="/2020/09/20/redis/11.png"><p>主从复制常见问题:<br>频繁的全量复制<br><img src="/2020/09/20/redis/12.png"><br><img src="/2020/09/20/redis/13.png"><br>网络:<br><img src="/2020/09/20/redis/14.png"><br><img src="/2020/09/20/redis/15.png"><br>数据不一致:<br><img src="/2020/09/20/redis/16.png"></p><h3 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h3><img src="/2020/09/20/redis/17.png"><img src="/2020/09/20/redis/18.png"><img src="/2020/09/20/redis/19.png"><h3 id="集群-1"><a href="#集群-1" class="headerlink" title="集群"></a>集群</h3><img src="/2020/09/20/redis/20.png"><h1 id="Redis应用"><a href="#Redis应用" class="headerlink" title="Redis应用"></a>Redis应用</h1><h2 id="企业级解决方案"><a href="#企业级解决方案" class="headerlink" title="企业级解决方案"></a>企业级解决方案</h2><h3 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h3><p>问题:<br>1.请求数量较高<br>2.主从之间数据吞吐量较大，数据同步操作频度较高<br><img src="/2020/09/20/redis/21.png"><br>总结:<br>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>问题:<br>在一个较短的时间内，缓存中较多的key集中过期。我们去大量的访问了对应数据。<br><img src="/2020/09/20/redis/22.png"><br><img src="/2020/09/20/redis/23.png"><br>总结:<br>缓存雪崩就算瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的出现，配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。  </p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>问题:<br>1.Redis中某个key过期，该key访问量巨大<br>2.多个数据请求从服务器直接压到Redis后，均未命中<br>3.Redis在短时间内发起了大量对数据库中同一数据的访问<br><img src="/2020/09/20/redis/24.png"><br>总结:<br>缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即使调整策略。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>问题:<br>1.Redis中大面积出现未命中<br>2.获取的数据在数据库中也不存在，数据库查询未得到对应数据<br><img src="/2020/09/20/redis/25.png"><br>总结:<br>缓存击穿访问了不存在的数据，跳过了合法数据的Redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。</p>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>select/poll/epoll</title>
      <link href="/2020/09/13/select-poll-epoll/"/>
      <url>/2020/09/13/select-poll-epoll/</url>
      <content type="html"><![CDATA[<img src="/2020/09/13/select-poll-epoll/3.png"> <p>socket接口大部分都是阻塞型的。在调用send()的同时，线程将会阻塞，在此期间，线程将无法执行任何运算或响应任何网络请求。</p><h2 id="第一个改进方案"><a href="#第一个改进方案" class="headerlink" title="第一个改进方案"></a>第一个改进方案</h2><p>在服务器端使用多线程（或多进程）。多线程（或多进程）的目的是让每个连接都拥有独立的线程（或进程），这样任何一个连接的阻塞都不会影响其他的连接。</p><p>int accept(int s, struct sockaddr <em>addr, socklen_t </em>addrlen);<br>输入参数 s 是从 socket()，bind()和 listen()中沿用下来的 socket 句柄值。</p><p>问题是还是阻塞的，总会有上限。 </p><h2 id="第二个改进方案"><a href="#第二个改进方案" class="headerlink" title="第二个改进方案"></a>第二个改进方案</h2><p>看起来一定得非阻塞IO才行。  </p><img src="/2020/09/13/select-poll-epoll/4.png"><p>当用户进程发出 read 操作时，如果 kernel 中的数据还没有准备好，那<br>么它并不会 block 用户进程，而是立刻返回一个 error。从用户进程角度讲 ，它发起一个<br>read 操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个 error<br>时，它就知道数据还没有准备好，于是它可以再次发送 read 操作。一旦 kernel 中的数据<br>准备好了，并且又再次收到了用户进程的 system call，那么它马上就将数据拷贝到了用<br>户内存，然后返回，所以，在非阻塞式 IO 中，用户进程其实是需要不断的主动询问 kernel<br>数据准备好了没有。</p><p>使用如下的函数可以将某句柄 fd 设为非阻塞状态。<br>fcntl( fd, F_SETFL, O_NONBLOCK );  </p><p>但是，循环调用 recv()将大幅度推高 CPU占用率，此外，在这个方案中 recv()更多的是起到检测“操作是否完成”的作用，实际操<br>作系统提供了更为高效的检测“操作是否完成“作用的接口，例如 select()多路复用模式。  </p><h2 id="第三个改进方案"><a href="#第三个改进方案" class="headerlink" title="第三个改进方案"></a>第三个改进方案</h2><p>select/epoll 的好处就在于单个 process 就可以同时处理多个网络连接的 IO。它的基本原理就是 select/epoll 这个 function<br>会不断的轮询所负责的所有 socket，当某个 socket 有数据到达了，就通知用户进程。</p><p>select/epoll 的优势并不是对于单个连接能处理得<br>更快，而是在于能处理更多的连接。</p><p>select 接口的原型：<br>FD_ZERO(int fd, fd_set<em> fds)<br>FD_SET(int fd, fd_set</em> fds)<br>FD_ISSET(int fd, fd_set<em> fds)<br>FD_CLR(int fd, fd_set</em> fds)<br>int select(int nfds, fd_set <em>readfds, fd_set </em>writefds, fd_set<br><em>exceptfds,<br>struct timeval </em>timeout)<br>这里，fd_set 类型可以简单的理解为按 bit 位标记句柄的队列，例如要在某 fd_set<br>中标记一个值为 16 的句柄，则该 fd_set 的第 16 个 bit 位被标记为 1。具体的置位、验证<br>可使用 FD_SET、FD_ISSET 等宏实现。在 select()函数中，readfds、writefds 和<br>exceptfds 同时作为输入参数和输出参数。如果输入的 readfds 标记了 16 号句柄，则<br>select()将检测 16 号句柄是否可读。在 select()返回后，可以通过检查 readfds 有否标<br>记 16 号句柄，来判断该“可读”事件是否发生。另外，用户可以设置 timeout 时间。<br><img src="/2020/09/13/select-poll-epoll/5.png"></p><img src="/2020/09/13/select-poll-epoll/6.png"><p>上述模型中，最关键的地方是如何动态维护 select()的三个参数 readfds、writefds<br>和 exceptfds。作为输入参数，readfds 应该标记所有的需要探测的“可读事件”的句柄，<br>其中永远包括那个探测 connect() 的那个“母”句柄；同时，writefds 和 exceptfds 应<br>该标记所有需要探测的“可写事件”和“错误事件”的句柄 ( 使用 FD_SET() 标记 )。<br>作为输出参数，readfds、writefds 和 exceptfds 中的保存了 select() 捕捉到的<br>所有事件的句柄值。程序员需要检查的所有的标记位 ( 使用 FD_ISSET()检查 )，以确定<br>到底哪些句柄发生了事件。</p><p>首先 select()接口并不是实现“事件驱动”的最好选择。<br>因为当需要探测的句柄值较大时，select()接口本身需要消耗大量时间去轮询各个句柄。<br>很多操作系统提供了更为高效的接口，如linux提供了epoll，BSD提供了kqueue，Solaris<br>提供了/dev/poll。如果需要实现更高效的服务器程序，类似 epoll 这样的接口更被推<br>荐。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;netinet/tcp.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;sys/epoll.h&gt;</span><br><span class="line">#include &lt;sys/poll.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define BUFFER_LENGTH1024</span><br><span class="line">#define POLL_SIZE1024</span><br><span class="line">#define EPOLL_SIZE1024</span><br><span class="line"></span><br><span class="line">int client_route(void *arg) &#123;</span><br><span class="line">int clientfd = *(int*)arg;</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line">char buffer[BUFFER_LENGTH] = &#123;0&#125;;</span><br><span class="line">int ret = recv(clientfd, buffer, BUFFER_LENGTH, 0);</span><br><span class="line">if (ret &lt; 0) &#123;</span><br><span class="line">if (errno == EAGAIN || errno == EWOULDBLOCK) &#123;</span><br><span class="line">printf(&quot;read all data\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//close(clientfd);</span><br><span class="line">return -1;</span><br><span class="line">&#125; else if (ret == 0) &#123;</span><br><span class="line">printf(&quot;disconnect \n&quot;);</span><br><span class="line">//close(clientfd);</span><br><span class="line">return 0;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;Recv:%s, %d Bytes\n&quot;, buffer, ret);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void* client_callback(void *arg) &#123;</span><br><span class="line">int clientfd = *(int*)arg;</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line">char buffer[BUFFER_LENGTH] = &#123;0&#125;;</span><br><span class="line">int ret = recv(clientfd, buffer, BUFFER_LENGTH, 0);</span><br><span class="line">if (ret &lt; 0) &#123;</span><br><span class="line">if (errno == EAGAIN || errno == EWOULDBLOCK) &#123;</span><br><span class="line">printf(&quot;read all data\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//close(clientfd);</span><br><span class="line">return NULL;</span><br><span class="line">&#125; else if (ret == 0) &#123;</span><br><span class="line">printf(&quot;disconnect \n&quot;);</span><br><span class="line">//close(clientfd);</span><br><span class="line">return NULL;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;Recv:%s, %d Bytes\n&quot;, buffer, ret);</span><br><span class="line">//return NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line"></span><br><span class="line">if (argc &lt; 2) &#123;</span><br><span class="line">printf(&quot;Paramter Error\n&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">int port = atoi(argv[1]);</span><br><span class="line"></span><br><span class="line">int sockfd = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">if (sockfd &lt; 0) &#123;</span><br><span class="line">perror(&quot;socket&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in addr;</span><br><span class="line">memset(&amp;addr, 0, sizeof(struct sockaddr_in));</span><br><span class="line"></span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line">addr.sin_port = htons(port);</span><br><span class="line">addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">if (bind(sockfd, (struct sockaddr*)&amp;addr, sizeof(struct sockaddr_in)) &lt; 0) &#123;</span><br><span class="line">perror(&quot;bind&quot;);</span><br><span class="line">return 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (listen(sockfd, 5) &lt; 0) &#123;</span><br><span class="line">perror(&quot;listen&quot;);</span><br><span class="line">return 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#if 0</span><br><span class="line"></span><br><span class="line">while (1) &#123; //c10k</span><br><span class="line"></span><br><span class="line">struct sockaddr_in client_addr;</span><br><span class="line">memset(&amp;client_addr, 0, sizeof(struct sockaddr_in));</span><br><span class="line">socklen_t client_len = sizeof(client_addr);</span><br><span class="line"></span><br><span class="line">int clientfd = accept(sockfd, (struct sockaddr*)&amp;client_addr, &amp;client_len);</span><br><span class="line">if (clientfd &lt;= 0) continue;</span><br><span class="line"></span><br><span class="line">pthread_t thread_id;</span><br><span class="line">int ret = pthread_create(&amp;thread_id, NULL, client_callback, &amp;clientfd);</span><br><span class="line">if (ret &lt; 0) &#123;</span><br><span class="line">perror(&quot;pthread_create&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#elif 1</span><br><span class="line"></span><br><span class="line">fd_set rfds, rset;</span><br><span class="line"></span><br><span class="line">FD_ZERO(&amp;rfds);</span><br><span class="line">FD_SET(sockfd, &amp;rfds);</span><br><span class="line"></span><br><span class="line">int max_fd = sockfd;</span><br><span class="line">int i = 0;</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line">rset = rfds;</span><br><span class="line"></span><br><span class="line">int nready = select(max_fd+1, &amp;rset, NULL, NULL, NULL);</span><br><span class="line">if (nready &lt; 0) &#123;</span><br><span class="line">printf(&quot;select error : %d\n&quot;, errno);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (FD_ISSET(sockfd, &amp;rset)) &#123; //accept</span><br><span class="line">struct sockaddr_in client_addr;</span><br><span class="line">memset(&amp;client_addr, 0, sizeof(struct sockaddr_in));</span><br><span class="line">socklen_t client_len = sizeof(client_addr);</span><br><span class="line"></span><br><span class="line">int clientfd = accept(sockfd, (struct sockaddr*)&amp;client_addr, &amp;client_len);</span><br><span class="line">if (clientfd &lt;= 0) continue;</span><br><span class="line"></span><br><span class="line">char str[INET_ADDRSTRLEN] = &#123;0&#125;;</span><br><span class="line">printf(&quot;recvived from %s at port %d, sockfd:%d, clientfd:%d\n&quot;, inet_ntop(AF_INET, &amp;client_addr.sin_addr, str, sizeof(str)),</span><br><span class="line">ntohs(client_addr.sin_port), sockfd, clientfd);</span><br><span class="line"></span><br><span class="line">if (max_fd == FD_SETSIZE) &#123;</span><br><span class="line">printf(&quot;clientfd --&gt; out range\n&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">FD_SET(clientfd, &amp;rfds);</span><br><span class="line"></span><br><span class="line">if (clientfd &gt; max_fd) max_fd = clientfd;</span><br><span class="line"></span><br><span class="line">printf(&quot;sockfd:%d, max_fd:%d, clientfd:%d\n&quot;, sockfd, max_fd, clientfd);</span><br><span class="line"></span><br><span class="line">if (--nready == 0) continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (i = sockfd + 1;i &lt;= max_fd;i ++) &#123;</span><br><span class="line">if (FD_ISSET(i, &amp;rset)) &#123;</span><br><span class="line">char buffer[BUFFER_LENGTH] = &#123;0&#125;;</span><br><span class="line">int ret = recv(i, buffer, BUFFER_LENGTH, 0);</span><br><span class="line">if (ret &lt; 0) &#123;</span><br><span class="line">if (errno == EAGAIN || errno == EWOULDBLOCK) &#123;</span><br><span class="line">printf(&quot;read all data&quot;);</span><br><span class="line">&#125;</span><br><span class="line">FD_CLR(i, &amp;rfds);</span><br><span class="line">close(i);</span><br><span class="line">&#125; else if (ret == 0) &#123;</span><br><span class="line">printf(&quot; disconnect %d\n&quot;, i);</span><br><span class="line">FD_CLR(i, &amp;rfds);</span><br><span class="line">close(i);</span><br><span class="line">break;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;Recv: %s, %d Bytes\n&quot;, buffer, ret);</span><br><span class="line">&#125;</span><br><span class="line">if (--nready == 0) break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">#elif 1</span><br><span class="line"></span><br><span class="line">struct pollfd fds[POLL_SIZE] = &#123;0&#125;;</span><br><span class="line">fds[0].fd = sockfd;</span><br><span class="line">fds[0].events = POLLIN;</span><br><span class="line"></span><br><span class="line">int max_fd = 0, i = 0;</span><br><span class="line">for (i = 1;i &lt; POLL_SIZE;i ++) &#123;</span><br><span class="line">fds[i].fd = -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line">int nready = poll(fds, max_fd+1, 5);</span><br><span class="line">if (nready &lt;= 0) continue;</span><br><span class="line"></span><br><span class="line">if ((fds[0].revents &amp; POLLIN) == POLLIN) &#123;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in client_addr;</span><br><span class="line">memset(&amp;client_addr, 0, sizeof(struct sockaddr_in));</span><br><span class="line">socklen_t client_len = sizeof(client_addr);</span><br><span class="line"></span><br><span class="line">int clientfd = accept(sockfd, (struct sockaddr*)&amp;client_addr, &amp;client_len);</span><br><span class="line">if (clientfd &lt;= 0) continue;</span><br><span class="line"></span><br><span class="line">char str[INET_ADDRSTRLEN] = &#123;0&#125;;</span><br><span class="line">printf(&quot;recvived from %s at port %d, sockfd:%d, clientfd:%d\n&quot;, inet_ntop(AF_INET, &amp;client_addr.sin_addr, str, sizeof(str)),</span><br><span class="line">ntohs(client_addr.sin_port), sockfd, clientfd);</span><br><span class="line"></span><br><span class="line">fds[clientfd].fd = clientfd;</span><br><span class="line">fds[clientfd].events = POLLIN;</span><br><span class="line"></span><br><span class="line">if (clientfd &gt; max_fd) max_fd = clientfd;</span><br><span class="line"></span><br><span class="line">if (--nready == 0) continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (i = sockfd + 1;i &lt;= max_fd;i ++) &#123;</span><br><span class="line">if (fds[i].revents &amp; (POLLIN|POLLERR)) &#123;</span><br><span class="line">char buffer[BUFFER_LENGTH] = &#123;0&#125;;</span><br><span class="line">int ret = recv(i, buffer, BUFFER_LENGTH, 0);</span><br><span class="line">if (ret &lt; 0) &#123;</span><br><span class="line">if (errno == EAGAIN || errno == EWOULDBLOCK) &#123;</span><br><span class="line">printf(&quot;read all data&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//close(i);</span><br><span class="line">fds[i].fd = -1;</span><br><span class="line">&#125; else if (ret == 0) &#123;</span><br><span class="line">printf(&quot; disconnect %d\n&quot;, i);</span><br><span class="line"></span><br><span class="line">close(i);</span><br><span class="line">fds[i].fd = -1;</span><br><span class="line">break;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;Recv: %s, %d Bytes\n&quot;, buffer, ret);</span><br><span class="line">&#125;</span><br><span class="line">if (--nready == 0) break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#else</span><br><span class="line"></span><br><span class="line">int epoll_fd = epoll_create(EPOLL_SIZE);</span><br><span class="line">struct epoll_event ev, events[EPOLL_SIZE] = &#123;0&#125;;</span><br><span class="line"></span><br><span class="line">ev.events = EPOLLIN;</span><br><span class="line">ev.data.fd = sockfd;</span><br><span class="line">epoll_ctl(epoll_fd, EPOLL_CTL_ADD, sockfd, &amp;ev);</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line"></span><br><span class="line">int nready = epoll_wait(epoll_fd, events, EPOLL_SIZE, -1);</span><br><span class="line">if (nready == -1) &#123;</span><br><span class="line">printf(&quot;epoll_wait\n&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">for (i = 0;i &lt; nready;i ++) &#123;</span><br><span class="line">if (events[i].data.fd == sockfd) &#123;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in client_addr;</span><br><span class="line">memset(&amp;client_addr, 0, sizeof(struct sockaddr_in));</span><br><span class="line">socklen_t client_len = sizeof(client_addr);</span><br><span class="line"></span><br><span class="line">int clientfd = accept(sockfd, (struct sockaddr*)&amp;client_addr, &amp;client_len);</span><br><span class="line">if (clientfd &lt;= 0) continue;</span><br><span class="line"></span><br><span class="line">char str[INET_ADDRSTRLEN] = &#123;0&#125;;</span><br><span class="line">printf(&quot;recvived from %s at port %d, sockfd:%d, clientfd:%d\n&quot;, inet_ntop(AF_INET, &amp;client_addr.sin_addr, str, sizeof(str)),</span><br><span class="line">ntohs(client_addr.sin_port), sockfd, clientfd);</span><br><span class="line"></span><br><span class="line">ev.events = EPOLLIN | EPOLLET;</span><br><span class="line">ev.data.fd = clientfd;</span><br><span class="line">epoll_ctl(epoll_fd, EPOLL_CTL_ADD, clientfd, &amp;ev);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">int clientfd = events[i].data.fd;</span><br><span class="line"></span><br><span class="line">char buffer[BUFFER_LENGTH] = &#123;0&#125;;</span><br><span class="line">int ret = recv(clientfd, buffer, BUFFER_LENGTH, 0);</span><br><span class="line">if (ret &lt; 0) &#123;</span><br><span class="line">if (errno == EAGAIN || errno == EWOULDBLOCK) &#123;</span><br><span class="line">printf(&quot;read all data&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(clientfd);</span><br><span class="line"></span><br><span class="line">ev.events = EPOLLIN | EPOLLET;</span><br><span class="line">ev.data.fd = clientfd;</span><br><span class="line">epoll_ctl(epoll_fd, EPOLL_CTL_DEL, clientfd, &amp;ev);</span><br><span class="line">&#125; else if (ret == 0) &#123;</span><br><span class="line">printf(&quot; disconnect %d\n&quot;, clientfd);</span><br><span class="line"></span><br><span class="line">close(clientfd);</span><br><span class="line"></span><br><span class="line">ev.events = EPOLLIN | EPOLLET;</span><br><span class="line">ev.data.fd = clientfd;</span><br><span class="line">epoll_ctl(epoll_fd, EPOLL_CTL_DEL, clientfd, &amp;ev);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;Recv: %s, %d Bytes\n&quot;, buffer, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/09/13/select-poll-epoll/1.jpg"><img src="/2020/09/13/select-poll-epoll/2.jpg"><p><a href="https://www.bilibili.com/video/BV1qJ411w7du" target="_blank" rel="noopener">传送门</a></p><h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><p>用户进程发起 read 操作之后，立刻就可以开始去做其它的事。而另一方面，从 kernel<br>的角度，当它受到一个 asynchronous read 之后，首先它会立刻返回，所以不会对用户进<br>程产生任何 block。然后，kernel 会等待数据准备完成，然后将数据拷贝到用户内存，当<br>这一切都完成之后，kernel 会给用户进程发送一个 signal，告诉它 read 操作完成了。</p><h3 id="阻塞和非阻塞"><a href="#阻塞和非阻塞" class="headerlink" title="阻塞和非阻塞"></a>阻塞和非阻塞</h3><p>是否立刻返回或者挂起</p><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p>两者的关系，是否马上能做其他的事</p><h2 id="信号驱动IO"><a href="#信号驱动IO" class="headerlink" title="信号驱动IO"></a>信号驱动IO</h2><p>进程会收到一个 SIGIO 信号，可以在信号处理函数中调用 I/O 操作函<br>数处理数据。当数据报准备好读取时，内核就为该进程产生一个 SIGIO 信号。我们随后既可<br>以在信号处理函数中调用 read 读取数据报，并通知主循环数据已准备好待处理，也可以立<br>即通知主循环，让它来读取数据报。无论如何处理 SIGIO 信号，这种模型的优势在于等待数<br>据报到达(第一阶段)期间，进程可以继续执行，不被阻塞。免去了 select 的阻塞与轮询，当<br>有活跃套接字时，由注册的 handler 处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int sockfd = 0;</span><br><span class="line"></span><br><span class="line">void do_sigio(int sig) &#123;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in cli_addr;</span><br><span class="line">int clilen = sizeof(struct sockaddr_in);</span><br><span class="line">int clifd = 0;</span><br><span class="line">#if 0</span><br><span class="line">clifd = accept(sockfd, (struct sockaddr*)&amp;cli_addr, &amp;clilen);</span><br><span class="line"></span><br><span class="line">char buffer[256] = &#123;0&#125;;</span><br><span class="line">int len = read(clifd, buffer, 256);</span><br><span class="line">printf(&quot;Listen Message : %s\r\n&quot;, buffer);</span><br><span class="line"></span><br><span class="line">int slen = write(clifd, buffer, len);</span><br><span class="line">#else</span><br><span class="line"></span><br><span class="line">char buffer[256] = &#123;0&#125;;</span><br><span class="line">int len = recvfrom(sockfd, buffer, 256, 0, (struct sockaddr*)&amp;cli_addr, (socklen_t*)&amp;clilen);</span><br><span class="line">printf(&quot;Listen Message : %s\r\n&quot;, buffer);</span><br><span class="line"></span><br><span class="line">int slen = sendto(sockfd, buffer, len, 0, (struct sockaddr*)&amp;cli_addr, clilen);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line"></span><br><span class="line">sockfd = socket(AF_INET, SOCK_DGRAM, 0); //socket编程 AF_INET IPV4</span><br><span class="line"></span><br><span class="line">struct sigaction sigio_action;</span><br><span class="line">sigio_action.sa_flags = 0;</span><br><span class="line">sigio_action.sa_handler = do_sigio;</span><br><span class="line">sigaction(SIGIO, &amp;sigio_action, NULL);</span><br><span class="line">/*</span><br><span class="line"> * sigaction函数的功能是检查或修改与指定信号相关联的处理动作</span><br><span class="line"> * int sigaction(int signum, const struct sigaction *act,</span><br><span class="line">                     struct sigaction *oldact);</span><br><span class="line">        struct sigaction &#123;</span><br><span class="line">            void (*sa_handler)(int);</span><br><span class="line">            void (*sa_sigaction)(int, siginfo_t *, void *);</span><br><span class="line">            sigset_t sa_mask;</span><br><span class="line">            int sa_flags;</span><br><span class="line">            void (*sa_restorer)(void);</span><br><span class="line">        &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct sockaddr_in serv_addr;</span><br><span class="line">memset(&amp;serv_addr, 0, sizeof(serv_addr));</span><br><span class="line"></span><br><span class="line">serv_addr.sin_family = AF_INET;  //地址族</span><br><span class="line">serv_addr.sin_port = htons(9096); //16位TCP/UDP端口号</span><br><span class="line">serv_addr.sin_addr.s_addr = INADDR_ANY; //32位IPV4地址</span><br><span class="line">    /*</span><br><span class="line">     * sockaddr_in 用来处理网络通信的地址</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">fcntl(sockfd, F_SETOWN, getpid()); //根据文件描述词来操作文件的特性</span><br><span class="line"></span><br><span class="line">int flags = fcntl(sockfd, F_GETFL, 0);</span><br><span class="line">flags |= O_ASYNC | O_NONBLOCK;</span><br><span class="line"></span><br><span class="line">fcntl(sockfd, F_SETFL, flags);</span><br><span class="line"></span><br><span class="line">bind(sockfd, (struct sockaddr*)&amp;serv_addr, sizeof(serv_addr));</span><br><span class="line"></span><br><span class="line">while(1) sleep(1);</span><br><span class="line"></span><br><span class="line">close(sockfd);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计网概括</title>
      <link href="/2020/09/13/%E8%AE%A1%E7%BD%91%E6%A6%82%E6%8B%AC/"/>
      <url>/2020/09/13/%E8%AE%A1%E7%BD%91%E6%A6%82%E6%8B%AC/</url>
      <content type="html"><![CDATA[<img src="/2020/09/13/计网概括/1.jpg"><img src="/2020/09/13/计网概括/2.jpg"><p><a href="https://www.bilibili.com/video/BV124411k7uV" target="_blank" rel="noopener">传送门</a></p>]]></content>
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>平衡二叉树与红黑树</title>
      <link href="/2020/09/13/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8E%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>/2020/09/13/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8E%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文转自<a href="https://blog.csdn.net/weewqrer/article/details/51866488" target="_blank" rel="noopener">这里</a></p><h3 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h3><p>STL（标准模板库）中在set map是基于红黑树实现的。<br>Java中在TreeMap使用的也是红黑树。<br>epoll在内核中的实现，用红黑树管理事件块。<br>linux进程调度Completely Fair Scheduler,用红黑树管理进程控制块。  </p><h3 id="红黑树-VS-AVL树"><a href="#红黑树-VS-AVL树" class="headerlink" title="红黑树 VS AVL树"></a>红黑树 VS AVL树</h3><p>常见的平衡树有红黑树和AVL平衡树，为什么STL和linux都使用红黑树作为平衡树的实现？大概有以下几个原因：</p><p>从实现细节上来讲，如果插入一个结点引起了树的不平衡，AVL树和红黑树都最多需要2次旋转操作，即两者都是O(1)；但是在删除node引起树的不平衡时，最坏情况下，AVL需要维护从被删node到root这条路径上所有node的平衡性，因此需要旋转的量级O(logN)，而RB-Tree最多只需3次旋转，只需要O(1)的复杂度</p><p>从两种平衡树对平衡的要求来讲，AVL的结构相较RB-Tree来说更为平衡，在插入和删除node更容易引起Tree的unbalance，因此在大量数据需要插入或者删除时，AVL需要rebalance的频率会更高。因此，RB-Tree在需要大量插入和删除node的场景下，效率更高。自然，由于AVL高度平衡，因此AVL的search效率更高。</p><p>总体来说，RB-tree的统计性能是高于AVL的。</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="红黑树性质"><a href="#红黑树性质" class="headerlink" title="红黑树性质"></a>红黑树性质</h3><p>1.列表项结点是红色或黑色。<br>2.根是黑色。<br>3.所有叶子都是黑色（叶子是NIL结点）。<br>4.每个红色结点必须有两个黑色的子结点。（从每个叶子到根的所有路径上不能有两个连续的红色结点。）<br>5.从任一结点到其每个叶子的所有简单路径都包含相同数目的黑色结点。<br>为了便于处理红黑树中的边界情况，使用一个哨兵来代表所有的NIL结点，也就是说所有指向NIL的指针都指向哨兵T.nil。</p><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><img src="/2020/09/13/平衡二叉树与红黑树/1.png"><p>解释：<br>x的右节点换成y的左节点<br>x的右节点的父亲换成x<br>y名正言顺成为x的父亲的儿子<br>y的父亲发现自己儿子换了，看看是哪边的儿子换了<br>现在跟x相关的结点都换好了，那么y名正言顺成为x的爹  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">*@brief rbt_left_rotate</span><br><span class="line">*@param[in] T 树根</span><br><span class="line">*@param[in] x 要进行旋转的节点</span><br><span class="line">*/</span><br><span class="line">void rbt_left_rotate( rbt_root_t* T, rbt_t* x)&#123;</span><br><span class="line">    rbt_t* y = x-&gt;right;</span><br><span class="line"></span><br><span class="line">    x-&gt;right = y-&gt;left;</span><br><span class="line">    if(x-&gt;right != T-&gt;nil)//更新某结点的父亲时，要确定此结点不是T.nil</span><br><span class="line">        x-&gt;right-&gt;p = x;</span><br><span class="line"></span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    if(x-&gt;p == T-&gt;nil)&#123;//如果x以前是树根，那么现在树根易主了</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    &#125;else if(y-&gt;key &lt; y-&gt;p-&gt;key)</span><br><span class="line">        y-&gt;p-&gt;left = y;</span><br><span class="line">    else</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    y-&gt;left = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*@brief rbt_right_rotate</span><br><span class="line">*@param[in] 树根</span><br><span class="line">*@param[in] 要进行旋转的节点</span><br><span class="line">*/</span><br><span class="line">void rbt_right_rotate( rbt_root_t* T, rbt_t* x)&#123;</span><br><span class="line">    rbt_t * y = x-&gt;left;</span><br><span class="line">    x-&gt;left = y-&gt;right;</span><br><span class="line"></span><br><span class="line">    if(T-&gt;nil != x-&gt;left)</span><br><span class="line">        x-&gt;left-&gt;p = x;</span><br><span class="line"></span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    if(y-&gt;p == T-&gt;nil)</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    else if(y-&gt;key &lt; y-&gt;p-&gt;key)</span><br><span class="line">        y-&gt;p-&gt;left= y;</span><br><span class="line">    else</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    y-&gt;right = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>1.新插入的节点一定是红色的。（如果是黑色的，会破坏条件5）<br>2.如果新插入的节点的父亲是黑色的，则没有破坏任何性质，那么插入完成。<br>3.如果插入节点的父节点是红色, 破坏了性质4. 故插入算法就是通过重新着色或旋转, 来维持性质</p><p>此时要记住一件事事情，插入时总是要考虑它的叔叔，删除时总要考虑它的兄弟。而且插入时维护的主要是颜色（性质4），而删除时维护的主要是黑色结点数量（性质5）</p><p><strong>情况1</strong>：</p><p>N为红，P为红（GP一定为黑），U为红。<br><img src="/2020/09/13/平衡二叉树与红黑树/2.png"></p><p>下面会说明我们可以通过一种特殊的处理把这种情况避免掉。</p><p>那为什么要避免这种情况呢？因为这种情况一般是通过颜色翻转来处理的，也就是把P U换成黑色，把GP抱成红色，但是GP的父亲如果是红色的话又会违反红黑树的性质。</p><p><strong>情况2</strong>：</p><p>N，P都为红（GP一定为黑)，U为黑<br><img src="/2020/09/13/平衡二叉树与红黑树/3.png"></p><p>根据境像，情况2可细分为4种情况，如下：</p><img src="/2020/09/13/平衡二叉树与红黑树/4.png"><p>但是这四种具体情况的处理手法是一样的，都是通过颜色翻转与旋转来处理的。下面我们通过情况2.1和2.2来说明一下处理方法：<br>情况2.2通过调用left_rotate(T,p)变成情况2.1;<br>情况2.1通过交换GP与P的颜色，然后调用right_rotate(T,GP)，此时不再违反任何性质。</p><p>情况2.3和2.4分别是2.1和2.2的境像。</p><p>如何避免情况1</p><p>令X = T.root,在向下遍历的过程中，我们如果遇到X.right.color == x.left.color == RED时我们将x与它孩子的颜色翻转，即把x涂成红色，把x.right和x.left涂成黑色。</p><p>如果x的父亲为黑色，没有违反性质；如果x的父亲为红色，那么可以把x当成新插入的红色结点N，那么只需要处理情况2即可。</p><p>至此，插入完成，具体实现可以看完整代码部分，代码也有必要的注释。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>首先找到要删除的结点，我们定义它为 z</p><p>如果要删除 z 结点，那么就让 z 的后继来代替 z 的位置即可。 如果z是红色的，那么操作便完成了，删除一个红色结点没有违反任何性质。但如果z是黑色的，那么我们删除一个黑色结点，便违反了性质5，造成黑色结点数量的左右不平衡。只要分析出删除一个黑色结点会遇到哪些情况即可。</p><p>如果 z 的两个孩子都不是T.nil，那么我们在 z 的右子树中找出最小的结点 m，把 m 结点的值赋给 z （而不是把m移植到z的位置，也就不用考虑颜色问题，那么我们要删除的结点就成为 m 了。m 肯定没有左孩子。令 z 重新指向 m</p><p>找到要删除的结点 z 之后，我们用 z 的孩子(记作 x )来取代 z的位置（即使z.right == T.nil） 。rbt_transplant(T,z,z.right);</p><p>此时用到下面一段代码，实现用v代替u<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void rbt_transplant(rbt_root_t* T, rbt_t* u, rbt_t* v)&#123;</span><br><span class="line">    if(u-&gt;p == T-&gt;nil)</span><br><span class="line">        T-&gt;root = v;</span><br><span class="line">    else if(u == u-&gt;p-&gt;left)</span><br><span class="line">        u-&gt;p-&gt;left =v;</span><br><span class="line">    else</span><br><span class="line">        u-&gt;p-&gt;right = v;</span><br><span class="line">    v-&gt;p = u-&gt;p;//即使v是T.nil也可以执行这一行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到目前为止，如果要被删除的 z 结点是红色的，那么程序就结束了。但是如果 z 是黑色的，所以删除z之后z这边少了一个黑色结点，会违反性质5，此时分为4种情况（x 是左孩子 和 x 是右孩子分别有4种情况，现在只讨论x是左孩子的情况）：</p><p><strong>情况1</strong>：</p><p>x的兄弟w是红色的，那么它们的父亲、w的孩子都是黑色的。</p><p>这种情况下只能做一种无损的操作，通过交换颜色再旋转，对树的性质不会产生影响，所以从根到x结点的路径上少的一个黑色结点也不会补上。</p><p>交换p与w的颜色，再对p进行左旋操之后，x的新兄弟就为黑色，情况变成了2 3 4中的一种.</p><img src="/2020/09/13/平衡二叉树与红黑树/5.png"><p>图中x为白色，表示我们不关心x的颜色。</p><p><strong>情况2</strong>：</p><p>x的兄弟w是黑色，而且w的两个孩子都是黑色。</p><p>此时可以细分为2种情况，但无论哪种情况，我们要进行的操作都是一样的，都是将w涂成红色，将p涂成黑色。</p><p>如果是情况2.1(有可能由情况1发展过来的)，由于上述操作为x那边补上了一个黑色（从根到x在路径上多了一个黑色结点），此时红黑树性质5得到满足，程序结束。</p><p>如果是情况2.2, 经过上述操作后，P的右子树也少了一个黑色结点，令P作为新的X继续循环。</p><img src="/2020/09/13/平衡二叉树与红黑树/6.png"><p><strong>情况3</strong>:</p><p>W是黑色有，w在左孩子是红色的，W的右孩子是黑色的。</p><p>通过交换L与W的颜色，再对W进行右旋操作。这种操作也不会对红黑树性质产生影响，此时进入情况4，我们会看到通过情况4中的操作最终使红黑树性质得到满足，结束程序。</p><p>图中最后边的R结点没有画出来，因为我们不关心它了</p><img src="/2020/09/13/平衡二叉树与红黑树/7.png"><p><strong>情况4</strong>:</p><p>w是黑色的，w的右孩子是红色的。</p><p>把w涂成p的颜色，把P涂成黑色，R涂成黑色，左旋P。此时从根到x在路径上多了一个黑色结点，程序结束。</p><img src="/2020/09/13/平衡二叉树与红黑树/8.png"><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdafx.h&gt;</span><br><span class="line">#include&lt;malloc.h&gt;</span><br><span class="line">#include &lt;assert.h&gt;</span><br><span class="line"></span><br><span class="line">//版权声明：原创不易，转载请注明转自[weewqrer 红黑树](http://blog.csdn.net/weewqrer/article/details/51866488)</span><br><span class="line"></span><br><span class="line">//红黑树</span><br><span class="line">typedef enum ColorType &#123;RED, BLACK&#125; ColorType;</span><br><span class="line">typedef struct rbt_t&#123;</span><br><span class="line">    int key;</span><br><span class="line">    rbt_t * left;</span><br><span class="line">    rbt_t * right;</span><br><span class="line">    rbt_t * p;</span><br><span class="line">    ColorType color;</span><br><span class="line">&#125;rbt_t;</span><br><span class="line"></span><br><span class="line">typedef struct rbt_root_t&#123;</span><br><span class="line">    rbt_t* root;</span><br><span class="line">    rbt_t* nil;</span><br><span class="line">&#125;rbt_root_t;</span><br><span class="line"></span><br><span class="line">//函数声明</span><br><span class="line">rbt_root_t* rbt_init(void);</span><br><span class="line">static void rbt_handleReorient(rbt_root_t* T, rbt_t* x, int k);</span><br><span class="line">rbt_root_t* rbt_insert(rbt_root_t* &amp;T, int k);</span><br><span class="line">rbt_root_t* rbt_delete(rbt_root_t* &amp;T, int k);</span><br><span class="line"></span><br><span class="line">void rbt_transplant(rbt_root_t* T, rbt_t* u, rbt_t* v);</span><br><span class="line"></span><br><span class="line">static void rbt_left_rotate( rbt_root_t* T, rbt_t* x);</span><br><span class="line">static void rbt_right_rotate( rbt_root_t* T, rbt_t* x);</span><br><span class="line"></span><br><span class="line">void rbt_inPrint(const rbt_root_t* T, rbt_t* t);</span><br><span class="line">void rbt_prePrint(const rbt_t * T, rbt_t* t);</span><br><span class="line">void rbt_print(const rbt_root_t* T);</span><br><span class="line"></span><br><span class="line">static rbt_t* rbt_findMin(rbt_root_t * T, rbt_t* t);</span><br><span class="line">static rbt_t* rbt_findMax(rbt_root_t * T, rbt_t* t);</span><br><span class="line"></span><br><span class="line">static rbt_t* rbt_findMin(rbt_root_t * T, rbt_t* t)&#123;</span><br><span class="line">    if(t == T-&gt;nil) return T-&gt;nil;</span><br><span class="line"></span><br><span class="line">    while(t-&gt;left != T-&gt;nil)</span><br><span class="line">        t = t-&gt;left;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line">static rbt_t* rbt_findMax(rbt_root_t * T, rbt_t* t)&#123;</span><br><span class="line">    if(t == T-&gt;nil) return T-&gt;nil;</span><br><span class="line"></span><br><span class="line">    while(t-&gt;right != T-&gt;nil)</span><br><span class="line">        t = t-&gt;right;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*@brief rbt_init 初始化</span><br><span class="line">*/</span><br><span class="line">rbt_root_t* rbt_init(void)&#123;</span><br><span class="line">    rbt_root_t* T;</span><br><span class="line"></span><br><span class="line">    T = (rbt_root_t*)malloc(sizeof(rbt_root_t));</span><br><span class="line">    assert( NULL != T);</span><br><span class="line"></span><br><span class="line">    T-&gt;nil = (rbt_t*)malloc(sizeof(rbt_t));</span><br><span class="line">    assert(NULL != T-&gt;nil);</span><br><span class="line">    T-&gt;nil-&gt;color = BLACK;</span><br><span class="line">    T-&gt;nil-&gt;left = T-&gt;nil-&gt;right = NULL;</span><br><span class="line">    T-&gt;nil-&gt;p = NULL;</span><br><span class="line"></span><br><span class="line">    T-&gt;root = T-&gt;nil;</span><br><span class="line"></span><br><span class="line">    return T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*@brief rbt_handleReorient  内部函数 由rbt_insert调用</span><br><span class="line">*      在两种情况下调用这个函数：</span><br><span class="line">* 1 x有连个红色儿子</span><br><span class="line">* 2 x为新插入的结点</span><br><span class="line">*</span><br><span class="line">*/ </span><br><span class="line">void rbt_handleReorient(rbt_root_t* T, rbt_t* x, int k)&#123;</span><br><span class="line"></span><br><span class="line">    //在第一种情况下，进行颜色翻转； 在第二种情况下，相当于对新插入的x点初始化</span><br><span class="line">    x-&gt;color = RED;</span><br><span class="line">    x-&gt;left-&gt;color = x-&gt;right-&gt;color = BLACK;</span><br><span class="line"></span><br><span class="line">    //如果x.p为红色，那么x.p一定不是根，x.p.p一定不是T.nil，而且为黑色</span><br><span class="line">    if(  RED == x-&gt;p-&gt;color)&#123;</span><br><span class="line">        x-&gt;p-&gt;p-&gt;color = RED;//此时x, p, x.p.p都为红</span><br><span class="line"></span><br><span class="line">        if(x-&gt;p-&gt;key &lt; x-&gt;p-&gt;p-&gt;key)&#123;</span><br><span class="line">            if(k &gt; x-&gt;p-&gt;key)&#123;</span><br><span class="line">                x-&gt;color = BLACK;//小心地处理颜色</span><br><span class="line">                rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">                rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;//小心地处理颜色</span><br><span class="line">                rbt_right_rotate(T,x-&gt;p-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            if(k &lt; x-&gt;p-&gt;key)&#123;</span><br><span class="line">                x-&gt;color = BLACK;</span><br><span class="line">                rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">                rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                rbt_left_rotate(T,x-&gt;p-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T-&gt;root-&gt;color = BLACK;//无条件令根为黑色</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*@brief brt_insert 插入</span><br><span class="line">*1 新插入的结点一定是红色的，如果是黑色的，会破坏条件4（每个结点到null叶结点的每条路径有同样数目的黑色结点）</span><br><span class="line">*2 如果新插入的结点的父亲是黑色的，那么插入完成。 如果父亲是红色的，那么做一个旋转即可。（前提是叔叔是黑色的）</span><br><span class="line">*3 我们这个插入要保证其叔叔是黑色的。也就是在x下沉过程中，不允许存在两个红色结点肩并肩。</span><br><span class="line">*/</span><br><span class="line">rbt_root_t* rbt_insert(rbt_root_t* &amp;T, int k)&#123;</span><br><span class="line"></span><br><span class="line">    rbt_t * x, *p;</span><br><span class="line">    x = T-&gt;root;</span><br><span class="line">    p = x;</span><br><span class="line"></span><br><span class="line">    //令x下沉到叶子上，而且保证一路上不会有同时为红色的兄弟</span><br><span class="line">    while( x != T-&gt;nil)&#123;        </span><br><span class="line">        //</span><br><span class="line">        //保证没有一对兄弟同时为红色， 为什么要这么做？</span><br><span class="line">        if(x != T-&gt;nil)         </span><br><span class="line">            if(x-&gt;left-&gt;color == RED &amp;&amp; x-&gt;right-&gt;color == RED)</span><br><span class="line">                rbt_handleReorient(T,x,k);</span><br><span class="line"></span><br><span class="line">        p = x;</span><br><span class="line">        if(k&lt;x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        else if(k&gt;x-&gt;key)</span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">        else&#123;</span><br><span class="line">            printf(&quot;\n%d已存在\n&quot;,k);</span><br><span class="line">            return T;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //为x分配空间，并对其进行初始化</span><br><span class="line">    x = (rbt_t *)malloc(sizeof(rbt_t));</span><br><span class="line">    assert(NULL != x);</span><br><span class="line">    x-&gt;key = k;</span><br><span class="line">    x-&gt;color = RED;</span><br><span class="line">    x-&gt;left = x-&gt;right = T-&gt;nil;</span><br><span class="line">    x-&gt;p = p;</span><br><span class="line"></span><br><span class="line">    //让x的父亲指向x</span><br><span class="line">    if(T-&gt;root == T-&gt;nil)</span><br><span class="line">        T-&gt;root = x;        </span><br><span class="line">    else if(k &lt; p-&gt;key)</span><br><span class="line">        p-&gt;left = x;</span><br><span class="line">    else</span><br><span class="line">        p-&gt;right = x;</span><br><span class="line"></span><br><span class="line">    //因为一路下来，如果x的父亲是红色，那么x的叔叔肯定不是红色了，这个时候只需要做一下翻转即可。</span><br><span class="line">    rbt_handleReorient(T,x,k);</span><br><span class="line"></span><br><span class="line">    return T;</span><br><span class="line">&#125;</span><br><span class="line">void rbt_transplant(rbt_root_t* T, rbt_t* u, rbt_t* v)&#123;</span><br><span class="line">    if(u-&gt;p == T-&gt;nil)</span><br><span class="line">        T-&gt;root = v;</span><br><span class="line">    else if(u == u-&gt;p-&gt;left)</span><br><span class="line">        u-&gt;p-&gt;left =v;</span><br><span class="line">    else</span><br><span class="line">        u-&gt;p-&gt;right = v;</span><br><span class="line">    v-&gt;p = u-&gt;p;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*@brief rbt_delete 从树中删除 k</span><br><span class="line">*</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line">rbt_root_t* rbt_delete(rbt_root_t* &amp;T, int k)&#123;</span><br><span class="line">    assert(T != NULL);</span><br><span class="line">    if(NULL == T-&gt;root) return T;</span><br><span class="line"></span><br><span class="line">    //找到要被删除的叶子结点</span><br><span class="line">    rbt_t * toDelete = T-&gt;root; </span><br><span class="line">    rbt_t * x;</span><br><span class="line"></span><br><span class="line">    //找到值为k的结点</span><br><span class="line">    while(toDelete != T-&gt;nil &amp;&amp; toDelete-&gt;key != k)&#123;</span><br><span class="line">        if(k&lt;toDelete-&gt;key)</span><br><span class="line">            toDelete = toDelete-&gt;left;</span><br><span class="line">        else if(k&gt;toDelete-&gt;key)</span><br><span class="line">            toDelete = toDelete-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(toDelete == T-&gt;nil)&#123;</span><br><span class="line">        printf(&quot;\n%d 不存在\n&quot;,k);</span><br><span class="line">        return T;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //如果两个孩子，就找到右子树中最小的代替, alternative最多有一个右孩子</span><br><span class="line">    if(toDelete-&gt;left != T-&gt;nil &amp;&amp; toDelete-&gt;right != T-&gt;nil)&#123;</span><br><span class="line">        rbt_t* alternative = rbt_findMin(T, toDelete-&gt;right);</span><br><span class="line">        k = toDelete-&gt;key = alternative-&gt;key;</span><br><span class="line">        toDelete = alternative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(toDelete-&gt;left == T-&gt;nil)&#123;</span><br><span class="line">        x = toDelete-&gt;right;</span><br><span class="line">        rbt_transplant(T,toDelete,toDelete-&gt;right);</span><br><span class="line">    &#125;else if(toDelete-&gt;right == T-&gt;nil)&#123;</span><br><span class="line">        x = toDelete-&gt;left;</span><br><span class="line">        rbt_transplant(T,toDelete,toDelete-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if(toDelete-&gt;color == BLACK)&#123;</span><br><span class="line">        //x不是todelete，而是用于代替x的那个</span><br><span class="line">        //如果x颜色为红色的，把x涂成黑色即可， 否则 从根到x处少了一个黑色结点，导致不平衡</span><br><span class="line">        while(x != T-&gt;root &amp;&amp; x-&gt;color == BLACK)&#123;</span><br><span class="line">            if(x == x-&gt;p-&gt;left)&#123;</span><br><span class="line">                rbt_t* w = x-&gt;p-&gt;right;</span><br><span class="line"></span><br><span class="line">                //情况1 x的兄弟是红色的，通过</span><br><span class="line">                if(RED == w-&gt;color)&#123;</span><br><span class="line">                    w-&gt;color = BLACK;</span><br><span class="line">                    w-&gt;p-&gt;color = RED;</span><br><span class="line">                    rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">                    w = x-&gt;p-&gt;right;</span><br><span class="line">                &#125;//处理完情况1之后，w.color== BLACK ， 情况就变成2 3 4 了</span><br><span class="line"></span><br><span class="line">                //情况2 x的兄弟是黑色的，并且其儿子都是黑色的。</span><br><span class="line">                if(w-&gt;left-&gt;color == BLACK &amp;&amp; w-&gt;right-&gt;color == BLACK)&#123;</span><br><span class="line">                    if(x-&gt;p-&gt;color == RED)&#123;</span><br><span class="line">                        x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">                        break;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line">                        x = x-&gt;p;//x.p左右是平衡的，但是x.p处少了一个黑结点，所以把x.p作为新的x继续循环</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //情况3 w为黑色的，左孩子为红色。（走到这一步，说明w左右不同时为黑色。）</span><br><span class="line">                if(w-&gt;right-&gt;color == BLACK)&#123;</span><br><span class="line">                    w-&gt;left-&gt;color = BLACK;</span><br><span class="line">                    w-&gt;color = RED;</span><br><span class="line">                    rbt_right_rotate(T,w);</span><br><span class="line">                    w = x-&gt;p-&gt;right;</span><br><span class="line">                &#125;//处理完之后，变成情况4</span><br><span class="line"></span><br><span class="line">                //情况4 走到这一步说明w为黑色， w的左孩子为黑色， 右孩子为红色。</span><br><span class="line"></span><br><span class="line">                w-&gt;color=x-&gt;p-&gt;color;</span><br><span class="line">                x-&gt;p-&gt;color=BLACK;</span><br><span class="line">                w-&gt;right-&gt;color=BLACK;</span><br><span class="line">                rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">                x = T-&gt;root;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                rbt_t* w = x-&gt;p-&gt;left;</span><br><span class="line">                //1</span><br><span class="line">                if(w-&gt;color == RED)&#123;</span><br><span class="line">                    w-&gt;color = BLACK;</span><br><span class="line">                    x-&gt;p-&gt;color = RED;</span><br><span class="line">                    rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">                    w = x-&gt;p-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">                //2</span><br><span class="line">                if(w-&gt;left-&gt;color==BLACK &amp;&amp; w-&gt;right-&gt;color == BLACK)&#123;</span><br><span class="line">                    if(x-&gt;p-&gt;color == RED)&#123;</span><br><span class="line">                        x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line">                        x = x-&gt;p;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //3</span><br><span class="line">                if(w-&gt;left-&gt;color == BLACK)&#123;</span><br><span class="line">                    w-&gt;color = RED;</span><br><span class="line">                    w-&gt;right-&gt;color = BLACK;</span><br><span class="line">                    w = x-&gt;p-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //4</span><br><span class="line">                w-&gt;color=w-&gt;p-&gt;color;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                w-&gt;left-&gt;color = BLACK;</span><br><span class="line">                rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">                x = T-&gt;root;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        x-&gt;color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //放心删除todelete 吧</span><br><span class="line">    free(toDelete);</span><br><span class="line"></span><br><span class="line">    return T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*@brief rbt_left_rotate</span><br><span class="line">*@param[in] T 树根</span><br><span class="line">*@param[in] x 要进行旋转的结点</span><br><span class="line">*/</span><br><span class="line">void rbt_left_rotate( rbt_root_t* T, rbt_t* x)&#123;</span><br><span class="line">    rbt_t* y = x-&gt;right;</span><br><span class="line"></span><br><span class="line">    x-&gt;right = y-&gt;left;</span><br><span class="line">    if(x-&gt;right != T-&gt;nil)</span><br><span class="line">        x-&gt;right-&gt;p = x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    if(y-&gt;p == T-&gt;nil)&#123;</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    &#125;else if(y-&gt;key &lt; y-&gt;p-&gt;key)</span><br><span class="line">        y-&gt;p-&gt;left = y;</span><br><span class="line">    else</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    y-&gt;left = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*@brief rbt_right_rotate</span><br><span class="line">*@param[in] 树根</span><br><span class="line">*@param[in] 要进行旋转的结点</span><br><span class="line">*/</span><br><span class="line">void rbt_right_rotate( rbt_root_t* T, rbt_t* x)&#123;</span><br><span class="line">    rbt_t * y = x-&gt;left;</span><br><span class="line">    x-&gt;left = y-&gt;right;</span><br><span class="line"></span><br><span class="line">    if(T-&gt;nil != x-&gt;left)</span><br><span class="line">        x-&gt;left-&gt;p = x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    if(y-&gt;p == T-&gt;nil)</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    else if(y-&gt;key &lt; y-&gt;p-&gt;key)</span><br><span class="line">        y-&gt;p-&gt;left= y;</span><br><span class="line">    else</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    y-&gt;right = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br><span class="line">void rbt_prePrint(const rbt_root_t* T, rbt_t* t)&#123;</span><br><span class="line">    if(T-&gt;nil == t)return ;</span><br><span class="line">    if(t-&gt;color == RED)</span><br><span class="line">        printf(&quot;%3dR&quot;,t-&gt;key);</span><br><span class="line">    else</span><br><span class="line">        printf(&quot;%3dB&quot;,t-&gt;key);</span><br><span class="line">    rbt_prePrint(T,t-&gt;left);</span><br><span class="line">    rbt_prePrint(T,t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">void rbt_inPrint(const rbt_root_t* T, rbt_t* t)&#123;</span><br><span class="line">    if(T-&gt;nil == t)return ;</span><br><span class="line">    rbt_inPrint(T,t-&gt;left);</span><br><span class="line">    if(t-&gt;color == RED)</span><br><span class="line">        printf(&quot;%3dR&quot;,t-&gt;key);</span><br><span class="line">    else</span><br><span class="line">        printf(&quot;%3dB&quot;,t-&gt;key);</span><br><span class="line">    rbt_inPrint(T,t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//打印程序包括前序遍历和中序遍历两个，因为它俩可以唯一确定一棵二叉树</span><br><span class="line">void rbt_print(const rbt_root_t* T)&#123;</span><br><span class="line">    assert(T!=NULL);</span><br><span class="line">    printf(&quot;\n前序遍历 ：&quot;);</span><br><span class="line">    rbt_prePrint(T,T-&gt;root);</span><br><span class="line">    printf(&quot;\n中序遍历 ：&quot;);</span><br><span class="line">    rbt_inPrint(T,T-&gt;root);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void rbt_test()&#123;</span><br><span class="line">    rbt_root_t* T = rbt_init();</span><br><span class="line"></span><br><span class="line">    /************************************************************************/</span><br><span class="line">    /* 1    测试插入</span><br><span class="line">    /*</span><br><span class="line">    /*</span><br><span class="line">    /*输出  前序遍历 ：  7B  2R  1B  5B  4R 11R  8B 14B 15R</span><br><span class="line">    /*      中序遍历 ：  1B  2R  4R  5B  7B  8B 11R 14B 15R</span><br><span class="line">    /************************************************************************/</span><br><span class="line"></span><br><span class="line">    T = rbt_insert(T,11);</span><br><span class="line">    T = rbt_insert(T,7);</span><br><span class="line">    T = rbt_insert(T,1);</span><br><span class="line">    T = rbt_insert(T,2);</span><br><span class="line">    T = rbt_insert(T,8);</span><br><span class="line">    T = rbt_insert(T,14);</span><br><span class="line">    T = rbt_insert(T,15);</span><br><span class="line">    T = rbt_insert(T,5);</span><br><span class="line">    T = rbt_insert(T,4); </span><br><span class="line"></span><br><span class="line">    T = rbt_insert(T,4); //重复插入测试</span><br><span class="line">    rbt_print(T);</span><br><span class="line"></span><br><span class="line">    /************************************************************************/</span><br><span class="line">    /* 2    测试删除</span><br><span class="line">    /*    </span><br><span class="line">    /*操作  连续删除4个元素 rbt_delete(T,8);rbt_delete(T,14);rbt_delete(T,7);rbt_delete(T,11);</span><br><span class="line">    /*输出  前序遍历 ：  2B  1B  5R  4B 15B</span><br><span class="line">    /*      中序遍历 ：  1B  2B  4B  5R 15B</span><br><span class="line">    /************************************************************************/</span><br><span class="line"></span><br><span class="line">    rbt_delete(T,8);</span><br><span class="line">    rbt_delete(T,14);rbt_delete(T,7);rbt_delete(T,11);</span><br><span class="line"></span><br><span class="line">    rbt_delete(T,8);//删除不存在的元素</span><br><span class="line">    rbt_print(T);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红黑树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>布隆过滤器</title>
      <link href="/2020/09/13/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2020/09/13/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>一个空的布隆过滤器是一串被置为0的bit数组（假设由m位）。同时，应该声明k个不同的散列函数生成一个统一随机分布，每一个散列函数都将元素映射到m个bit中的一个（k是一个小于m的常数，与加入过滤器中的元素个数成比例）。k与相应的m的选择由误判率决定。</p><p>向过滤器中添加元素时，通过k个散列函数得到该元素对应的k个位置，并将这些位置置为1.</p><p>查询某个元素/测试是否与已有元素重复时，依旧通过k个散列函数得到对应的k个位置，判断这些位置是否为1（若全为1则在集合内/重复）</p><p>可以看如下图所示的一个例子，其中，{x,y,z}为集合，w为进行比对的元素，m=18，k=3，不同颜色的箭头表示散列映射关系。可以看出，w并不在{x,y,z}这个集合中。 </p><img src="/2020/09/13/布隆过滤器/1.png"><h2 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h2><p>是用一个数组中的每个数据的每个二进制位表示一个数是否存在。1表示存在，0表示不存在。</p><p>相当于把数组分成很多块的空间，每一块是32个比特位。</p><p>原来32个比特位放一个数据，相当于现在一个位就可以放一个数据。</p>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布隆过滤器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>B树与B+树</title>
      <link href="/2020/09/13/B%E6%A0%91%E4%B8%8EB-%E6%A0%91/"/>
      <url>/2020/09/13/B%E6%A0%91%E4%B8%8EB-%E6%A0%91/</url>
      <content type="html"><![CDATA[<h2 id="B树性质"><a href="#B树性质" class="headerlink" title="B树性质"></a>B树性质</h2><p>一颗M阶B树T，满足以下条件  </p><ol><li>每个结点至多拥有M课子树  </li><li>根结点至少拥有两颗子树  </li><li>除了根结点以外，其余每个分支结点至少拥有M/2课子树  </li><li>所有的叶结点都在同一层上  </li><li>有k课子树的分支结点则存在k-1个关键字，关键字按照递增顺序进行排序  </li><li>关键字数量满足ceil(M/2)-1 &lt;= n &lt;= M-1  </li></ol><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>通过对B树进行遍历，找出要插入的结点以及结点位置，如果找到的key值在B树当中已经存在，则说明插入失败，否则，就可以进行插入操作。这里可以先不管是否超出M阶树的上限要求，因为我们在定义的时候会故意留下一个位置，可以存放多余的一个元素，插入之后，通过判断是否达到M阶树上限要求，再进行递归的分裂操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">*  @description    插入实现元素的插入</span><br><span class="line">*  @return         成功返回OK,如果存在则返回FALSE，否则返回ERROR</span><br><span class="line">*  @notice</span><br><span class="line">***/</span><br><span class="line">Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">&#123;</span><br><span class="line">    BTree p;</span><br><span class="line">    int index, temp;</span><br><span class="line">    Status find_flag;</span><br><span class="line">    if (NULL == T)//考虑B树为空树的情况</span><br><span class="line">    &#123;</span><br><span class="line">        T = (BTree)malloc(BTLEN);</span><br><span class="line">        if (NULL == T) return OVERFLOW;</span><br><span class="line">        T-&gt;keynum = 1;</span><br><span class="line">        T-&gt;parent = NULL;</span><br><span class="line">        for (index = 0;index &lt;= m; ++index)</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;ptr[index] = NULL;</span><br><span class="line">            T-&gt;key[index] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        T-&gt;key[1] = e.key;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    find_flag = findBTree(T, p, temp, e.key);//寻找插入节点</span><br><span class="line">    if (find_flag == TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    if (find_flag == FALSE)</span><br><span class="line">    &#123;                                //不管怎样先直接插入</span><br><span class="line">        p-&gt;keynum++;</span><br><span class="line">        for (index = p-&gt;keynum;index &gt; temp;--index)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;key[index] = p-&gt;key[index - 1];</span><br><span class="line">            p-&gt;ptr[index] = p-&gt;ptr[index - 1];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;ptr[temp] = NULL;</span><br><span class="line">        p-&gt;key[temp] = e.key;</span><br><span class="line">        if (p-&gt;keynum == m)      //这种情况得分裂</span><br><span class="line">        &#123;</span><br><span class="line">            splitBTree(p);</span><br><span class="line">        &#125;</span><br><span class="line">        renewParent(T);</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    return ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分裂"><a href="#分裂" class="headerlink" title="分裂"></a>分裂</h3><p>分裂操作是插入操作过程中一个最重要的操作，因为这是处理“冲突”（即结点中的数据元素大于B树规则中要求的最大个数）的一个通用的处理方式，这种方式必须要对所有的情况都适用，而分裂是解决这一问题一个方法。当然这种方法只是考虑到效率，没有对兄弟可否借数据进行判断，但是另外一种方式比较麻烦，这里先不做讨论。</p><p>分裂的思路是让父亲结点先腾出一个位置（包括key和ptr）出来，然后在需要分裂的结点里面取中间的元素并且移动中间的元素key到父亲结点已经腾出来的key位置那里，然后把分裂出来的右部分接到腾出来的ptr那里。注意整个过程对左部分和右部分的都要改变元素的个数以及清空一些没用的空间。在往上分裂之后可能会造成一种情况，就是父亲结点也可能达到分裂的最大个数，所以，检查父亲结点是否需要分裂，需要的话，递归之。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           status splitBTree(BTree T)</span><br><span class="line">*  @description    递归实现分裂节点操作</span><br><span class="line">*  @return         成功返回OK,否则返回ERROR</span><br><span class="line">*  @notice</span><br><span class="line">***/</span><br><span class="line">Status splitBTree(BTree T) //此时分裂的节点一定会是超出最大值的。</span><br><span class="line">&#123;</span><br><span class="line">    BTree t1, t2;</span><br><span class="line">    int index, index_1;</span><br><span class="line">    if (T-&gt;parent == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        t1 = (BTree)malloc(BTLEN);</span><br><span class="line">        if (NULL == t1) return OVERFLOW;</span><br><span class="line">        t2 = (BTree)malloc(BTLEN);</span><br><span class="line">        if (NULL == t2) return OVERFLOW;</span><br><span class="line"></span><br><span class="line">        t1-&gt;keynum = m / 2;</span><br><span class="line">        t2-&gt;keynum = m - (m / 2) - 1;</span><br><span class="line">        t1-&gt;parent = T;</span><br><span class="line">        t2-&gt;parent = T;</span><br><span class="line">        for (index = 0;index &lt;= m; ++index)  //先全部初始化</span><br><span class="line">        &#123;</span><br><span class="line">            t1-&gt;ptr[index] = NULL;</span><br><span class="line">            t1-&gt;key[index] = 0;</span><br><span class="line">            t2-&gt;ptr[index] = NULL;</span><br><span class="line">            t2-&gt;key[index] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        for (index = 0;index &lt;= m / 2; ++index)  //初始化t1</span><br><span class="line">        &#123;</span><br><span class="line">            t1-&gt;ptr[index] = T-&gt;ptr[index];</span><br><span class="line">            t1-&gt;key[index] = T-&gt;key[index];</span><br><span class="line">        &#125;</span><br><span class="line">        t2-&gt;ptr[0] = T-&gt;ptr[(m / 2) + 1];</span><br><span class="line">        for (index = (m / 2) + 2;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">        &#123;</span><br><span class="line">            t2-&gt;ptr[index - ((m / 2) + 1)] = T-&gt;ptr[index];</span><br><span class="line">            t2-&gt;key[index - ((m / 2) + 1)] = T-&gt;key[index];</span><br><span class="line">        &#125;</span><br><span class="line">        T-&gt;keynum = 1;</span><br><span class="line">        T-&gt;ptr[0] = t1;</span><br><span class="line">        T-&gt;ptr[1] = t2;</span><br><span class="line">        T-&gt;key[1] = T-&gt;key[m / 2 + 1];</span><br><span class="line">        for (index = 2;index &lt;= m; ++index)  //初始化T</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;ptr[index] = NULL;</span><br><span class="line">            T-&gt;key[index] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>B树元素的删除操作与插入操作类似，但是却要麻烦，因为得分两种情况处理。（1）寻找到存在这个元素，而且这个元素所在是叶子节点（即它的孩子为空），直接对其进行删除，之后再判断是否小于B树规则中要求的最小的子树个数。如果小于，那就调用合并函数。（2）如果寻找到的这个元素是非叶子节点的元素，通过寻找比该元素小的最大元素（该元素肯定为叶子节点），把该元素直接赋值给要删除的元素，再在叶子节点处进行（1）中的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">*  @description    实现B树元素的删除</span><br><span class="line">*  @return         成功返回OK,否则返回ERROR</span><br><span class="line">*  @notice</span><br><span class="line">***/</span><br><span class="line">Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">&#123;</span><br><span class="line">    BTree p, q;</span><br><span class="line">    int num, temp, index;</span><br><span class="line">    Status find_flag;</span><br><span class="line">    if (T == NULL)</span><br><span class="line">        return ERROR;</span><br><span class="line">    find_flag = findBTree(T, p, temp, e.key);</span><br><span class="line">    if (find_flag == FALSE)</span><br><span class="line">    &#123;</span><br><span class="line">        return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    if (find_flag == TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        //deleteBTreeBNode(p,temp);</span><br><span class="line">        if (p-&gt;ptr[temp] == NULL)                //如果是叶子节点的话</span><br><span class="line">        &#123;</span><br><span class="line">            for (index = temp;index &lt;= p-&gt;keynum;++index)</span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;key[index] = p-&gt;key[index + 1];</span><br><span class="line">                p-&gt;ptr[index] = p-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;keynum--;</span><br><span class="line">            if (p-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">            &#123;</span><br><span class="line">                //调用借兄弟的函数</span><br><span class="line">                if (borrowBNode(p) == EMPTY) T = NULL;</span><br><span class="line">                else renewParent(T);</span><br><span class="line">            &#125;</span><br><span class="line">            return OK;</span><br><span class="line">        &#125;</span><br><span class="line">        else                                    //不是叶子结点的话</span><br><span class="line">        &#123;</span><br><span class="line">            //遍历</span><br><span class="line">            findMax(p-&gt;ptr[temp - 1], q, num);//返回的q一定会是叶子节点</span><br><span class="line">            p-&gt;key[temp] = q-&gt;key[num];</span><br><span class="line">            q-&gt;key[num] = 0;</span><br><span class="line">            q-&gt;keynum--;</span><br><span class="line">            if (q-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">            &#123;</span><br><span class="line">                //调用借兄弟的函数</span><br><span class="line">                if (borrowBNode(q) == EMPTY) T = NULL;</span><br><span class="line">                else renewParent(T);</span><br><span class="line">            &#125;</span><br><span class="line">            return OK;</span><br><span class="line">        &#125;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    return ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>首先先向兄弟结点借元素，如果兄弟能够借给你元素的话（即借了你之后并不会小于最少的分支），那么直接从兄弟那里取元素，否则，和兄弟合并。<br>合并其实是分裂反过来的情况，从父亲结点那里取出一个key值介于要合并的两个结点之间的元素，插入左部分最末尾处，同时右部分插到左部分后面，然后父亲结点元素依次往前挪。从而实现合并操作。之后，也必须对父亲结点进行判断是否小于最小的分支数，如果也小于，对父亲节点进行递归操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           Status borrowBNode(BTree &amp;T)</span><br><span class="line">*  @description    递归实现，向兄弟借元素，否则和兄弟合并</span><br><span class="line">*  @return         成功返回OK,否则返回ERROR</span><br><span class="line">*  @notice         这种情况应该是T为单元素结点</span><br><span class="line">***/</span><br><span class="line">Status borrowBNode(BTree T)</span><br><span class="line">&#123;</span><br><span class="line">    int mynum, bronum, index;</span><br><span class="line">    BTree b = NULL, f = NULL;</span><br><span class="line">    if (T == NULL) return ERROR;</span><br><span class="line">    f = T-&gt;parent;</span><br><span class="line">    if (f == NULL)//考虑父亲结点不存在的情况</span><br><span class="line">    &#123;</span><br><span class="line">        if (T-&gt;keynum == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            f = T-&gt;ptr[0];</span><br><span class="line">            if (f == NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                free(T);</span><br><span class="line">                return EMPTY;</span><br><span class="line">            &#125;</span><br><span class="line">            for (index = 0;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                T-&gt;key[index] = f-&gt;key[index];</span><br><span class="line">                T-&gt;ptr[index] = f-&gt;ptr[index];</span><br><span class="line">            &#125;</span><br><span class="line">            T-&gt;keynum = f-&gt;keynum;</span><br><span class="line">            free(f);</span><br><span class="line">            renewParent(T);</span><br><span class="line">        &#125;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    mynum = whichSon(T);</span><br><span class="line">    if (mynum == 0)</span><br><span class="line">        bronum = 1;</span><br><span class="line">    else</span><br><span class="line">        bronum = mynum - 1;</span><br><span class="line">    b = f-&gt;ptr[bronum];</span><br><span class="line">    if (b-&gt;keynum == (m + 1) / 2 - 1) //如果兄弟帮不了你了</span><br><span class="line">    &#123;</span><br><span class="line">        //那么就和这个兄弟合体</span><br><span class="line">        if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">        &#123;</span><br><span class="line">            b-&gt;keynum++;</span><br><span class="line">            b-&gt;key[b-&gt;keynum] = f-&gt;key[mynum];</span><br><span class="line">            b-&gt;ptr[b-&gt;keynum] = T-&gt;ptr[0];</span><br><span class="line">            for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                b-&gt;key[index + b-&gt;keynum] = T-&gt;key[index];</span><br><span class="line">                b-&gt;ptr[index + b-&gt;keynum] = T-&gt;ptr[index];</span><br><span class="line">                b-&gt;keynum++;</span><br><span class="line">            &#125;</span><br><span class="line">            free(T);</span><br><span class="line">            for (index = mynum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">                f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            f-&gt;keynum--;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;keynum++;</span><br><span class="line">            T-&gt;key[T-&gt;keynum] = f-&gt;key[bronum];</span><br><span class="line">            T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">            for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                T-&gt;key[index + T-&gt;keynum] = b-&gt;key[index];</span><br><span class="line">                T-&gt;ptr[index + T-&gt;keynum] = b-&gt;ptr[index];</span><br><span class="line">                T-&gt;keynum++;</span><br><span class="line">            &#125;</span><br><span class="line">            free(b);</span><br><span class="line">            for (index = bronum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">                f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            f-&gt;keynum--;</span><br><span class="line">        &#125;</span><br><span class="line">        renewParent(f);</span><br><span class="line">        if (f-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">        &#123;</span><br><span class="line">            //调用借兄弟的函数</span><br><span class="line">            return borrowBNode(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else//如果兄弟能够帮你</span><br><span class="line">    &#123;</span><br><span class="line">        if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">        &#123;</span><br><span class="line">            for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                T-&gt;key[index + 1] = T-&gt;key[index];</span><br><span class="line">                T-&gt;ptr[index + 1] = T-&gt;ptr[index];</span><br><span class="line">            &#125;</span><br><span class="line">            T-&gt;ptr[1] = T-&gt;ptr[0];</span><br><span class="line">            T-&gt;key[1] = f-&gt;key[mynum];</span><br><span class="line">            T-&gt;ptr[0] = b-&gt;ptr[b-&gt;keynum];</span><br><span class="line">            T-&gt;keynum++;</span><br><span class="line">            f-&gt;key[mynum] = b-&gt;key[b-&gt;keynum];</span><br><span class="line">            b-&gt;key[b-&gt;keynum] = 0;</span><br><span class="line">            b-&gt;ptr[b-&gt;keynum] = NULL;</span><br><span class="line">            b-&gt;keynum--;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        else                                    //如果我是第一个</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;keynum++;</span><br><span class="line">            T-&gt;key[T-&gt;keynum] = f-&gt;key[1];</span><br><span class="line">            T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">            f-&gt;key[1] = b-&gt;key[1];</span><br><span class="line">            b-&gt;ptr[0] = b-&gt;ptr[1];</span><br><span class="line">            for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                b-&gt;key[index] = b-&gt;key[index + 1];</span><br><span class="line">                b-&gt;ptr[index] = b-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            b-&gt;keynum--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br></pre></td><td class="code"><pre><span class="line">1 #define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">2 #include&lt;stdio.h&gt;         </span><br><span class="line">3 #include&lt;stdlib.h&gt;</span><br><span class="line">4 #include&lt;time.h&gt;  </span><br><span class="line">5 #define BTREELENGTH 50</span><br><span class="line">6 #define BTLEN (sizeof(BTNode))</span><br><span class="line">7 #define MAXINT 100  </span><br><span class="line">8 typedef enum status</span><br><span class="line">9 &#123;</span><br><span class="line"> 10     TRUE,</span><br><span class="line"> 11     FALSE,</span><br><span class="line"> 12     OK,</span><br><span class="line"> 13     ERROR,</span><br><span class="line"> 14     OVERFLOW,</span><br><span class="line"> 15     EMPTY</span><br><span class="line"> 16 &#125;Status;</span><br><span class="line"> 17 typedef int KeyType;</span><br><span class="line"> 18 </span><br><span class="line"> 19 //**********************************B树****************************************</span><br><span class="line"> 20 #define  m  3   // B树的阶，此设为4</span><br><span class="line"> 21 typedef struct </span><br><span class="line"> 22 &#123;</span><br><span class="line"> 23     KeyType  key;</span><br><span class="line"> 24     char     data;</span><br><span class="line"> 25 &#125; Record;</span><br><span class="line"> 26 typedef struct BTNode </span><br><span class="line"> 27 &#123;</span><br><span class="line"> 28     int             keynum;        // 结点中关键字个数，即结点的大小</span><br><span class="line"> 29     struct BTNode  *parent;        // 指向双亲结点</span><br><span class="line"> 30     KeyType         key[m + 1];      // 关键字向量，0号单元未用</span><br><span class="line"> 31     struct BTNode  *ptr[m + 1];      // 子树指针向量</span><br><span class="line"> 32 //  Record         *recptr[m + 1];   // 记录指针向量，0号单元未用</span><br><span class="line"> 33                                      //在此添加其他自定义数据</span><br><span class="line"> 34 &#125; BTNode, *BTree;                // B树结点和B树的类型</span><br><span class="line"> 35 typedef struct </span><br><span class="line"> 36 &#123;</span><br><span class="line"> 37     BTNode  *pt;      // 指向找到的结点</span><br><span class="line"> 38     int      i;       // 1..m，在结点中的关键字序号</span><br><span class="line"> 39     int      tag;     // 1:查找成功，0:查找失败</span><br><span class="line"> 40 &#125; Result;           // 在B树的查找结果类型   </span><br><span class="line"> 41 //**********************************B树****************************************</span><br><span class="line"> 42 </span><br><span class="line"> 43 //**********************************队列***************************************</span><br><span class="line"> 44 typedef struct LNode &#123;</span><br><span class="line"> 45     BTree data;     // 数据域</span><br><span class="line"> 46     struct LNode *next;     // 指针域</span><br><span class="line"> 47 &#125; LNode, *LinkList;</span><br><span class="line"> 48 //**********************************队列***************************************</span><br><span class="line"> 49 </span><br><span class="line"> 50 /***</span><br><span class="line"> 51 *  @name           Status InitQueue_L(LinkList &amp;L)</span><br><span class="line"> 52 *  @description    初始化队列</span><br><span class="line"> 53 *  @return         成功返回OK，开辟空间失败返回OVERFLOW</span><br><span class="line"> 54 *  @notice</span><br><span class="line"> 55 ***/</span><br><span class="line"> 56 Status InitQueue_L(LinkList &amp;L)</span><br><span class="line"> 57 &#123; // 初始化一个只含头结点的空单链表L</span><br><span class="line"> 58     if (NULL == (L = (LNode*)malloc(sizeof(LNode)))) // 生成新结点</span><br><span class="line"> 59         return OVERFLOW;</span><br><span class="line"> 60     L-&gt;next = NULL;</span><br><span class="line"> 61     return OK;</span><br><span class="line"> 62 &#125;</span><br><span class="line"> 63 /***</span><br><span class="line"> 64 *  @name           LNode* MakeNode_L(BTree e)</span><br><span class="line"> 65 *  @description    构造队列结点</span><br><span class="line"> 66 *  @return         返回结点地址</span><br><span class="line"> 67 *  @notice</span><br><span class="line"> 68 ***/</span><br><span class="line"> 69 LNode* MakeNode_L(BTree e)</span><br><span class="line"> 70 &#123; // 构造数据域为e的单链表结点</span><br><span class="line"> 71     LNode *p;</span><br><span class="line"> 72     p = (LNode*)malloc(sizeof(LNode)); // 分配结点空间</span><br><span class="line"> 73     if (p != NULL)</span><br><span class="line"> 74     &#123;</span><br><span class="line"> 75         p-&gt;data = e;</span><br><span class="line"> 76         p-&gt;next = NULL;</span><br><span class="line"> 77     &#125;</span><br><span class="line"> 78     return p;</span><br><span class="line"> 79 &#125;</span><br><span class="line"> 80 /***</span><br><span class="line"> 81 *  @name           Status Enqueue_L(LNode *p, BTree e)</span><br><span class="line"> 82 *  @description    队列的入队</span><br><span class="line"> 83 *  @return         成功返回OK，否则返回ERROR</span><br><span class="line"> 84 *  @notice</span><br><span class="line"> 85 ***/</span><br><span class="line"> 86 Status Enqueue_L(LNode *p, BTree e)</span><br><span class="line"> 87 &#123; //在p结点之后插入q结点</span><br><span class="line"> 88     if (NULL == p) return ERROR; // 参数不合理</span><br><span class="line"> 89     while (p-&gt;next != NULL)</span><br><span class="line"> 90         p = p-&gt;next;</span><br><span class="line"> 91     p-&gt;next = MakeNode_L(e);         // 对应图4.11（b）的②，修改p结点的指针域</span><br><span class="line"> 92     return OK;</span><br><span class="line"> 93 &#125;</span><br><span class="line"> 94 </span><br><span class="line"> 95 /***</span><br><span class="line"> 96 *  @name           Status Dequeue_L(LNode *p, BTree &amp;e)</span><br><span class="line"> 97 *  @description    队列的出队</span><br><span class="line"> 98 *  @return         成功返回OK，否则返回ERROR</span><br><span class="line"> 99 *  @notice</span><br><span class="line">100 ***/</span><br><span class="line">101 Status Dequeue_L(LNode *p, BTree &amp;e)</span><br><span class="line">102 &#123;</span><br><span class="line">103     // 删除p结点的直接后继结点并用参数e返回被删结点的值</span><br><span class="line">104     LNode *q;</span><br><span class="line">105     if (NULL == p || NULL == p-&gt;next) return ERROR; // 删除位置不合理 </span><br><span class="line">106     q = p-&gt;next;</span><br><span class="line">107     p-&gt;next = q-&gt;next; // 修改被删结点q的指针域</span><br><span class="line">108     e = q-&gt;data;</span><br><span class="line">109     free(q); // 释放结点q</span><br><span class="line">110     return OK;</span><br><span class="line">111 &#125;</span><br><span class="line">112 </span><br><span class="line">113 /***</span><br><span class="line">114 *  @name           void DestroyQueue(LinkList L)</span><br><span class="line">115 *  @description    队列的销毁</span><br><span class="line">116 *  @return         无返回</span><br><span class="line">117 *  @notice</span><br><span class="line">118 ***/</span><br><span class="line">119 void DestroyQueue(LinkList L)</span><br><span class="line">120 &#123;</span><br><span class="line">121     // 销毁整个链表</span><br><span class="line">122     LinkList p;</span><br><span class="line">123     if (L != NULL)</span><br><span class="line">124     &#123;</span><br><span class="line">125         p = L;</span><br><span class="line">126         L = L-&gt;next;</span><br><span class="line">127         free(p);</span><br><span class="line">128         DestroyQueue(L);</span><br><span class="line">129     &#125;</span><br><span class="line">130 &#125;</span><br><span class="line">131 /***</span><br><span class="line">132 *  @name           Status  IfEmpty(LinkList L)</span><br><span class="line">133 *  @description    判断队列是否为空</span><br><span class="line">134 *  @return         空返回TRUE，不空返回FALSE，否则返回ERROR</span><br><span class="line">135 *  @notice         </span><br><span class="line">136 ***/</span><br><span class="line">137 Status  IfEmpty(LinkList L)</span><br><span class="line">138 &#123;</span><br><span class="line">139     if (L == NULL) return ERROR;</span><br><span class="line">140     if (L-&gt;next == NULL) return TRUE;</span><br><span class="line">141     return FALSE;</span><br><span class="line">142 &#125;</span><br><span class="line">143 /***</span><br><span class="line">144 *  @name           Status ergodic(BTree T, LinkList L, int newline, int sum)</span><br><span class="line">145 *  @description    print需要用到的递归遍历程序</span><br><span class="line">146 *  @return         成功返回OK</span><br><span class="line">147 *  @notice         此处用到队列</span><br><span class="line">148 ***/</span><br><span class="line">149 Status ergodic(BTree T, LinkList L, int newline, int sum)</span><br><span class="line">150 &#123;</span><br><span class="line">151     int index;</span><br><span class="line">152     BTree p;</span><br><span class="line">153     if (T != NULL)</span><br><span class="line">154     &#123;</span><br><span class="line">155         printf(&quot;[ &quot;);</span><br><span class="line">156         Enqueue_L(L, T-&gt;ptr[0]);</span><br><span class="line">157         for (index = 1;index &lt;= T-&gt;keynum; index++)</span><br><span class="line">158         &#123;</span><br><span class="line">159             printf(&quot;%d &quot;, T-&gt;key[index]);</span><br><span class="line">160             Enqueue_L(L, T-&gt;ptr[index]);</span><br><span class="line">161         &#125;</span><br><span class="line">162         sum += T-&gt;keynum + 1;</span><br><span class="line">163         printf(&quot;]&quot;);</span><br><span class="line">164         if (newline == 0)</span><br><span class="line">165         &#123;</span><br><span class="line">166             printf(&quot;\n&quot;);</span><br><span class="line">167             newline = sum - 1;</span><br><span class="line">168             sum = 0;</span><br><span class="line">169         &#125;</span><br><span class="line">170         else</span><br><span class="line">171         &#123;</span><br><span class="line">172             --newline;</span><br><span class="line">173         &#125;</span><br><span class="line">174     &#125;</span><br><span class="line">175     if (IfEmpty(L) == FALSE)</span><br><span class="line">176     &#123;</span><br><span class="line">177         Dequeue_L(L, p);</span><br><span class="line">178         ergodic(p, L, newline, sum);</span><br><span class="line">179     &#125;</span><br><span class="line">180     return OK;</span><br><span class="line">181 &#125;</span><br><span class="line">182 /***</span><br><span class="line">183 *  @name           Status print(BTree T)</span><br><span class="line">184 *  @description    层次遍历并分层输出B树</span><br><span class="line">185 *  @return         成功返回OK</span><br><span class="line">186 *  @notice</span><br><span class="line">187 ***/</span><br><span class="line">188 Status print(BTree T)</span><br><span class="line">189 &#123;</span><br><span class="line">190     LinkList L;</span><br><span class="line">191     if (T == NULL)</span><br><span class="line">192     &#123;</span><br><span class="line">193         printf(&quot;[ ]\n&quot;);</span><br><span class="line">194         return OK;</span><br><span class="line">195     &#125;</span><br><span class="line">196     InitQueue_L(L);</span><br><span class="line">197     ergodic(T, L, 0, 0);</span><br><span class="line">198     DestroyQueue(L);</span><br><span class="line">199     return OK;</span><br><span class="line">200 &#125;</span><br><span class="line">201 </span><br><span class="line">202 /***</span><br><span class="line">203 *  @name           Status findMax(BTree T, BTree &amp;p,int ans)</span><br><span class="line">204 *  @description    寻找最大关键字的结点,T为要寻找的树，p为返回的节点,ans为第几个</span><br><span class="line">205 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">206 *  @notice</span><br><span class="line">207 ***/</span><br><span class="line">208 Status findMax(BTree T, BTree &amp;p, int &amp;ans)</span><br><span class="line">209 &#123;</span><br><span class="line">210     if (T == NULL)</span><br><span class="line">211         return ERROR;</span><br><span class="line">212     p = T;</span><br><span class="line">213     while (p-&gt;ptr[p-&gt;keynum] != NULL)</span><br><span class="line">214     &#123;</span><br><span class="line">215         p = p-&gt;ptr[p-&gt;keynum];</span><br><span class="line">216     &#125;</span><br><span class="line">217     ans = p-&gt;keynum;</span><br><span class="line">218     return OK;</span><br><span class="line">219 &#125;</span><br><span class="line">220 /***</span><br><span class="line">221 *  @name           Status findMin(BTree T, BTree &amp;p,int ans)</span><br><span class="line">222 *  @description    寻找最小关键字的结点,T为要寻找的树，p为返回的节点,ans为第几个</span><br><span class="line">223 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">224 *  @notice</span><br><span class="line">225 ***/</span><br><span class="line">226 /***</span><br><span class="line">227 *  @name           Status findBTree(BTree T, BTree &amp;p, int &amp;ans, KeyType k)</span><br><span class="line">228 *  @description    寻找 ,T为要寻找的树，p为返回的节点，ans为第几个元素，k为要找的值</span><br><span class="line">229 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">230 *  @notice</span><br><span class="line">231 ***/</span><br><span class="line">232 Status findBTree(BTree T, BTree &amp;p, int &amp;ans, KeyType k)</span><br><span class="line">233 &#123;</span><br><span class="line">234     BTree q;</span><br><span class="line">235     int index = 1;</span><br><span class="line">236     KeyType  keynow;</span><br><span class="line">237     if (T == NULL)</span><br><span class="line">238         return ERROR;</span><br><span class="line">239     q = T;</span><br><span class="line">240     keynow = T-&gt;key[1];</span><br><span class="line">241     while (q != NULL)                 //深度的遍历</span><br><span class="line">242     &#123;</span><br><span class="line">243         index = 1;</span><br><span class="line">244         keynow = q-&gt;key[index];</span><br><span class="line">245         while (index &lt;= q-&gt;keynum) //节点内对各真值进行遍历</span><br><span class="line">246         &#123;</span><br><span class="line">247             if (k == keynow)           //找到元素</span><br><span class="line">248             &#123;</span><br><span class="line">249                 p = q;</span><br><span class="line">250                 ans = index;</span><br><span class="line">251                 return TRUE;</span><br><span class="line">252             &#125;</span><br><span class="line">253             if (k &gt; keynow)</span><br><span class="line">254             &#123;</span><br><span class="line">255                 if (index == q-&gt;keynum)</span><br><span class="line">256                 &#123;</span><br><span class="line">257                     if (q-&gt;ptr[index] == NULL)</span><br><span class="line">258                     &#123;</span><br><span class="line">259                         p = q;</span><br><span class="line">260                         ans = q-&gt;keynum + 1;</span><br><span class="line">261                         return FALSE;</span><br><span class="line">262                     &#125;</span><br><span class="line">263                     q = q-&gt;ptr[index];</span><br><span class="line">264                     break;</span><br><span class="line">265                 &#125;</span><br><span class="line">266                 ++index;</span><br><span class="line">267                 keynow = q-&gt;key[index];</span><br><span class="line">268                 continue;</span><br><span class="line">269             &#125;</span><br><span class="line">270             if (k &lt; keynow)</span><br><span class="line">271             &#123;</span><br><span class="line">272                 if (q-&gt;ptr[index - 1] == NULL)</span><br><span class="line">273                 &#123;</span><br><span class="line">274                     p = q;</span><br><span class="line">275                     ans = index;</span><br><span class="line">276                     return FALSE;</span><br><span class="line">277                 &#125;</span><br><span class="line">278                 q = q-&gt;ptr[index - 1];</span><br><span class="line">279                 break;</span><br><span class="line">280             &#125;</span><br><span class="line">281         &#125;</span><br><span class="line">282     &#125;</span><br><span class="line">283 </span><br><span class="line">284     return ERROR;</span><br><span class="line">285 &#125;</span><br><span class="line">286 /***</span><br><span class="line">287 *  @name           Status renewParent(BTree p)</span><br><span class="line">288 *  @description    告诉孩子们亲身爸爸是谁</span><br><span class="line">289 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">290 *  @notice</span><br><span class="line">291 ***/</span><br><span class="line">292 Status renewParent(BTree p)</span><br><span class="line">293 &#123;</span><br><span class="line">294     int index;</span><br><span class="line">295     if (p == NULL) return ERROR;</span><br><span class="line">296     for (index = 0;index &lt;= p-&gt;keynum;++index)</span><br><span class="line">297     &#123;</span><br><span class="line">298         if (p-&gt;ptr[index] != NULL)</span><br><span class="line">299         &#123;</span><br><span class="line">300             p-&gt;ptr[index]-&gt;parent = p;</span><br><span class="line">301             renewParent(p-&gt;ptr[index]);</span><br><span class="line">302         &#125;</span><br><span class="line">303     &#125;</span><br><span class="line">304     return OK;</span><br><span class="line">305 &#125;</span><br><span class="line">306 /***</span><br><span class="line">307 *  @name           int whichSon(BTree T)</span><br><span class="line">308 *  @description    找出是父亲的第几个孩子</span><br><span class="line">309 *  @return         成功返回第几个孩子,否则返回-1</span><br><span class="line">310 *  @notice</span><br><span class="line">311 ***/</span><br><span class="line">312 int whichSon(BTree T)</span><br><span class="line">313 &#123;</span><br><span class="line">314     int index = -1;</span><br><span class="line">315     if (T == NULL) return -1;</span><br><span class="line">316     for (index = 0;index &lt;= T-&gt;parent-&gt;keynum;++index) //找出是父亲的第几个孩子</span><br><span class="line">317     &#123;</span><br><span class="line">318         if (T-&gt;parent-&gt;ptr[index] == T) return index;</span><br><span class="line">319     &#125;</span><br><span class="line">320     return -1;</span><br><span class="line">321 &#125;</span><br><span class="line">322 /***</span><br><span class="line">323 *  @name           status splitBTree(BTree T)</span><br><span class="line">324 *  @description    递归实现分裂节点操作</span><br><span class="line">325 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">326 *  @notice</span><br><span class="line">327 ***/</span><br><span class="line">328 Status splitBTree(BTree T) //此时分裂的节点一定会是超出最大值的。</span><br><span class="line">329 &#123;</span><br><span class="line">330     BTree t1, t2;</span><br><span class="line">331     int index, index_1;</span><br><span class="line">332     if (T-&gt;parent == NULL)</span><br><span class="line">333     &#123;</span><br><span class="line">334         t1 = (BTree)malloc(BTLEN);</span><br><span class="line">335         if (NULL == t1) return OVERFLOW;</span><br><span class="line">336         t2 = (BTree)malloc(BTLEN);</span><br><span class="line">337         if (NULL == t2) return OVERFLOW;</span><br><span class="line">338 </span><br><span class="line">339         t1-&gt;keynum = m / 2;</span><br><span class="line">340         t2-&gt;keynum = m - (m / 2) - 1;</span><br><span class="line">341         t1-&gt;parent = T;</span><br><span class="line">342         t2-&gt;parent = T;</span><br><span class="line">343         for (index = 0;index &lt;= m; ++index)  //先全部初始化</span><br><span class="line">344         &#123;</span><br><span class="line">345             t1-&gt;ptr[index] = NULL;</span><br><span class="line">346             t1-&gt;key[index] = 0;</span><br><span class="line">347             t2-&gt;ptr[index] = NULL;</span><br><span class="line">348             t2-&gt;key[index] = 0;</span><br><span class="line">349         &#125;</span><br><span class="line">350         for (index = 0;index &lt;= m / 2; ++index)  //初始化t1</span><br><span class="line">351         &#123;</span><br><span class="line">352             t1-&gt;ptr[index] = T-&gt;ptr[index];</span><br><span class="line">353             t1-&gt;key[index] = T-&gt;key[index];</span><br><span class="line">354         &#125;</span><br><span class="line">355         t2-&gt;ptr[0] = T-&gt;ptr[(m / 2) + 1];</span><br><span class="line">356         for (index = (m / 2) + 2;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">357         &#123;</span><br><span class="line">358             t2-&gt;ptr[index - ((m / 2) + 1)] = T-&gt;ptr[index];</span><br><span class="line">359             t2-&gt;key[index - ((m / 2) + 1)] = T-&gt;key[index];</span><br><span class="line">360         &#125;</span><br><span class="line">361         T-&gt;keynum = 1;</span><br><span class="line">362         T-&gt;ptr[0] = t1;</span><br><span class="line">363         T-&gt;ptr[1] = t2;</span><br><span class="line">364         T-&gt;key[1] = T-&gt;key[m / 2 + 1];</span><br><span class="line">365         for (index = 2;index &lt;= m; ++index)  //初始化T</span><br><span class="line">366         &#123;</span><br><span class="line">367             T-&gt;ptr[index] = NULL;</span><br><span class="line">368             T-&gt;key[index] = 0;</span><br><span class="line">369         &#125;</span><br><span class="line">370         return OK;</span><br><span class="line">371     &#125;</span><br><span class="line">372 </span><br><span class="line">373     index = whichSon(T);</span><br><span class="line">374     for (index_1 = T-&gt;parent-&gt;keynum;index_1 &gt; index;--index_1) //腾出父亲的位置</span><br><span class="line">375     &#123;</span><br><span class="line">376         T-&gt;parent-&gt;ptr[index_1 + 1] = T-&gt;parent-&gt;ptr[index_1];</span><br><span class="line">377         T-&gt;parent-&gt;key[index_1 + 1] = T-&gt;parent-&gt;key[index_1];</span><br><span class="line">378     &#125;</span><br><span class="line">379     T-&gt;parent-&gt;keynum++;</span><br><span class="line">380     T-&gt;parent-&gt;key[index + 1] = T-&gt;key[m / 2 + 1];</span><br><span class="line">381     t2 = T-&gt;parent-&gt;ptr[index + 1] = (BTree)malloc(BTLEN);</span><br><span class="line">382     if (NULL == t2) return OVERFLOW;</span><br><span class="line">383     for (index = 0;index &lt;= m; ++index)  //先全部初始化</span><br><span class="line">384     &#123;</span><br><span class="line">385         t2-&gt;ptr[index] = NULL;</span><br><span class="line">386         t2-&gt;key[index] = 0;</span><br><span class="line">387     &#125;</span><br><span class="line">388     t2-&gt;keynum = m - (m / 2) - 1;</span><br><span class="line">389     t2-&gt;parent = T-&gt;parent;</span><br><span class="line">390     t2-&gt;ptr[0] = T-&gt;ptr[(m / 2) + 1];</span><br><span class="line">391     for (index = (m / 2) + 2;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">392     &#123;</span><br><span class="line">393         t2-&gt;ptr[index - ((m / 2) + 1)] = T-&gt;ptr[index];</span><br><span class="line">394         t2-&gt;key[index - ((m / 2) + 1)] = T-&gt;key[index];</span><br><span class="line">395     &#125;</span><br><span class="line">396     T-&gt;keynum = m / 2;</span><br><span class="line">397     for (index = (m / 2) + 1;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">398     &#123;</span><br><span class="line">399         T-&gt;ptr[index] = NULL;</span><br><span class="line">400         T-&gt;key[index] = 0;</span><br><span class="line">401     &#125;</span><br><span class="line">402     if (T-&gt;parent-&gt;keynum == m)</span><br><span class="line">403     &#123;</span><br><span class="line">404         splitBTree(T-&gt;parent);</span><br><span class="line">405     &#125;</span><br><span class="line">406     return OK;</span><br><span class="line">407 &#125;</span><br><span class="line">408 /***</span><br><span class="line">409 *  @name           Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">410 *  @description    插入实现元素的插入</span><br><span class="line">411 *  @return         成功返回OK,如果存在则返回FALSE，否则返回ERROR</span><br><span class="line">412 *  @notice</span><br><span class="line">413 ***/</span><br><span class="line">414 Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">415 &#123;</span><br><span class="line">416     BTree p;</span><br><span class="line">417     int index, temp;</span><br><span class="line">418     Status find_flag;</span><br><span class="line">419     if (NULL == T)</span><br><span class="line">420     &#123;</span><br><span class="line">421         T = (BTree)malloc(BTLEN);</span><br><span class="line">422         if (NULL == T) return OVERFLOW;</span><br><span class="line">423         T-&gt;keynum = 1;</span><br><span class="line">424         T-&gt;parent = NULL;</span><br><span class="line">425         for (index = 0;index &lt;= m; ++index)</span><br><span class="line">426         &#123;</span><br><span class="line">427             T-&gt;ptr[index] = NULL;</span><br><span class="line">428             T-&gt;key[index] = 0;</span><br><span class="line">429         &#125;</span><br><span class="line">430         T-&gt;key[1] = e.key;</span><br><span class="line">431         return OK;</span><br><span class="line">432     &#125;</span><br><span class="line">433     find_flag = findBTree(T, p, temp, e.key);</span><br><span class="line">434     if (find_flag == TRUE)</span><br><span class="line">435     &#123;</span><br><span class="line">436         return FALSE;</span><br><span class="line">437     &#125;</span><br><span class="line">438     if (find_flag == FALSE)</span><br><span class="line">439     &#123;                                //不管怎样先直接插入</span><br><span class="line">440         p-&gt;keynum++;</span><br><span class="line">441         for (index = p-&gt;keynum;index &gt; temp;--index) //挪位置</span><br><span class="line">442         &#123;</span><br><span class="line">443             p-&gt;key[index] = p-&gt;key[index - 1];</span><br><span class="line">444             p-&gt;ptr[index] = p-&gt;ptr[index - 1];</span><br><span class="line">445         &#125;</span><br><span class="line">446         p-&gt;ptr[temp] = NULL;</span><br><span class="line">447         p-&gt;key[temp] = e.key;</span><br><span class="line">448         if (p-&gt;keynum == m)      //这种情况得分裂</span><br><span class="line">449         &#123;</span><br><span class="line">450             splitBTree(p);</span><br><span class="line">451         &#125;</span><br><span class="line">452         renewParent(T);</span><br><span class="line">453         return OK;</span><br><span class="line">454     &#125;</span><br><span class="line">455     return ERROR;</span><br><span class="line">456 &#125;</span><br><span class="line">457 /***</span><br><span class="line">458 *  @name           Status borrowBNode(BTree &amp;T)</span><br><span class="line">459 *  @description    递归实现，向兄弟借元素，否则和兄弟合并</span><br><span class="line">460 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">461 *  @notice         这种情况应该是T为单元素结点</span><br><span class="line">462 ***/</span><br><span class="line">463 Status borrowBNode(BTree T)</span><br><span class="line">464 &#123;</span><br><span class="line">465     int mynum, bronum, index;</span><br><span class="line">466     BTree b = NULL, f = NULL;</span><br><span class="line">467     if (T == NULL) return ERROR;</span><br><span class="line">468     f = T-&gt;parent;</span><br><span class="line">469     if (f == NULL)//考虑父亲结点不存在的情况</span><br><span class="line">470     &#123;</span><br><span class="line">471         if (T-&gt;keynum == 0)</span><br><span class="line">472         &#123;</span><br><span class="line">473             f = T-&gt;ptr[0];</span><br><span class="line">474             if (f == NULL)</span><br><span class="line">475             &#123;</span><br><span class="line">476                 free(T);</span><br><span class="line">477                 return EMPTY;</span><br><span class="line">478             &#125;</span><br><span class="line">479             for (index = 0;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">480             &#123;</span><br><span class="line">481                 T-&gt;key[index] = f-&gt;key[index];</span><br><span class="line">482                 T-&gt;ptr[index] = f-&gt;ptr[index];</span><br><span class="line">483             &#125;</span><br><span class="line">484             T-&gt;keynum = f-&gt;keynum;</span><br><span class="line">485             free(f);</span><br><span class="line">486             renewParent(T);</span><br><span class="line">487         &#125;</span><br><span class="line">488         return OK;</span><br><span class="line">489     &#125;</span><br><span class="line">490     mynum = whichSon(T);</span><br><span class="line">491     if (mynum == 0)</span><br><span class="line">492         bronum = 1;</span><br><span class="line">493     else</span><br><span class="line">494         bronum = mynum - 1;</span><br><span class="line">495     b = f-&gt;ptr[bronum];</span><br><span class="line">496     if (b-&gt;keynum == (m + 1) / 2 - 1) //如果兄弟帮不了你了</span><br><span class="line">497     &#123;</span><br><span class="line">498         //那么就和这个兄弟合体</span><br><span class="line">499         if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">500         &#123;</span><br><span class="line">501             b-&gt;keynum++;</span><br><span class="line">502             b-&gt;key[b-&gt;keynum] = f-&gt;key[mynum];</span><br><span class="line">503             b-&gt;ptr[b-&gt;keynum] = T-&gt;ptr[0];</span><br><span class="line">504             for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">505             &#123;</span><br><span class="line">506                 b-&gt;key[index + b-&gt;keynum] = T-&gt;key[index];</span><br><span class="line">507                 b-&gt;ptr[index + b-&gt;keynum] = T-&gt;ptr[index];</span><br><span class="line">508                 b-&gt;keynum++;</span><br><span class="line">509             &#125;</span><br><span class="line">510             free(T);</span><br><span class="line">511             for (index = mynum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">512             &#123;</span><br><span class="line">513                 f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">514                 f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">515             &#125;</span><br><span class="line">516             f-&gt;keynum--;</span><br><span class="line">517         &#125;</span><br><span class="line">518         else</span><br><span class="line">519         &#123;</span><br><span class="line">520             T-&gt;keynum++;</span><br><span class="line">521             T-&gt;key[T-&gt;keynum] = f-&gt;key[bronum];</span><br><span class="line">522             T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">523             for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">524             &#123;</span><br><span class="line">525                 T-&gt;key[index + T-&gt;keynum] = b-&gt;key[index];</span><br><span class="line">526                 T-&gt;ptr[index + T-&gt;keynum] = b-&gt;ptr[index];</span><br><span class="line">527                 T-&gt;keynum++;</span><br><span class="line">528             &#125;</span><br><span class="line">529             free(b);</span><br><span class="line">530             for (index = bronum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">531             &#123;</span><br><span class="line">532                 f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">533                 f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">534             &#125;</span><br><span class="line">535             f-&gt;keynum--;</span><br><span class="line">536         &#125;</span><br><span class="line">537         renewParent(f);</span><br><span class="line">538         if (f-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">539         &#123;</span><br><span class="line">540             //调用借兄弟的函数</span><br><span class="line">541             return borrowBNode(f);</span><br><span class="line">542         &#125;</span><br><span class="line">543     &#125;</span><br><span class="line">544     else//如果兄弟能够帮你</span><br><span class="line">545     &#123;</span><br><span class="line">546         if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">547         &#123;</span><br><span class="line">548             for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">549             &#123;</span><br><span class="line">550                 T-&gt;key[index + 1] = T-&gt;key[index];</span><br><span class="line">551                 T-&gt;ptr[index + 1] = T-&gt;ptr[index];</span><br><span class="line">552             &#125;</span><br><span class="line">553             T-&gt;ptr[1] = T-&gt;ptr[0];</span><br><span class="line">554             T-&gt;key[1] = f-&gt;key[mynum];</span><br><span class="line">555             T-&gt;ptr[0] = b-&gt;ptr[b-&gt;keynum];</span><br><span class="line">556             T-&gt;keynum++;</span><br><span class="line">557             f-&gt;key[mynum] = b-&gt;key[b-&gt;keynum];</span><br><span class="line">558             b-&gt;key[b-&gt;keynum] = 0;</span><br><span class="line">559             b-&gt;ptr[b-&gt;keynum] = NULL;</span><br><span class="line">560             b-&gt;keynum--;</span><br><span class="line">561 </span><br><span class="line">562         &#125;</span><br><span class="line">563         else                                    //如果我是第一个</span><br><span class="line">564         &#123;</span><br><span class="line">565             T-&gt;keynum++;</span><br><span class="line">566             T-&gt;key[T-&gt;keynum] = f-&gt;key[1];</span><br><span class="line">567             T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">568             f-&gt;key[1] = b-&gt;key[1];</span><br><span class="line">569             b-&gt;ptr[0] = b-&gt;ptr[1];</span><br><span class="line">570             for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">571             &#123;</span><br><span class="line">572                 b-&gt;key[index] = b-&gt;key[index + 1];</span><br><span class="line">573                 b-&gt;ptr[index] = b-&gt;ptr[index + 1];</span><br><span class="line">574             &#125;</span><br><span class="line">575             b-&gt;keynum--;</span><br><span class="line">576         &#125;</span><br><span class="line">577     &#125;</span><br><span class="line">578     return OK;</span><br><span class="line">579 &#125;</span><br><span class="line">580 </span><br><span class="line">581 /***</span><br><span class="line">582 *  @name           Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">583 *  @description    实现B树元素的删除</span><br><span class="line">584 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">585 *  @notice</span><br><span class="line">586 ***/</span><br><span class="line">587 Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">588 &#123;</span><br><span class="line">589     BTree p, q;</span><br><span class="line">590     int num, temp, index;</span><br><span class="line">591     Status find_flag;</span><br><span class="line">592     if (T == NULL)</span><br><span class="line">593         return ERROR;</span><br><span class="line">594     find_flag = findBTree(T, p, temp, e.key);</span><br><span class="line">595     if (find_flag == FALSE)</span><br><span class="line">596     &#123;</span><br><span class="line">597         return FALSE;</span><br><span class="line">598     &#125;</span><br><span class="line">599     if (find_flag == TRUE)</span><br><span class="line">600     &#123;</span><br><span class="line">601         //deleteBTreeBNode(p,temp);</span><br><span class="line">602         if (p-&gt;ptr[temp] == NULL)                //如果是叶子节点的话</span><br><span class="line">603         &#123;</span><br><span class="line">604             for (index = temp;index &lt;= p-&gt;keynum;++index)</span><br><span class="line">605             &#123;</span><br><span class="line">606                 p-&gt;key[index] = p-&gt;key[index + 1];</span><br><span class="line">607                 p-&gt;ptr[index] = p-&gt;ptr[index + 1];</span><br><span class="line">608             &#125;</span><br><span class="line">609             p-&gt;keynum--;</span><br><span class="line">610             if (p-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">611             &#123;</span><br><span class="line">612                 //调用借兄弟的函数</span><br><span class="line">613                 if (borrowBNode(p) == EMPTY) T = NULL;</span><br><span class="line">614                 else renewParent(T);</span><br><span class="line">615             &#125;</span><br><span class="line">616             return OK;</span><br><span class="line">617         &#125;</span><br><span class="line">618         else                                    //不是叶子结点的话</span><br><span class="line">619         &#123;</span><br><span class="line">620             //遍历</span><br><span class="line">621             findMax(p-&gt;ptr[temp - 1], q, num);//返回的q一定会是叶子节点</span><br><span class="line">622             p-&gt;key[temp] = q-&gt;key[num];</span><br><span class="line">623             q-&gt;key[num] = 0;</span><br><span class="line">624             q-&gt;keynum--;</span><br><span class="line">625             if (q-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">626             &#123;</span><br><span class="line">627                 //调用借兄弟的函数</span><br><span class="line">628                 if (borrowBNode(q) == EMPTY) T = NULL;</span><br><span class="line">629                 else renewParent(T);</span><br><span class="line">630             &#125;</span><br><span class="line">631             return OK;</span><br><span class="line">632         &#125;</span><br><span class="line">633         return OK;</span><br><span class="line">634     &#125;</span><br><span class="line">635     return ERROR;</span><br><span class="line">636 &#125;</span><br><span class="line">637 /***</span><br><span class="line">638 *  @name           Status initBTree(BTree &amp;t)</span><br><span class="line">639 *  @description    初始化一个空B树</span><br><span class="line">640 *  @return         成功返回OK</span><br><span class="line">641 *  @notice</span><br><span class="line">642 ***/</span><br><span class="line">643 Status initBTree(BTree &amp;t)</span><br><span class="line">644 &#123;</span><br><span class="line">645     t = NULL;</span><br><span class="line">646     return OK;</span><br><span class="line">647 &#125;</span><br><span class="line">648 /***</span><br><span class="line">649 *  @name           Status test()</span><br><span class="line">650 *  @description    针对数据结构实验做的测试函数</span><br><span class="line">651 *  @return         成功返回OK</span><br><span class="line">652 *  @notice</span><br><span class="line">653 ***/</span><br><span class="line">654 Status test()</span><br><span class="line">655 &#123;</span><br><span class="line">656     // 测试代码</span><br><span class="line">657     int n, i;</span><br><span class="line">658     int arr[BTREELENGTH];</span><br><span class="line">659     BTree a;</span><br><span class="line">660     Record  d;</span><br><span class="line">661     srand((unsigned)time(NULL));</span><br><span class="line">662     n = rand() % BTREELENGTH;</span><br><span class="line">663     //scanf(&quot;%d&quot;, &amp;n);                    //可以改为自己输入数据</span><br><span class="line">664     printf(&quot;B树的阶为:%d,插入次数为:%d\n&quot;, m, n);</span><br><span class="line">665     initBTree(a);</span><br><span class="line">666     for (i = 0;i &lt; n;i++)</span><br><span class="line">667     &#123;</span><br><span class="line">668         d.key = rand() % MAXINT;</span><br><span class="line">669         //scanf(&quot;%d&quot;, &amp;d.key);            //可以改为自己输入数据</span><br><span class="line">670         arr[i] = d.key;</span><br><span class="line">671         if (insertBTree(a, d) == OK)</span><br><span class="line">672             printf(&quot;第%d次插入%d:\n&quot;, i + 1, d.key);</span><br><span class="line">673         else</span><br><span class="line">674             printf(&quot;第%d次插入%d不成功:\n&quot;, i + 1, d.key);</span><br><span class="line">675         print(a);</span><br><span class="line">676     &#125;</span><br><span class="line">677     for (i = 0;i &lt; n;i++)</span><br><span class="line">678     &#123;</span><br><span class="line">679         d.key = arr[i];</span><br><span class="line">680         if (deleteBTreeRecord(a, d) == OK)</span><br><span class="line">681             printf(&quot;第%d次删除%d:\n&quot;, i + 1, d.key);</span><br><span class="line">682         else</span><br><span class="line">683             printf(&quot;第%d次删除%d不成功:\n&quot;, i + 1, d.key);</span><br><span class="line">684         print(a);</span><br><span class="line">685     &#125;</span><br><span class="line">686     return OK;</span><br><span class="line">687 </span><br><span class="line">688 &#125;</span><br><span class="line">689 /***</span><br><span class="line">690 主函数</span><br><span class="line">691 ***/</span><br><span class="line">692 int  main()</span><br><span class="line">693 &#123;</span><br><span class="line">694     test();</span><br><span class="line">695     return 0;</span><br><span class="line">696 &#125;</span><br></pre></td></tr></table></figure><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><img src="/2020/09/13/B树与B-树/1.png"><img src="/2020/09/13/B树与B-树/2.png">]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> B树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>查找与排序-KMP算法栈队列</title>
      <link href="/2020/09/12/%E6%9F%A5%E6%89%BE%E4%B8%8E%E6%8E%92%E5%BA%8F-KMP%E7%AE%97%E6%B3%95%E6%A0%88%E9%98%9F%E5%88%97/"/>
      <url>/2020/09/12/%E6%9F%A5%E6%89%BE%E4%B8%8E%E6%8E%92%E5%BA%8F-KMP%E7%AE%97%E6%B3%95%E6%A0%88%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><p>稳定性：不稳定</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><p>例子：拿扑克牌排序</p><p>Input: {4, 3, 8, 5, 2, 6, 1, 7}。</p><p>首先拿起第一张牌, 手上有 {4}。</p><p>拿起第二张牌 3, 把 3insert 到手上的牌 {4}, 得到 {3 ，4}。</p><p>拿起第三张牌 8, 把 8 insert 到手上的牌 {3，4 }, 得到 {3 ，4，8}。</p><p>以此类推。</p><p>稳定性：稳定</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>分治做法，先分组，把自己组内的先排好序，再合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void shell_sort(int *data, int length) &#123;</span><br><span class="line">    int gap = 0;</span><br><span class="line">    int i = 0, j = 0;</span><br><span class="line"></span><br><span class="line">    for (gap = length / 2; gap &gt;= 1; gap /= 2) &#123; // 第一层是分组</span><br><span class="line">        for (i = gap; i &lt; length; i++) &#123; // 第二层是先保证前面有序，再遍历后面</span><br><span class="line">            int temp = data[i];</span><br><span class="line">            for (j = i - gap; j &gt;= 0 &amp;&amp; temp &lt; data[j]; j -= gap) &#123; //把大的挪到后面</span><br><span class="line">                data[j + gap] = data[j];</span><br><span class="line">            &#125;</span><br><span class="line">            data[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平均O(1.3n)</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>分治，把一个集合分成两部分，第一部分再分成两部分，第二部分再分成两部分，直到分到最后一层是两块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void sort(int *data, int *temp, int start, int mid, int end) &#123;</span><br><span class="line">    int i = start, j = mid + 1, k = start;</span><br><span class="line">    while (i &lt;= mid &amp;&amp; j &lt;= end) &#123;</span><br><span class="line">        if (data[i] &lt; data[j]) &#123;</span><br><span class="line">            temp[k++] = data[i++];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            temp[k++] = data[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while (i &lt;= mid) &#123;</span><br><span class="line">        temp[k++] = data[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    while (j &lt;= end) &#123;</span><br><span class="line">        temp[k++] = data[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    for (i = start; i &lt;= end; i++) &#123;</span><br><span class="line">        data[i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void merge_sort(int *data, int *temp, int start, int end) &#123;</span><br><span class="line">    if (start &lt; end) &#123;</span><br><span class="line">        int mid = start + (end - start) / 2;</span><br><span class="line">        merge_sort(data, temp, start, mid);</span><br><span class="line">        merge_sort(data, temp, mid + 1, end);</span><br><span class="line">        sort(data, temp, start, mid, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最差和最好都是 O(nlogn) 稳定</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>第一个值作为哨兵位，从最左端到最右端，如果满足条件，右端–，左端++，直到左端等于右端，那么就确定了哨兵位的位置，赋值即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">void sort(int *data, int left, int right) &#123;</span><br><span class="line"></span><br><span class="line">if (left &gt;= right) return ;</span><br><span class="line"></span><br><span class="line">int i = left;</span><br><span class="line">int j = right;</span><br><span class="line">int key = data[left];</span><br><span class="line"></span><br><span class="line">while (i &lt; j) &#123;</span><br><span class="line"></span><br><span class="line">while (i &lt; j &amp;&amp; key &lt;= data[j]) &#123;</span><br><span class="line">j --;</span><br><span class="line">&#125;</span><br><span class="line">data[i] = data[j];</span><br><span class="line"></span><br><span class="line">while (i &lt; j &amp;&amp; key &gt;= data[i]) &#123;</span><br><span class="line">i ++;</span><br><span class="line">&#125;</span><br><span class="line">data[j] = data[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[i] = key;</span><br><span class="line"></span><br><span class="line">sort(data, left, i - 1);</span><br><span class="line">sort(data, i + 1, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int quick_sort(int *data, int length) &#123;</span><br><span class="line"></span><br><span class="line">sort(data, 0, length-1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>text = “abababababacsdkfasdf”<br>ptn = “abab” 回溯多少。<br>取决于共同前缀与后缀，有多少。<br>abc -&gt; a/ab(前缀) c/bc（后缀）0<br>aba -&gt; a/ab a/ba 1<br>abcabc -&gt; a/ab/abc/abca/abcab<br>          c/bc/abc/cabc/bcabc  3  </p><pre><code>void make_next(const char *pattern, int *next) {    int q, k;    int m = strlen(pattern);    next[0] = 0;    for (q = 1,k = 0;q &lt; m; q ++) {        while (k &gt; 0 &amp;&amp; pattern[q] != pattern[k])            k = next[k-1];        if (pattern[q] == pattern[k]) {            k ++;        }        next[q] = k;    }    // next[0] = 0;    // q=1, k=0, pattern[q]:pattern[k] = b:a, next[1] = 0;    // q=2, k=0, pattern[q]:pattern[k] = c:a, next[2] = 0;    // q=3, k=0, pattern[q]:pattern[k] = a:a, k++, next[3] = 1;    // q=4, k=1, pattern[q]:pattern[k] = b:b, k++, next[4] = 2;    // q=5, k=2, pattern[q]:pattern[k] = c:c, k++, next[5] = 3;    // q=6, k=3, pattern[q]:pattern[k] = d:a, k=next[k-1] -&gt; k=0; next[6] = 0;}int kmp(const char *text, const char *pattern, int *next) {    int n = strlen(text);    int m = strlen(pattern);    make_next(pattern, next);    int i, q;    for (i = 0, q = 0;i &lt; n;i ++) {        while (q &gt; 0 &amp;&amp; pattern[q] != text[i]) {            q = next[q-1];        }        if (pattern[q] == text[i]) {            q ++;        }        if (q == m) {            //printf(&quot;Pattern occurs with shift: %d\n&quot;, (i-m+1));            break;        }    }    return i-q+1;}</code></pre>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>idea-maven工程配置</title>
      <link href="/2018/08/04/idea-maven%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/04/idea-maven%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="解决idea创建maven工程后无java-resouces文件问题"><a href="#解决idea创建maven工程后无java-resouces文件问题" class="headerlink" title="解决idea创建maven工程后无java,resouces文件问题"></a>解决idea创建maven工程后无java,resouces文件问题</h1><img src="/2018/08/04/idea-maven工程配置/1.png"><ul><li>Project Structure</li></ul><img src="/2018/08/04/idea-maven工程配置/2.png"><ul><li>Modules-Sources</li></ul><img src="/2018/08/04/idea-maven工程配置/3.png"><ul><li>New Folder</li></ul><img src="/2018/08/04/idea-maven工程配置/4.png"><img src="/2018/08/04/idea-maven工程配置/5.png"><h1 id="解决创建properties文件问题"><a href="#解决创建properties文件问题" class="headerlink" title="解决创建properties文件问题"></a>解决创建properties文件问题</h1><img src="/2018/08/04/idea-maven工程配置/6.png"><h1 id="解决idea-application-context-not-configured-for-this-file问题"><a href="#解决idea-application-context-not-configured-for-this-file问题" class="headerlink" title="解决idea application context not configured for this file问题"></a>解决idea application context not configured for this file问题</h1><p>spring配置文件中时常会出现这个提示，翻译过来大概意思就是没有配置该文件到项目中</p><p>于是进入到file-Project Structure中查看</p><p>可以很明显的看到下面有个感叹号，大概意思是下面的文件没有匹配</p><p>知道原因就很好解决问题了，只需要加到项目中去就可以了</p><img src="/2018/08/04/idea-maven工程配置/7.png"><h1 id="解决idea无法创建jsp文件问题"><a href="#解决idea无法创建jsp文件问题" class="headerlink" title="解决idea无法创建jsp文件问题"></a>解决idea无法创建jsp文件问题</h1><p>File-&gt;Project Struction -&gt;modules 按加号 新增web,双击web resource directory 修改路径 web resource directory path </p><p>为 当前项目目录/src/webapp -&gt;WEB-INF-&gt;JSP</p><img src="/2018/08/04/idea-maven工程配置/8.png">]]></content>
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 关于excel</title>
      <link href="/2018/06/12/Python-%E5%85%B3%E4%BA%8Eexcel/"/>
      <url>/2018/06/12/Python-%E5%85%B3%E4%BA%8Eexcel/</url>
      <content type="html"><![CDATA[<h1 id="read-excel"><a href="#read-excel" class="headerlink" title="read_excel()"></a>read_excel()</h1><p>加载函数为read_excel(),其具体参数如下。</p><p>read_excel(io, sheetname=0, header=0, skiprows=None, skip_footer=0, index_col=None,names=None, parse_cols=None, parse_dates=False,date_parser=None,na_values=None,thousands=None, convert_float=True, has_index_names=None, converters=None,dtype=None, true_values=None, false_values=None, engine=None, squeeze=False, **kwds)</p><p>常用参数解析：</p><ul><li>io : string, path object ; excel 路径。</li><li>sheetname : string, int, mixed list of strings/ints, or None, default 0 返回多表使用sheetname=[0,1],若sheetname=None是返回全表 注意：int/string 返回的是dataframe，而none和list返回的是dict of dataframe</li><li>header : int, list of ints, default 0 指定列名行，默认0，即取第一行，数据为列名行以下的数据 若数据不含列名，则设定 header = None</li><li>skiprows : list-like,Rows to skip at the beginning，省略指定行数的数据</li><li>skip_footer : int,default 0, 省略从尾部数的int行数据</li><li>index_col : int, list of ints, default None指定列为索引列，也可以使用u”strings”</li><li>names : array-like, default None, 指定列的名字。</li></ul><a id="more"></a><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><pre><code>sheet1:ID  NUM-1   NUM-2   NUM-336901   142 168 66136902   78  521 60236903   144 600 52136904   95  457 46836905   69  596 695sheet2：ID  NUM-1   NUM-2   NUM-336906   190 527 69136907   101 403 470</code></pre><h4 id="1-io"><a href="#1-io" class="headerlink" title="1.io"></a>1.io</h4><pre><code>basestation =&quot;F://pythonBook_PyPDAM/data/test.xls&quot;data = pd.read_excel(basestation)print data</code></pre><p>此时输出：</p><pre><code>  ID  NUM-1  NUM-2  NUM-30  36901 142 168 6611  36902 78    521    6022  36903 144 600 5213  36904 95 457 4684  36905 69 596 695</code></pre><h4 id="2-sheetname"><a href="#2-sheetname" class="headerlink" title="2.sheetname"></a>2.sheetname</h4><p>返回多表使用sheetname=[0,1],若sheetname=None是返回全表 注意：int/string 返回的是dataframe，而none和list返回的是dict of dataframe</p><pre><code>data_1 = pd.read_excel(basestation,sheetname=[0,1])print data_1print type(data_1)</code></pre><p>此时输出：</p><pre><code>OrderedDict([(0,       ID  NUM-1  NUM-2  NUM-30  36901    142    168    6611  36902     78    521    6022  36903    144    600    5213  36904     95    457    4684  36905     69    596    695), (1,       ID  NUM-1  NUM-2  NUM-30  36906    190    527    6911  36907    101    403    470)])</code></pre><h4 id="3-header"><a href="#3-header" class="headerlink" title="3.header"></a>3.header</h4><p>指定列名行，默认0，即取第一行，数据为列名行以下的数据 若数据不含列名，则设定 header = None ，注意这里还有列名的一行。</p><pre><code>data = pd.read_excel(basestation,header=None)print data输出：       0      1      2      30     ID  NUM-1  NUM-2  NUM-31  36901    142    168    6612  36902     78    521    6023  36903    144    600    5214  36904     95    457    4685  36905     69    596    695data = pd.read_excel(basestation,header=[3])print data输出：   36903  144    600    521  0  36904     95    457    4681  36905     69    596    695</code></pre><h4 id="4-skiprows"><a href="#4-skiprows" class="headerlink" title="4.skiprows"></a>4.skiprows</h4><p>省略指定行数的数据</p><pre><code>data = pd.read_excel(basestation,skiprows = [1])print data输出:      ID  NUM-1  NUM-2  NUM-30  36902     78    521    6021  36903    144    600    5212  36904     95    457    4683  36905     69    596    695</code></pre><h4 id="5-skip-footer"><a href="#5-skip-footer" class="headerlink" title="5.skip_footer"></a>5.skip_footer</h4><p>省略从尾部数的int行的数据</p><pre><code>data = pd.read_excel(basestation, skip_footer=3)print data输出：      ID  NUM-1  NUM-2  NUM-30  36901    142    168    6611  36902     78    521    602</code></pre><h4 id="6-index-col"><a href="#6-index-col" class="headerlink" title="6.index_col"></a>6.index_col</h4><p>指定列为索引列，也可以使用u”strings”</p><pre><code>data = pd.read_excel(basestation, index_col=&quot;NUM-3&quot;)print data输出：          ID  NUM-1  NUM-2NUM-3                     661    36901    142    168602    36902     78    521521    36903    144    600468    36904     95    457695    36905     69    596</code></pre><h4 id="7-names"><a href="#7-names" class="headerlink" title="7.names"></a>7.names</h4><p>指定列的名字</p><pre><code>data = pd.read_excel(basestation,names=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;e&quot;])print data       a    b    c    e0  36901  142  168  6611  36902   78  521  6022  36903  144  600  5213  36904   95  457  4684  36905   69  596  695</code></pre><h1 id="to-excel"><a href="#to-excel" class="headerlink" title="to_excel()"></a>to_excel()</h1><p>存储函数为pd.DataFrame.to_excel()</p><p>to_excel(self, excel_writer, sheet_name=’Sheet1’, na_rep=’’, float_format=None,columns=None, header=True, index=True, index_label=None,startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None,<br>inf_rep=’inf’, verbose=True, freeze_panes=None)</p><ul><li>excel_writer : 目标路径 </li><li>sheet_name : 填充excel的第几页 </li><li>na_rep : excel中缺失值的填充 </li><li>float_format : string, default None Format string for floating point numbers </li><li>columns : sequence, optional，Columns to write 选择输出的的列。 </li><li>header : boolean or list of string, default True Write out column names. If a list of string is given it is assumed to be aliases for the column names </li><li>index : boolean, default True，Write row names (index) </li><li>index_label : string or sequence, default None， Column label for index column(s) if desired. If None is given, andheader and index are True, then the index names are used. A sequence should be given if the DataFrame uses MultiIndex. </li><li>startrow :upper left cell row to dump data frame </li><li>startcol :upper left cell column to dump data frame </li><li>engine : string, default None ，write engine to use - you can also set this via the options，io.excel.xlsx.writer, io.excel.xls.writer, andio.excel.xlsm.writer. </li><li>merge_cells : boolean, default True Write MultiIndex and Hierarchical Rows as merged cells. </li><li>encoding: string, default None encoding of the resulting excel file. Only necessary for xlwt,other writers support unicode natively. </li><li>inf_rep : string, default ‘inf’ Representation for infinity (there is no native representation for infinity in Excel) </li><li>freeze_panes : tuple of integer (length 2), default None Specifies the one-based bottommost row and rightmost column that is to be frozen</li></ul><p>数据源：</p><pre><code>ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 加载数据：basestation =&quot;F://python/data/test.xls&quot;basestation_end =&quot;F://python/data/test_end.xls&quot;data = pd.read_excel(basestation)</code></pre><h4 id="1-excel-writer"><a href="#1-excel-writer" class="headerlink" title="1.excel_writer"></a>1.excel_writer</h4><p>输出路径</p><pre><code>data.to_excel(basestation_end)输出：    ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453</code></pre><h4 id="2-sheet-name"><a href="#2-sheet-name" class="headerlink" title="2.sheet_name"></a>2.sheet_name</h4><p>将数据存储在excel的那个sheet页面</p><pre><code>data.to_excel(basestation_end,sheet_name=&quot;sheet2&quot;)</code></pre><h4 id="3-na-rep"><a href="#3-na-rep" class="headerlink" title="3.na_rep"></a>3.na_rep</h4><p>缺失值填充</p><pre><code>data.to_excel(basestation_end,na_rep=&quot;NULL&quot;)输出：    ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 NULL</code></pre><h4 id="4-colums"><a href="#4-colums" class="headerlink" title="4.colums"></a>4.colums</h4><p>选择输出的的列</p><pre><code>data.to_excel(basestation_end,columns=[&quot;ID&quot;])输出    ID0   369011   369022   369033   369044   369055   36906</code></pre><h4 id="5-header"><a href="#5-header" class="headerlink" title="5.header"></a>5.header</h4><p>默认为True,可以用list命名列的名字。header = False 则不输出题头</p><pre><code>data.to_excel(basestation_end,header=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;])输出：    a   b   c   d0   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 data.to_excel(basestation_end,header=False,columns=[&quot;ID&quot;])header = False 则不输出题头输出：0   369011   369022   369033   369044   369055   36906</code></pre><h4 id="6-index"><a href="#6-index" class="headerlink" title="6.index"></a>6.index</h4><p>默认为True，显示index，当index=False 则不显示行索引（名字）</p><p>index_label : string or sequence, default None<br>设置索引列的列名</p><pre><code>data.to_excel(basestation_end,index=False)输出：ID  NUM-1   NUM-2   NUM-336901   142 168 66136902   78  521 60236903   144 600 52136904   95  457 46836905   69  596 69536906   165 453 data.to_excel(basestation_end,index_label=[&quot;f&quot;])输出：f   ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 </code></pre><p>以上为read_excel,to_excel用法，<br>若是想对已经读出的excel文件有所操作，请转移：<br><a href="https://blog.csdn.net/liufang0001/article/details/77856255" title="此处" target="_blank" rel="noopener">https://blog.csdn.net/liufang0001/article/details/77856255</a></p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python-tkinter-简单使用介绍</title>
      <link href="/2018/05/30/python-tkinter-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/05/30/python-tkinter-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>本文主要介绍几个简单的tkinter组件。</p><p>说明每个控件最后要加上pack().否则控件是无法显示的.</p><a id="more"></a><h2 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h2><p>说明</p><p>　　标签</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry(&apos;300x200&apos;)l = Label(root, text=&quot;show&quot;, bg=&quot;green&quot;, font=(&quot;Arial&quot;, 12), width=5, height=2)l.pack(side=LEFT)  #这里的side可以赋值为LEFT  RTGHT TOP  BOTTOMroot.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/1.jpg"></p><h2 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h2><p>说明</p><p>　　在屏幕上创建一块矩形区域,多作为容器来布局窗体</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry(&apos;300x200&apos;)Label(root, text=&apos;校训&apos;, font=(&apos;Arial&apos;, 20)).pack()frm = Frame(root)# leftfrm_L = Frame(frm)Label(frm_L, text=&apos;厚德&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)Label(frm_L, text=&apos;博学&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)frm_L.pack(side=LEFT)# rightfrm_R = Frame(frm)Label(frm_R, text=&apos;敬业&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)Label(frm_R, text=&apos;乐群&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)frm_R.pack(side=RIGHT)frm.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/2.jpg"></p><h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p>说明</p><p>　　创建单行文本框</p><p>用法</p><p>　　创建:lb =Entry(根对象, [属性列表])</p><p>　　绑定变量 var=StringVar()    lb=Entry(根对象, textvariable = var)</p><p>　　获取文本框中的值   var.get()</p><p>　　设置文本框中的值   var.set(item1)</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()var = StringVar()e = Entry(root, textvariable = var)var.set(&quot;hello&quot;)e.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/3.jpg"></p><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p>说明</p><p>　　向该空间内输入文本</p><p>用法</p><p>　　t = Text(根对象)</p><p>　　插入:t.insert(mark, 内容)</p><p>　　删除:t.delete(mark1, mark2)</p><p>　　其中,mark可以是行号,或者特殊标识,例如</p><blockquote><p>INSERT:光标的插入点CURRENT:鼠标的当前位置所对应的字符位置</p><p>END:这个Textbuffer的最后一个字符</p><p>SEL_FIRST:选中文本域的第一个字符，如果没有选中区域则会引发异常</p><p>SEL_LAST：选中文本域的最后一个字符，如果没有选中区域则会引发 异常</p></blockquote><p>举例 </p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry(&apos;300x200&apos;)t = Text(root)t.insert(1.0, &apos;hello\n&apos;)t.insert(END, &apos;hello000000\n&apos;)t.insert(END, &apos;nono&apos;)t.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/4.jpg"></p><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p>说明</p><p>　　创建按钮</p><p>用法</p><p>　　Button(根对象, [属性列表])</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()def printhello():    t.insert(&apos;1.0&apos;, &quot;hello\n&quot;)t = Text()t.pack()Button(root, text=&quot;press&quot;, command = printhello).pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/5.jpg"></p><h2 id="Listbox"><a href="#Listbox" class="headerlink" title="Listbox"></a>Listbox</h2><p>说明</p><p>　　列表控件,可以含有一个或多个文本想,可单选也可多选</p><p>用法</p><p>　　创建:lb = ListBox(根对象, [属性列表])</p><p>　　绑定变量 var=StringVar()    lb=ListBox(根对象, listvariable = var)</p><p>　　得到列表中的所有值   var.get()</p><p>　　设置列表中的所有值   var.set((item1, item2, …..))</p><p>　　添加:lb.insert(item)</p><p>　　删除:lb.delete(item,…)</p><p>　　绑定事件 lb.bind(‘<buttonrelease-1>‘, 函数)</buttonrelease-1></p><p>　　获得所选中的选项 lbl.get(lb.curselection())</p><p>属性</p><p>　　selectmode可以为BROWSE MULTIPL SINGLE</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()def print_item(event):    print(lb.get(lb.curselection()))var = StringVar()lb = Listbox(root,  listvariable = var)list_item = [1, 2, 3, 4]         #控件的内容为1 2 3 4for item in list_item:    lb.insert(END, item)lb.delete(2, 4)                  #此时控件的内容为1 3var.set((&apos;a&apos;, &apos;ab&apos;, &apos;c&apos;, &apos;d&apos;))   #重新设置了，这时控件的内容就编程var的内容了print var.get()lb.bind(&apos;&lt;ButtonRelease-1&gt;&apos;, print_item)lb.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/6.jpg"></p><h2 id="Scrollbar"><a href="#Scrollbar" class="headerlink" title="Scrollbar"></a>Scrollbar</h2><p>说明</p><p>　　在屏幕上创建一块矩形区域,多作为容器来布局窗体</p><p>用法</p><p>　　Frame(根对象, [属性列表]), 最长用的用法是和别的控件一起使用.</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()def print_item(event):    print lb.get(lb.curselection())var = StringVar()lb = Listbox(root, height=5, selectmode=BROWSE, listvariable = var)lb.bind(&apos;&lt;ButtonRelease-1&gt;&apos;, print_item)list_item = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]for item in list_item:    lb.insert(END, item)scrl = Scrollbar(root)scrl.pack(side=RIGHT, fill=Y)lb.configure(yscrollcommand = scrl.set)lb.pack(side=LEFT, fill=BOTH)scrl[&apos;command&apos;] = lb.yviewroot.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/7.jpg"></p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python tkinter pack布局</title>
      <link href="/2018/05/24/python-tkinter-pack%E5%B8%83%E5%B1%80/"/>
      <url>/2018/05/24/python-tkinter-pack%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>一、pack参数：</p><p>   &emsp;&emsp;side:按扭停靠在窗口的哪个位置</p><p>　　　　left: 左</p><p>　　　　top: 上</p><p>　　　　right: 右</p><p>　　　　botton: 下</p><p>　　fill:填充</p><p>　　　　x:水平方向填充</p><p>　　　　y:竖直方向填充</p><p>　　　　both:水平和竖直方向填充</p><p>　　　　none:不填充</p><p>　　expand:</p><p>　　　　yes:扩展整个空白区</p><p>　　　　no:不扩展</p><p>　　anchor:</p><p>　　　　N:北  下</p><p>　　　　E:东  右</p><p>　　　　S:南 下</p><p>　　　　W:西 左</p><p>　　　　CENTER:中间</p><p>　　padx:x方向的外边距</p><p>　　pady:y方向的外边距</p><p>　　ipadx:x方向的内边距</p><p>　　ipady：y方向的内边距</p><p>二、代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from Tkinter import *</span><br><span class="line">root = Tk()</span><br><span class="line">Button(root,text=&apos;A&apos;).pack(side=LEFT,expand=YES,fill=Y)</span><br><span class="line">Button(root,text=&apos;B&apos;).pack(side=TOP,expand=YES,fill=BOTH)</span><br><span class="line">Button(root,text=&apos;C&apos;).pack(side=RIGHT,expand=YES,fill=NONE)</span><br><span class="line">Button(root,text=&apos;D&apos;).pack(side=LEFT,expand=NO,fill=Y)</span><br><span class="line">Button(root,text=&apos;E&apos;).pack(side=TOP,expand=YES,fill=BOTH)</span><br><span class="line">Button(root,text=&apos;F&apos;).pack(side=BOTTOM,expand=YES)</span><br><span class="line">Button(root,text=&apos;G&apos;).pack(anchor=SE)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><img src="/2018/05/24/python-tkinter-pack布局/1.png">]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>12306查票订票</title>
      <link href="/2018/04/16/12306%E6%9F%A5%E7%A5%A8%E8%AE%A2%E7%A5%A8/"/>
      <url>/2018/04/16/12306%E6%9F%A5%E7%A5%A8%E8%AE%A2%E7%A5%A8/</url>
      <content type="html"><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/lzqwebsoft/article/details/18674635" target="_blank" rel="noopener">https://blog.csdn.net/lzqwebsoft/article/details/18674635</a><br><a href="https://www.lanindex.com/12306%E8%B4%AD%E7%A5%A8%E6%B5%81%E7%A8%8B%E5%85%A8%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">https://www.lanindex.com/12306%E8%B4%AD%E7%A5%A8%E6%B5%81%E7%A8%8B%E5%85%A8%E8%A7%A3%E6%9E%90/</a></p><p>模拟查票订票操作如下：<br>1.首先12306是一个需要登录操作的网站，然而12306的登录验证大家都知道需要验证码。另外12306的验证码很坑~，需要人工选择对应的物品，这个用代码识别网上我也没找到好的教程，于是… 于是只能人工识别啦。。<br>2.登录之后我们需要输入起始地，目的地，时间等信息，然后查询<br>3.此时我们可以查询到车次信息了，根据自己的时间然后订合适时间和合适座位的票<br>4.选择乘坐人<br>5.建立好订单<br>6.付款，订票成功</p><p>显然我们做到第5步已经达到我们用爬虫的目的。<br><a id="more"></a><br>1.登录操作请参考：<a href="http://www.cnblogs.com/fangtaoa/p/8321449.html" target="_blank" rel="noopener">http://www.cnblogs.com/fangtaoa/p/8321449.html</a><br>2.查票操作请参考：<a href="http://www.cnblogs.com/fangtaoa/p/8360460.html" target="_blank" rel="noopener">http://www.cnblogs.com/fangtaoa/p/8360460.html</a><br>3.下面补充订票操作:<br>按照置顶的参考链接里的步骤获取url和data数据，具体可以看代码类buy<br>确实没什么地方需要多说的，有前驱者已经铺好路了，只需按照步骤一步一步理解就可以了<br>下面补充操作方式：<br></p><p>每一步都有相应的步骤名称，如果哪一步出错了只需在代码中寻找具体是哪个函数没对即可。<br>下面给出代码：<br>1.login.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import chardet</span><br><span class="line">import user</span><br><span class="line">import settings</span><br><span class="line">from coordinate import coor</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Login:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.headers = settings.headers</span><br><span class="line">        self.session = settings.session</span><br><span class="line">        self.id = user.id</span><br><span class="line">        self.psw = user.psw</span><br><span class="line"></span><br><span class="line">    def down_captcha(self):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 下载验证码</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">        response = self.session.get(&apos;https://kyfw.12306.cn/passport/captcha/captcha-image?login_site=E&amp;module=login&amp;rand=sjrand&amp;0.7067378301290344&apos;)</span><br><span class="line">        codeImg = response.content</span><br><span class="line">        fp = open(&apos;code.png&apos;, &apos;wb&apos;)</span><br><span class="line">        fp.write(codeImg)</span><br><span class="line">        fp.close()</span><br><span class="line"></span><br><span class="line">    def get_pos(self):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 输入验证码坐标</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">        coordinate = coor()</span><br><span class="line">        return coordinate</span><br><span class="line"></span><br><span class="line">    def captcha_check(self):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 验证码初验证</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        check_flag = False</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;answer&apos;: self.get_pos(),</span><br><span class="line">            &apos;login_site&apos;:&apos;E&apos;,</span><br><span class="line">            &apos;rand&apos;: &apos;sjrand&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/passport/captcha/captcha-check&apos;</span><br><span class="line">        response = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        result = response.json()</span><br><span class="line">        if result[&apos;result_code&apos;] == &apos;4&apos;:</span><br><span class="line">            print(&apos;验证码通过!&apos;)</span><br><span class="line">            check_flag = True</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;验证码验证失败!&apos;)</span><br><span class="line">        return check_flag</span><br><span class="line"></span><br><span class="line">    def login(self, check_flag):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 进行第一步登录</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        if not check_flag:</span><br><span class="line">            print(&apos;login() error: check_flag为False.&apos;)</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">        login_flag=False</span><br><span class="line">        login_data = &#123;</span><br><span class="line">            &apos;username&apos;: self.id,</span><br><span class="line">            &apos;password&apos;: self.psw,</span><br><span class="line">            &apos;appid&apos;: &apos;otn&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        login_url = &apos;https://kyfw.12306.cn/passport/web/login&apos;</span><br><span class="line">        login_response = self.session.post(login_url, data=login_data, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        #设置网页编码</span><br><span class="line">        if chardet.detect(login_response.content).get(&apos;encoding&apos;) != &apos;UTF-8&apos;:</span><br><span class="line">            login_response.encoding = &apos;UTF-8&apos;</span><br><span class="line"></span><br><span class="line">        if login_response.status_code == 200 and &apos;error&apos; not in login_response.url:</span><br><span class="line">            print(&apos;登录成功！&apos;)</span><br><span class="line">            login_flag = True</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;登录失败！&apos;)</span><br><span class="line"></span><br><span class="line">        return login_flag</span><br><span class="line"></span><br><span class="line">    def auth_uamtk(self,login_flag):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 进行登录的验证</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;appid&apos;: &apos;otn&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/passport/web/auth/uamtk&apos;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            result = dict(resp.json())</span><br><span class="line">            print(&apos;auth_uamtk():&apos;, result[&apos;result_message&apos;])</span><br><span class="line">            if result.get(&apos;result_code&apos;) == 0:##</span><br><span class="line">                return result.get(&apos;newapptk&apos;)</span><br><span class="line">            else:</span><br><span class="line">                return None</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;登录验证失败！&apos;)</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">    def uamatuth_client(self, newapptk):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 确认是否真正的登录成功</span><br><span class="line">        # :param newapptk:</span><br><span class="line">        # :return:</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        if newapptk is None:</span><br><span class="line">            print(&apos;并没有真正的登录成功！&apos;)</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;tk&apos;: newapptk,</span><br><span class="line">        &#125;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/uamauthclient&apos;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            result = dict(resp.json())</span><br><span class="line">            print(&apos;uamatuth_client()&apos;, result.get(&apos;result_message&apos;))</span><br><span class="line">            if result.get(&apos;result_code&apos;) == 0:</span><br><span class="line">                username = result.get(&apos;username&apos;)</span><br><span class="line">                print(&apos;&#123;&#125;初始化登录成功!&apos;.format(username))</span><br><span class="line">                return username</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;uamatuth_client() error! status_code:&#123;&#125;, url:&#123;&#125;&apos;</span><br><span class="line">                  .format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">    def init_my_12306(self, username):</span><br><span class="line"></span><br><span class="line">        if username is None:</span><br><span class="line">            print(&apos;init_my_12306() error: username 为None!&apos;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/index/initMy12306&apos;</span><br><span class="line">        resp = self.session.get(url, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            content = etree.HTML(resp.content)</span><br><span class="line">            #先用etree转化</span><br><span class="line">            name = content.xpath(&apos;//*[@id=&quot;login_user&quot;]/span/text()&apos;)</span><br><span class="line">            print(&apos;init_my_12306(): name&apos;, name)</span><br><span class="line">            if name == username:</span><br><span class="line">                print(&apos;init_my_12306():你已经登录成功了!&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;init_my_12306() error! status_code:&#123;&#125;, url:&#123;&#125;&apos;.</span><br><span class="line">                  format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    login = Login()</span><br><span class="line">    login.down_captcha()</span><br><span class="line">    check_flag = login.captcha_check()</span><br><span class="line">    login_flag = login.login(check_flag)</span><br><span class="line">    if login_flag:</span><br><span class="line">        newapptk = login.auth_uamtk(login_flag)</span><br><span class="line">        username = login.uamatuth_client(newapptk)</span><br><span class="line">        login.init_my_12306(username)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;main():login_flag为Flase&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>2.user.py<br>此处根据自己账户和名称写出id 和 psw 即可</p><p>id = ‘1111111’#账户名<br>psw = ‘222222’#密码</p><p>3.settings.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import requests</span><br><span class="line">#随机选择一个有效的UA来请求头信息</span><br><span class="line">User_Agent = [</span><br><span class="line">    &apos;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&apos;,</span><br><span class="line">    &apos;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11&apos;,</span><br><span class="line">    &apos;Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&apos;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line">headers = &#123;&apos;user-agent&apos;: random.choice(User_Agent)&#125;</span><br></pre></td></tr></table></figure><p>4.stations.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line">from login import Login</span><br><span class="line">import os</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">from collections import deque, OrderedDict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Station:</span><br><span class="line">    &quot;&quot;&quot; 查询车票信息 &quot;&quot;&quot;</span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 使用登录时候的session,这样好一些!</span><br><span class="line">        self.headers = Login().headers</span><br><span class="line">        self.session = Login().session</span><br><span class="line">        self.station_info = deque()</span><br><span class="line"></span><br><span class="line">    def station_name_code(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:获取每个站点的名字和对应的代码,并保存到本地</span><br><span class="line">        :return: 无</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        filename = &apos;station_name.txt&apos;</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/resources/js/framework/station_name.js&apos;</span><br><span class="line">        resp = self.session.get(url, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            print(&apos;station_name_code():获取站点信息成功!&apos;)</span><br><span class="line">            with open(filename, &apos;w&apos;) as f:</span><br><span class="line">                for each in resp.text.split(&apos;=&apos;)[1].split(&apos;@&apos;):</span><br><span class="line">                    if each != &quot;&apos;&quot;:</span><br><span class="line">                        f.write(each)</span><br><span class="line">                        f.write(&apos;\n&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;station_name_code() error! status_code:&#123;&#125;, url: &#123;&#125;&apos;</span><br><span class="line">                  .format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">    def save_station_code(self, filename):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:从站点文件中提取站点与其对应的代码,并保存到文件中</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        if not os.path.exists(filename):</span><br><span class="line">            print(&apos;save_station_code():&apos;, filename, &apos;不存在,正在下载!&apos;)</span><br><span class="line">            self.station_name_code()</span><br><span class="line"></span><br><span class="line">        file = &apos;name_code.json&apos;</span><br><span class="line">        name_code_dict = &#123;&#125;</span><br><span class="line">        with open(filename, &apos;r&apos;) as f:</span><br><span class="line">            for line in f:</span><br><span class="line">                # 对读取的行都进行split操作,然后提取站点名和其代码</span><br><span class="line">                name = line.split(&apos;|&apos;)[1] # 站点名字</span><br><span class="line">                code = line.split(&apos;|&apos;)[2] # 每个站点对应的代码</span><br><span class="line">                # 每个站点肯定都是唯一的</span><br><span class="line">                name_code_dict[name] = code</span><br><span class="line"></span><br><span class="line">        # 把name,code保存到本地文件中,方便以后使用</span><br><span class="line">        with open(file, &apos;w&apos;) as f:</span><br><span class="line">            # 不以ascii码编码的方式保存</span><br><span class="line">            json.dump(name_code_dict, f, ensure_ascii=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def query_ticket(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:查票操作</span><br><span class="line">        :return: 返回查询到的所有车次信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        data = self._query_prompt()</span><br><span class="line">        if not data:</span><br><span class="line">            print(&apos;query_ticket() error: &#123;&#125;&apos;.format(data))</span><br><span class="line">        _, from_station, to_station = data.keys()</span><br><span class="line">        train_date = data.get(&apos;train_date&apos;)</span><br><span class="line">        from_station_code = data.get(from_station)</span><br><span class="line">        to_station_code = data.get(to_station)</span><br><span class="line"></span><br><span class="line">        query_param = &apos;leftTicketDTO.train_date=&#123;&#125;&amp;&apos; \</span><br><span class="line">                      &apos;leftTicketDTO.from_station=&#123;&#125;&amp;&apos; \</span><br><span class="line">                      &apos;leftTicketDTO.to_station=&#123;&#125;&amp;&apos; \</span><br><span class="line">                      &apos;purpose_codes=ADULT&apos;\</span><br><span class="line">            .format(train_date, from_station_code, to_station_code)</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/leftTicket/query?&apos;</span><br><span class="line">        full_url = url + query_param</span><br><span class="line">        resp = self.session.get(full_url, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200 and resp.url == full_url:</span><br><span class="line">            print(&apos;query_ticket() 成功!然后进行车票清理工作!&apos;)</span><br><span class="line">            self._get_train_info(resp.json(), from_station, to_station)</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            print(&apos;query_ticket() error! status_code:&#123;&#125;, url:&#123;&#125;\norigin_url:&#123;&#125;&apos;</span><br><span class="line">                  .format(resp.status_code, resp.url, full_url))</span><br><span class="line"></span><br><span class="line">        return self.station_info, train_date, from_station_code, to_station_code</span><br><span class="line"></span><br><span class="line">    def _get_train_info(self, text, from_station, to_station):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:提取出查询到的列车信息</span><br><span class="line">        :param text: 包含所有从起点站到终点站的车次信息</span><br><span class="line">        :return: 返回所有车次信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not text:</span><br><span class="line">            print(&apos;_query_train_info() error: text为:&apos;, text)</span><br><span class="line">        # 把json文件转变成字典形式</span><br><span class="line">        result = dict(text)</span><br><span class="line">        # 判断有无车次的标志</span><br><span class="line">        if result.get(&apos;data&apos;).get(&apos;map&apos;):</span><br><span class="line">            train_info = result.get(&apos;data&apos;).get(&apos;result&apos;)</span><br><span class="line">            train_list = deque()</span><br><span class="line">            for item in train_info:</span><br><span class="line">                split_item = item.split(&apos;|&apos;)</span><br><span class="line">                item_dict = &#123;&#125;</span><br><span class="line">                # for index, item in enumerate(split_item,0):</span><br><span class="line">                #     print(&apos;&#123;&#125;:\t&#123;&#125;&apos;.format(index, item))</span><br><span class="line">                if split_item[11] == &apos;Y&apos;: # 已经开始卖票了</span><br><span class="line">                    item_dict[&apos;train_id&apos;] = split_item[0]</span><br><span class="line">                    item_dict[&apos;train_name&apos;] = split_item[3] # 车次名</span><br><span class="line">                    item_dict[&apos;depart_time&apos;] = split_item[8] # 出发时间</span><br><span class="line">                    item_dict[&apos;arrive_time&apos;] = split_item[9] # 到站时间</span><br><span class="line">                    item_dict[&apos;spend_time&apos;] = split_item[10] # 经历时长</span><br><span class="line">                    item_dict[&apos;wz&apos;] = split_item[29] # 无座</span><br><span class="line">                    item_dict[&apos;yz&apos;] = split_item[28] # 硬座</span><br><span class="line">                    item_dict[&apos;yw&apos;] = split_item[26] # 硬卧</span><br><span class="line">                    item_dict[&apos;rw&apos;] = split_item[23] # 软卧</span><br><span class="line">                    item_dict[&apos;td&apos;] = split_item[32] # 特等座</span><br><span class="line">                    item_dict[&apos;yd&apos;] = split_item[31] # 一等座</span><br><span class="line">                    item_dict[&apos;ed&apos;] = split_item[30] # 二等座</span><br><span class="line">                    item_dict[&apos;dw&apos;] = split_item[33] # 动卧</span><br><span class="line">                    train_list.append(item_dict)</span><br><span class="line">                    self.station_info.append(item_dict)</span><br><span class="line">                # 无法买票的车次,有可能是已卖光,也有可能是还不开卖</span><br><span class="line">                elif split_item[0] == &apos;&apos;:</span><br><span class="line">                    print(&apos;_query_train_info():车次&#123;&#125;的票暂时不能购买!&apos;</span><br><span class="line">                          .format(split_item[3]))</span><br><span class="line">                else:</span><br><span class="line">                    print(&apos;_query_train_info():车次&#123;&#125;还未开始卖票,起售时间为:&#123;&#125;&apos;</span><br><span class="line">                          .format(split_item[3], split_item[1]))</span><br><span class="line">            # 调用方法来打印列车结果</span><br><span class="line">            self._print_train(train_list, from_station, to_station)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;_get_train_info() error: 从&#123;&#125;站到&#123;&#125;站有没列车!&apos;</span><br><span class="line">                  .format(from_station, to_station))</span><br><span class="line"></span><br><span class="line">    def _print_train(self, train_info, from_station, to_station):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印查询到的车次信息</span><br><span class="line">        :param train_info: 提取出来的车次信息</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        if not train_info:</span><br><span class="line">            print(&apos;_print_train() error: train_info是None!&apos;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        print(&apos;从&#123;&#125;到&#123;&#125;还有余票的列车有:&apos;.format(from_station, to_station))</span><br><span class="line">        for item in train_info:</span><br><span class="line">            if &apos;G&apos; in item[&apos;train_name&apos;]: # 高铁</span><br><span class="line">                self._print_high_train_info(item)</span><br><span class="line">            elif &apos;D&apos; in item[&apos;train_name&apos;]: # 动车</span><br><span class="line">                self._print_dong_train_info(item)</span><br><span class="line">            else:</span><br><span class="line">                self._print_train_info(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def _print_high_train_info(self, item):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印高铁车次信息</span><br><span class="line">        :param item: 所有高铁车次</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t&apos;</span><br><span class="line">              &apos;经历时长:&#123;:4s&#125;\t特等座:&#123;:4s&#125;\t一等座:&#123;:4s&#125;\t二等座:&#123;:4s&#125;&apos;</span><br><span class="line">              .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;],item[&apos;arrive_time&apos;],</span><br><span class="line">                      item[&apos;spend_time&apos;],item[&apos;td&apos;], item[&apos;yd&apos;], item[&apos;ed&apos;]))</span><br><span class="line"></span><br><span class="line">    def _print_dong_train_info(self, item):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印动车的车票信息</span><br><span class="line">        :param item: 所有动车车次</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t&apos;</span><br><span class="line">              &apos;经历时长:&#123;:4s&#125;\t一等座:&#123;:4s&#125;\t二等座:&#123;:4s&#125;\t软卧:&#123;:4s&#125;\t动卧:&#123;:4s&#125;&apos;</span><br><span class="line">              .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;], item[&apos;arrive_time&apos;],</span><br><span class="line">                      item[&apos;spend_time&apos;],item[&apos;yd&apos;],item[&apos;ed&apos;], item[&apos;rw&apos;], item[&apos;dw&apos;]))</span><br><span class="line">    def _print_train_info(self,item):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印普通列出的车次信息</span><br><span class="line">        :param item: 所有普通车次</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t经历时长:&#123;:4s&#125;\t&apos;</span><br><span class="line">              &apos;软卧:&#123;:4s&#125;\t硬卧:&#123;:4s&#125;\t硬座:&#123;:4s&#125;\t无座:&#123;:4s&#125;&apos;</span><br><span class="line">              .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;], item[&apos;arrive_time&apos;],</span><br><span class="line">                      item[&apos;spend_time&apos;],item[&apos;rw&apos;], item[&apos;yw&apos;], item[&apos;yz&apos;], item[&apos;wz&apos;]))</span><br><span class="line">    def _query_prompt(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能: 与用户交互,让用户输入:出发日期,起始站和终点站并判断其正确性</span><br><span class="line">        :return: 返回正确的日期,起始站和终点站</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        time_flag, train_date = self._check_date()</span><br><span class="line">        if not time_flag:</span><br><span class="line">            print(&apos;_query_prompt() error:&apos;, &apos;乘车日期不合理,请检查!!&apos;)</span><br><span class="line">            return</span><br><span class="line">        # 创建有序字典,方便取值</span><br><span class="line">        query_data = OrderedDict()</span><br><span class="line">        from_station = input(&apos;请输入起始站:&apos;)</span><br><span class="line">        to_station = input(&apos;请输入终点站:&apos;)</span><br><span class="line"></span><br><span class="line">        station_flag = True</span><br><span class="line">        filename = &apos;name_code.json&apos;</span><br><span class="line">        with open(filename, &apos;r&apos;) as f:</span><br><span class="line">            data = dict(json.load(f))</span><br><span class="line">            stations = data.keys()</span><br><span class="line">            if from_station not in stations or to_station not in stations:</span><br><span class="line">                station_flag = False</span><br><span class="line">                print(&apos;query_prompt() error: &#123;&#125;或&#123;&#125;不在站点列表中!!&apos;</span><br><span class="line">                    .format(from_station, to_station))</span><br><span class="line">            # 获取起始站和终点站的代码</span><br><span class="line">            from_station_code = data.get(from_station)</span><br><span class="line">            to_station_code = data.get(to_station)</span><br><span class="line">        query_data[&apos;train_date&apos;] = train_date</span><br><span class="line">        query_data[from_station] = from_station_code</span><br><span class="line">        query_data[to_station] = to_station_code</span><br><span class="line"></span><br><span class="line">        if time_flag and  station_flag:</span><br><span class="line">            return query_data</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;query_prompt() error! time_flag:&#123;&#125;, station_flag:&#123;&#125;&apos;</span><br><span class="line">                  .format(time_flag, station_flag))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def _check_date(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:检测乘车日期的正确性</span><br><span class="line">        :return: 返回时间是否为标准的形式的标志</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        # 获取当前时间的时间戳</span><br><span class="line">        local_time = time.localtime()</span><br><span class="line">        local_date = &apos;&#123;&#125;-&#123;&#125;-&#123;&#125;&apos;.\</span><br><span class="line">            format(local_time.tm_year, local_time.tm_mon, local_time.tm_mday)</span><br><span class="line">        curr_time_array = time.strptime(local_date, &apos;%Y-%m-%d&apos;)</span><br><span class="line">        curr_time_stamp = time.mktime(curr_time_array)</span><br><span class="line">        # 获取当前时间</span><br><span class="line">        curr_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(curr_time_stamp))</span><br><span class="line"></span><br><span class="line">        # 计算出预售时长的时间戳</span><br><span class="line">        delta_time_stamp = &apos;2505600&apos;</span><br><span class="line">        # 算出预售票的截止日期时间戳</span><br><span class="line">        dead_time_stamp = int(curr_time_stamp) + int(delta_time_stamp)</span><br><span class="line">        dead_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(dead_time_stamp))</span><br><span class="line">        print(&apos;合理的乘车日期范围是:(&#123;&#125;)~(&#123;&#125;)&apos;.format(curr_time, dead_time))</span><br><span class="line"></span><br><span class="line">        train_date = input(&apos;请输入乘坐日期(year-month-day):&apos;)</span><br><span class="line">        # 把乘车日期转换成时间戳来比较</span><br><span class="line">        # 先生成一个时间数组</span><br><span class="line">        time_array = time.strptime(train_date, &apos;%Y-%m-%d&apos;)</span><br><span class="line">        # 把时间数组转化成时间戳</span><br><span class="line">        train_date_stamp = time.mktime(time_array)</span><br><span class="line">        # 获取标准的乘车日期</span><br><span class="line">        train_date_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(train_date_stamp))</span><br><span class="line">        # 做上面几步主要是把用户输入的时间格式转变成标准的格式</span><br><span class="line">        # 如用户输入:2018-2-22,那么形成的查票URL就不是正确的</span><br><span class="line">        # 只有是:    2018-02-22,组合的URL才是正确的!</span><br><span class="line">        # 通过时间戳来比较时间的正确性</span><br><span class="line">        if int(train_date_stamp) &gt;= int(curr_time_stamp) and \</span><br><span class="line">            int(train_date_stamp) &lt;= dead_time_stamp:</span><br><span class="line">            return True, train_date_time</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;_check_date() error: 乘车日期:&#123;&#125;, 当前系统时间:&#123;&#125;, 预售时长为:&#123;&#125;&apos;</span><br><span class="line">                  .format(train_date_time, curr_time, dead_time))</span><br><span class="line">            return False, None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    filename = &apos;station_name.txt&apos;</span><br><span class="line">    station = Station()</span><br><span class="line">    station.station_name_code()</span><br><span class="line">    station.save_station_code(filename)</span><br><span class="line">    station.query_ticket()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>5.coordinate.py(验证码坐标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def coor():</span><br><span class="line">    arr = [[],[&apos;45&apos;,&apos;45&apos;],[&apos;110&apos;,&apos;45&apos;],[&apos;175&apos;,&apos;45&apos;],[&apos;240&apos;,&apos;45&apos;],</span><br><span class="line">              [&apos;45&apos;,&apos;110&apos;],[&apos;110&apos;,&apos;110&apos;],[&apos;175&apos;,&apos;110&apos;],[&apos;240&apos;,&apos;110&apos;]]</span><br><span class="line">    cnt = input(&apos;请输入验证码坐标，以,隔开\n&apos;)</span><br><span class="line">    Str = []</span><br><span class="line">    for i in cnt:</span><br><span class="line">        if i == &apos;,&apos;:</span><br><span class="line">            continue</span><br><span class="line">        else:</span><br><span class="line">            Str = Str + arr[int(i)]</span><br><span class="line">    return &apos;,&apos;.join(Str)</span><br></pre></td></tr></table></figure><p>6.buy.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import chardet</span><br><span class="line">import urllib.parse</span><br><span class="line">import settings</span><br><span class="line">from login import Login</span><br><span class="line">from stations import Station</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line">import stations</span><br><span class="line"></span><br><span class="line">class Buy:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 使用登录时候的session,这样好一些!</span><br><span class="line">        self.headers = settings.headers</span><br><span class="line">        self.session = settings.session</span><br><span class="line">    def checkUser(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:验证登录</span><br><span class="line">        :return: 无</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/login/checkUser&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        result = resp.json()</span><br><span class="line">        checkUser_flag = result[&apos;status&apos;]</span><br><span class="line">        if checkUser_flag == True:</span><br><span class="line">            print(&apos;验证登录成功！&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def get_secretStr(self, station_info):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:返回高铁车次信息</span><br><span class="line">        :param item: 单车次信息</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        val = str(input(&apos;请输入订票的车次:&apos;))</span><br><span class="line">        for item in station_info:</span><br><span class="line">            if item[&apos;train_name&apos;] == val:</span><br><span class="line">                return item[&apos;train_id&apos;]</span><br><span class="line">    def submitOrderRequest(self, station_info):</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/leftTicket/submitOrderRequest&apos;</span><br><span class="line">        cnt = self.get_secretStr(station_info)</span><br><span class="line">        Str = urllib.parse.unquote(cnt)</span><br><span class="line">        # 获取当前时间的时间戳</span><br><span class="line">        local_time = time.localtime()</span><br><span class="line">        local_date = &apos;&#123;&#125;-&#123;&#125;-&#123;&#125;&apos;.\</span><br><span class="line">            format(local_time.tm_year, local_time.tm_mon, local_time.tm_mday)</span><br><span class="line">        curr_time_array = time.strptime(local_date, &apos;%Y-%m-%d&apos;)</span><br><span class="line">        curr_time_stamp = time.mktime(curr_time_array)</span><br><span class="line">        # 获取当前时间</span><br><span class="line">        curr_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(curr_time_stamp))</span><br><span class="line">        train_date = input(&apos;请再次确认乘坐日期(year-month-day):&apos;)</span><br><span class="line">        query_from_station_name = input(&apos;请再次输入起始站:&apos;)</span><br><span class="line">        query_to_station_name = input(&apos;请再次输入终点站:&apos;)</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;secretStr&apos;: Str,</span><br><span class="line">            &apos;train_date&apos;: train_date,</span><br><span class="line">            &apos;back_train_date&apos;: curr_time,</span><br><span class="line">            &apos;tour_flag&apos;: &apos;dc&apos;,</span><br><span class="line">            &apos;purpose_codes&apos;: &apos;ADULT&apos;,</span><br><span class="line">            &apos;query_from_station_name&apos;: query_from_station_name,</span><br><span class="line">            &apos;query_to_station_name&apos;: query_to_station_name,</span><br><span class="line">            &apos;undefined&apos;: &apos;&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            print(&apos;submitOrderRequest成功！&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;submitOrderRequest() error! status_code:&#123;&#125;, url:&#123;&#125;&apos;.</span><br><span class="line">                  format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">    def initDc(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:请求提交购票人信息和选择购票坐票或者卧铺类型页面</span><br><span class="line">        :return: 无</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/initDc&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        #设置网页编码</span><br><span class="line">        if chardet.detect(resp.content).get(&apos;encoding&apos;) != &apos;UTF-8&apos;:</span><br><span class="line">            resp.encoding = &apos;UTF-8&apos;</span><br><span class="line">        match = re.search(&quot;var globalRepeatSubmitToken = &apos;(.*?)&apos;;&quot;, resp.text)</span><br><span class="line">        ticketToken = match.group(1)</span><br><span class="line">        people_url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/getPassengerDTOs&apos;</span><br><span class="line">        people_resp = self.session.post(people_url, data=&#123;&quot;REPEAT_SUBMIT_TOKEN&quot;:ticketToken,&quot;_json_att&quot;:&quot;&quot;&#125;, headers=self.headers)</span><br><span class="line">        people_json = people_resp.json()</span><br><span class="line">        result = dict(people_json)</span><br><span class="line">        info = result[&apos;data&apos;][&apos;normal_passengers&apos;][1]</span><br><span class="line">        train_no = re.search(&quot;&apos;train_no&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        leftTicket = re.search(&quot;&apos;ypInfoDetail&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        purpose_codes = re.search(&quot;&apos;purpose_codes&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        station_train_code = re.search(&quot;&apos;station_train_code&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        to_station_telecode = re.search(&quot;&apos;to_station_telecode&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        train_location = re.search(&quot;&apos;train_location&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        key_check_isChange = re.search(&quot;&apos;key_check_isChange&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        return info, ticketToken, train_no, leftTicket, purpose_codes, station_train_code, to_station_telecode, train_location, key_check_isChange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def checkOrderInfo(self, info, ticketToken):</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/checkOrderInfo&apos;</span><br><span class="line">        passengerTicketStr = &apos;O,0,1,&apos; + info[&apos;passenger_name&apos;] + &apos;,1,&apos; + info[&apos;passenger_id_no&apos;] + &apos;,&apos; + info[&apos;mobile_no&apos;] + &apos;,N&apos;</span><br><span class="line">        oldPassengerStr = info[&apos;passenger_name&apos;] + &apos;,1,&apos; + info[&apos;passenger_id_no&apos;] + &apos;,1_&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">                   &apos;cancel_flag&apos;: &apos;2&apos;,</span><br><span class="line">                   &apos;bed_level_order_num&apos;: &apos;000000000000000000000000000000&apos;,</span><br><span class="line">                   &apos;passengerTicketStr&apos;: passengerTicketStr,</span><br><span class="line">                   &apos;oldPassengerStr&apos;: oldPassengerStr,#</span><br><span class="line">                   &apos;tour_flag&apos;: &apos;dc&apos;,</span><br><span class="line">                   &apos;randCode&apos;: &apos;&apos;,</span><br><span class="line">                   &apos;whatsSelect&apos;: &apos;1&apos;,</span><br><span class="line">                    &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">                    &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,#</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        result = dict(resp.json())</span><br><span class="line">        if result[&apos;data&apos;][&apos;submitStatus&apos;] == True:</span><br><span class="line">            print(&apos;checkOrderInfo成功！&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;checkOrderInfo失败！&apos;)</span><br><span class="line">        return passengerTicketStr, oldPassengerStr</span><br><span class="line">    def getQueueCount(self, trainDate, train_no, leftTicket, ticketToken, station_train_code, fromStationTelecode, to_station_telecode,</span><br><span class="line">                      purpose_codes, train_location, passengerTicketStr, oldPassengerStr, key_check_isChange):</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/getQueueCount&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;train_date&apos;: datetime.datetime.fromtimestamp(time.mktime(time.strptime(trainDate, &apos;%Y-%m-%d&apos;))).strftime(&apos;%a %b %d %Y %H:%M:%S GMT+0800&apos;),</span><br><span class="line">            &apos;train_no&apos;: train_no,</span><br><span class="line">            &apos;stationTrainCode&apos;: station_train_code,</span><br><span class="line">            &apos;seatType&apos;: &apos;O&apos;,</span><br><span class="line">            &apos;fromStationTelecode&apos;: fromStationTelecode,</span><br><span class="line">            &apos;toStationTelecode&apos;: to_station_telecode,</span><br><span class="line">            &apos;leftTicket&apos;: leftTicket,</span><br><span class="line">            &apos;purpose_codes&apos;: purpose_codes,</span><br><span class="line">            &apos;train_location&apos;: train_location,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        queueCountJson = resp.json()</span><br><span class="line">        if queueCountJson.get(&quot;status&quot;) == False or queueCountJson.get(&quot;httpstatus&quot;) != 200:</span><br><span class="line">            raise Exception(&quot;获取队列错误&quot;)</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/confirmSingleForQueue&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;passengerTicketStr&apos;: passengerTicketStr,</span><br><span class="line">            &apos;oldPassengerStr&apos;: oldPassengerStr,</span><br><span class="line">            &apos;randCode&apos;: &apos;&apos;,</span><br><span class="line">            &apos;purpose_codes&apos;: purpose_codes,</span><br><span class="line">            &apos;key_check_isChange&apos;: key_check_isChange,</span><br><span class="line">            &apos;leftTicketStr&apos;: leftTicket,</span><br><span class="line">            &apos;train_location&apos;: train_location,</span><br><span class="line">            &apos;choose_seats&apos;: &apos;&apos;,</span><br><span class="line">            &apos;seatDetailType&apos;: &apos;000&apos;,</span><br><span class="line">            &apos;whatsSelect&apos;: &apos;1&apos;,</span><br><span class="line">            &apos;roomType&apos;: &apos;00&apos;,</span><br><span class="line">            &apos;dwAll&apos;: &apos;N&apos;,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        singleForQueueReq = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        singleForQueueJson = singleForQueueReq.json()</span><br><span class="line">        print(singleForQueueJson)</span><br><span class="line"></span><br><span class="line">    def queryOrderWaitTime(self, ticketToken):</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/queryOrderWaitTime&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;random&apos;: time.time(),</span><br><span class="line">            &apos;tourFlag&apos;: &apos;dc&apos;,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        orderWaitJson = resp.json()</span><br><span class="line">        orderId = orderWaitJson.get(&quot;data&quot;).get(&quot;orderId&quot;)#此处有问题</span><br><span class="line">        print(orderWaitJson)</span><br><span class="line">        print(orderId)</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/resultOrderForDcQueue&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;orderSequence_no&apos;: orderId,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        dcQueueReq = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        dcQueueJson = dcQueueReq.json()</span><br><span class="line">        if dcQueueJson.get(&quot;status&quot;) and dcQueueJson.get(&quot;httpstatus&quot;) == 200 and dcQueueJson.get(</span><br><span class="line">                &quot;data&quot;) is not None and dcQueueJson.get(&quot;data&quot;).get(&quot;submitStatus&quot;):</span><br><span class="line">            print(&quot;订票成功&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(dcQueueJson)</span><br><span class="line">            print(&quot;订票失败&quot;)</span><br><span class="line"></span><br><span class="line">def start():</span><br><span class="line">    login = Login()</span><br><span class="line">    login.down_captcha()</span><br><span class="line">    check_flag = login.captcha_check()</span><br><span class="line">    login_flag = login.login(check_flag)</span><br><span class="line">    if login_flag:</span><br><span class="line">        newapptk = login.auth_uamtk(login_flag)</span><br><span class="line">        username = login.uamatuth_client(newapptk)</span><br><span class="line">        login.init_my_12306(username)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;main():login_flag为Flase&apos;)</span><br><span class="line"></span><br><span class="line">def query():</span><br><span class="line">    filename = &apos;station_name.txt&apos;</span><br><span class="line">    station = Station()</span><br><span class="line">    station.station_name_code()</span><br><span class="line">    station.save_station_code(filename)</span><br><span class="line">    station_info, train_date, from_station_code, to_station_code = station.query_ticket()</span><br><span class="line">    return station_info, train_date, from_station_code, to_station_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def shop(station_info, trainDate, fromStationTelecode, to_station_telecode):</span><br><span class="line">    buy = Buy()</span><br><span class="line">    buy.checkUser()</span><br><span class="line">    buy.submitOrderRequest(station_info)</span><br><span class="line">    info, ticketToken, train_no, leftTicket, purpose_codes, station_train_code, to_station_telecode, train_location, key_check_isChange = buy.initDc()</span><br><span class="line">    passengerTicketStr, oldPassengerStr = buy.checkOrderInfo(info, ticketToken)</span><br><span class="line">    buy.getQueueCount(trainDate, train_no, leftTicket, ticketToken, station_train_code, fromStationTelecode, to_station_telecode,</span><br><span class="line">                      purpose_codes, train_location, passengerTicketStr, oldPassengerStr, key_check_isChange)</span><br><span class="line">    buy.queryOrderWaitTime(ticketToken)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    start()</span><br><span class="line">    station_info, train_date, from_station_code, to_station_code = query()</span><br><span class="line">    shop(station_info, train_date, from_station_code, to_station_code)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初学爬虫</title>
      <link href="/2018/04/16/%E5%88%9D%E5%AD%A6%E7%88%AC%E8%99%AB/"/>
      <url>/2018/04/16/%E5%88%9D%E5%AD%A6%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<p>今天作为例子的网站：<a href="http://www.xiaohua100.cn/daxue/" target="_blank" rel="noopener">http://www.xiaohua100.cn/daxue/</a><br>啊哈，这个也是无意间找的网站，不是故意找的（大雾）（作为例子来说还是挺好的例子…<br>个人理解的爬虫分为以下几步：<br>1.<strong>获取网站url</strong><br>2.<strong>搞清楚是get请求还是post请求</strong><br>3.<strong>request或者session访问后，注意编码格式</strong><br>4.<strong>正则表达式或者用匹配出信息</strong><br>5.<strong>是否要从访问之后的返回信息得出data以及下个网站url</strong></p><a id="more"></a><p><tr></tr></p><p><tr></tr></p><p><tr></tr><br>那么今天的例子：<br>1.首先我们很清楚url = ‘<a href="http://www.xiaohua100.cn/daxue/&#39;" target="_blank" rel="noopener">http://www.xiaohua100.cn/daxue/&#39;</a><br>2.这个网站由get请求访问<br>3.我们今天的目的是寻找这些图片并进行下载，那么我们要做的是找到图片的url<br>4.然后通过正则表达式储存这些url到一个列表里面<br>5.通过requests.content 二进制下载这些图片即可</p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">url = &apos;http://www.xiaohua100.cn/daxue/&apos;</span><br><span class="line">response = requests.get(url)</span><br><span class="line">response.encoding = &apos;utf-8&apos;</span><br><span class="line">html = response.text</span><br><span class="line"></span><br><span class="line">main_url = &apos;http://www.xiaohua100.cn&apos;</span><br><span class="line">img_urls = re.findall(r&apos;/uploads/allimg/\d+/\d-\w+-\w+.jpg&apos;, html)</span><br><span class="line">for i in range(len(img_urls)):</span><br><span class="line">    img_urls[i] = main_url + img_urls[i]</span><br><span class="line"></span><br><span class="line">index = 0</span><br><span class="line">for img_url in img_urls:</span><br><span class="line">    img_data = requests.get(img_url).content</span><br><span class="line">    filename = str(index) + &apos;.jpg&apos;</span><br><span class="line">    with open(filename, &apos;wb&apos;) as f:</span><br><span class="line">        f.write(img_data)</span><br><span class="line">    print(img_url)</span><br><span class="line">    index += 1</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>爬UbuntuPaste代码</title>
      <link href="/2018/04/16/%E7%88%ACUbuntuPaste%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/04/16/%E7%88%ACUbuntuPaste%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>直接贴代码啦。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import urllib.request</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">class UbtSpider:</span><br><span class="line">    def __init__(self) :</span><br><span class="line">        self.pageIndex = 25317600</span><br><span class="line">        self.user_agent = &apos;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&apos;</span><br><span class="line">    def getPage(self,pageIndex):</span><br><span class="line">        url = &apos;http://paste.ubuntu.com/&apos; + str(pageIndex)</span><br><span class="line">        headers = &#123;&apos;User-Agent&apos;: self.user_agent, &apos;Referer&apos;: url&#125;</span><br><span class="line">        request = urllib.request.Request(url, headers=headers)</span><br><span class="line">        with urllib.request.urlopen(request) as response:</span><br><span class="line">            html = response.read()</span><br><span class="line">            content = html.decode(&apos;utf-8&apos;)</span><br><span class="line">            patten = re.compile(&apos;&lt;div class=&quot;paste&quot;&gt;&lt;pre&gt;(.*?)&lt;/pre&gt;&lt;/div&gt;&apos;, re.S)  # re.S  (.*?）表示分组</span><br><span class="line">            items = patten.findall(content)</span><br><span class="line"></span><br><span class="line">            for item in items:</span><br><span class="line">                #替换</span><br><span class="line">                item = item.replace(&apos;&amp;nbsp;&apos;, &apos; &apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;gt;&apos;, &apos;&gt;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;lt;&apos;, &apos;&lt;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;quot;&apos;, &apos;&quot;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;amp;&apos;, &apos;&amp;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;#39;&apos;, &apos;\&apos;&apos;)</span><br><span class="line">                item = re.sub(&apos;&lt;span.*?&gt;&apos;,&apos;&apos;,item)</span><br><span class="line">                item = re.sub(&apos;&lt;/span&gt;&apos;, &apos;&apos;, item)</span><br><span class="line">                # print(item)</span><br><span class="line">                patten2 = re.compile(&quot;.*include&quot;, re.S)</span><br><span class="line">                if (patten2.match(item)):</span><br><span class="line">                    fileName = str(pageIndex) + &apos;.txt&apos;</span><br><span class="line">                    print( u&quot;正在写入: &gt;&gt;&gt; &quot; + str(pageIndex))</span><br><span class="line">                    isSuccess = True</span><br><span class="line">                    with open(fileName,&apos;w&apos;) as f:</span><br><span class="line">                        try:</span><br><span class="line">                            f.write(item)</span><br><span class="line">                        except UnicodeError as e:</span><br><span class="line">                            if hasattr(e,&quot;reason&quot;):</span><br><span class="line">                                print (str(pageIndex)+u&quot; 写入失败,原因: &quot; + e.reason)</span><br><span class="line">                                isSuccess = False</span><br><span class="line">                            f.close()</span><br><span class="line">                            try:os.remove(fileName)</span><br><span class="line">                            except Exception as ose:</span><br><span class="line">                                print(str(pageIndex)+u&quot; 删除失败&quot; )</span><br><span class="line">                        if isSuccess:</span><br><span class="line">                            print(str(pageIndex) + u&quot; 写入成功!&quot; )</span><br><span class="line">                            f.close()</span><br><span class="line">    def start(self):</span><br><span class="line">        start = 25545700</span><br><span class="line">        end = 25545692</span><br><span class="line">        start = input(&quot;请输入起始页码: &quot;)</span><br><span class="line">        end = input(&quot;请输入结束页码: &quot;)</span><br><span class="line">        print(u&quot;开始爬取 UbuntuPaste 代码 ........&quot;)</span><br><span class="line">        for pageIndex in range(int(start),int(end)): # 起始范围</span><br><span class="line">            self.getPage(pageIndex)</span><br><span class="line"></span><br><span class="line">spider = UbtSpider()</span><br><span class="line">spider.start()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
