<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[实习笔记6]]></title>
    <url>%2F2019%2F07%2F15%2F%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AE%B06%2F</url>
    <content type="text"><![CDATA[1. 连接服务器证书连接服务器 2. gojsonq 一个用来查询JSON数据的简单Go包https://php.ctolib.com/thedevsaddam-gojsonq.html 3. golang 调用lua 插件https://github.com/yuin/gopher-lua 4. golang exec 5. 常见lua 报错https://blog.csdn.net/yuanfengyun/article/details/78001988 6. golang 解析 json]]></content>
      <categories>
        <category>实习</category>
      </categories>
      <tags>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea-maven工程配置]]></title>
    <url>%2F2018%2F08%2F04%2Fidea-maven%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[解决idea创建maven工程后无java,resouces文件问题 Project Structure Modules-Sources New Folder 解决创建properties文件问题 解决idea application context not configured for this file问题spring配置文件中时常会出现这个提示，翻译过来大概意思就是没有配置该文件到项目中 于是进入到file-Project Structure中查看 可以很明显的看到下面有个感叹号，大概意思是下面的文件没有匹配 知道原因就很好解决问题了，只需要加到项目中去就可以了 解决idea无法创建jsp文件问题File-&gt;Project Struction -&gt;modules 按加号 新增web,双击web resource directory 修改路径 web resource directory path 为 当前项目目录/src/webapp -&gt;WEB-INF-&gt;JSP]]></content>
      <categories>
        <category>idea</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[property文件创建]]></title>
    <url>%2F2018%2F07%2F27%2Fproperty%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[new-&gt;other-&gt;file-&gt;名字即可]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse-Maven-创建SSM项目]]></title>
    <url>%2F2018%2F07%2F19%2FEclipse-Maven-%E5%88%9B%E5%BB%BASSM%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[1.创建Maven web 项目File-&gt;New-&gt;Other-&gt;Maven-&gt;Maven Project 2.maven-archetype-webapp选择 maven-archetype-webapp 3.设置GroupId和Artifact Id 4.创建java 源代码目录在上一步的截图中可以发现，没有地方存放java源文件，这个时候就需要按照如下步骤做：右键项目-&gt;属性-&gt;Java Build Path-&gt;Libraries-&gt;Edit-&gt;Workspace defaultJRE-&gt;Finish 5.pom.xml接着复制粘贴pom.xml为下面的代码。 粘贴之后，jsp本来的报错就消失了，不过出来一个新的问题，要求通过Maven更新项目。 右键项目-&gt;Maven-&gt;Update Project，会弹出一个对话框，点击Ok，这个问题就消失了。 &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.how2java&lt;/groupId&gt; &lt;artifactId&gt;ssm&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;properties&gt; &lt;spring.version&gt;4.1.3.RELEASE&lt;/spring.version&gt; &lt;pagehelper.version&gt;5.1.2-beta&lt;/pagehelper.version&gt; &lt;mysql.version&gt;5.1.6&lt;/mysql.version&gt; &lt;mybatis.spring.version&gt;1.2.3&lt;/mybatis.spring.version&gt; &lt;mybatis.version&gt;3.1.1&lt;/mybatis.version&gt; &lt;junit.version&gt;4.12&lt;/junit.version&gt; &lt;jstl.version&gt;1.2&lt;/jstl.version&gt; &lt;jsqlparser.version&gt;1.0&lt;/jsqlparser.version&gt; &lt;jackson.version&gt;1.2.7&lt;/jackson.version&gt; &lt;servlet-api.version&gt;3.1.0&lt;/servlet-api.version&gt; &lt;druid.version&gt;1.0.18&lt;/druid.version&gt; &lt;log4j.version&gt;1.2.16&lt;/log4j.version&gt; &lt;commons-logging.version&gt;1.2&lt;/commons-logging.version&gt; &lt;commons-fileupload.version&gt;1.2.1&lt;/commons-fileupload.version&gt; &lt;commons-io.version&gt;1.3.2&lt;/commons-io.version&gt; &lt;commons-lang.version&gt;2.6&lt;/commons-lang.version&gt; &lt;aopalliance.version&gt;1.0&lt;/aopalliance.version&gt; &lt;mybatis-generator.version&gt;1.3.5&lt;/mybatis-generator.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;${junit.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;${mybatis.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;${mybatis.spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;${mysql.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;${druid.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!-- JSP相关 --&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;${jstl.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;${servlet-api.version}&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- pageHelper --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;${pagehelper.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--jsqlparser--&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt; &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt; &lt;version&gt;${jsqlparser.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;${log4j.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;version&gt;${commons-logging.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;${commons-fileupload.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;${commons-io.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-lang&lt;/groupId&gt; &lt;artifactId&gt;commons-lang&lt;/artifactId&gt; &lt;version&gt;${commons-lang.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;aopalliance&lt;/groupId&gt; &lt;artifactId&gt;aopalliance&lt;/artifactId&gt; &lt;version&gt;${aopalliance.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;${mybatis-generator.version}&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt; &lt;plugins&gt; &lt;!-- 资源文件拷贝插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;2.7&lt;/version&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- java编译插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.2&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;pluginManagement&gt; &lt;plugins&gt; &lt;!-- 配置Tomcat插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;include&gt;**/*.tld&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/build&gt; &lt;/project&gt; 6.web.xml(这里我因为两个项目名重复，把新创建的项目改成了ssm2) 首先覆盖web.xml把下载下来的xxx/ssm/WebContent/WEB-INF/web.xml复制到当前的 ssm/src/main/webapp/web.xml这里 7.jsp接着复制jsp目录 8.配置文件把三个配置文件复制到 ssm/src/main/resources下面 9.java源代码把java源代码复制到src/main/java下 10.关于Category.xml按照maven ssm项目风格来说，这个文件本应该放在Resource目录的mapper文件夹下，但是这么做还要修改配置信息，为了避免问题复杂化，而且考虑到即使放在当前位置也是可以正常工作的，所以就暂时不修改它的位置了。 11.测试http://localhost:8080/ssm/listCategory 由于我数据库中的数据被我删完了所以]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse-Maven-Web 创建]]></title>
    <url>%2F2018%2F07%2F18%2FEclipse-Maven-Web-%E5%88%9B%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[1.新建Maven项目 2.请把Artifact ld 换成webapp版本 3.补充名称 4.此时得到的maven web 项目的问题此时能得到的maven web 项目，不过有两个问题 1. 没有java源代码目录 2. index.jsp报错 5.创建java 源代码目录在上一步的截图中可以发现，没有地方存放java源文件，这个时候就需要按照如下步骤做：右键项目-&gt;属性-&gt;Java Build Path-&gt;Libraries-&gt;Edit-&gt;Workspace defaultJRE-&gt;Finish 6.通过 pom.xml添加servlet jar 包 add之后 若此时仓库中一个包都没有，那么需要在远程下载包到仓库中 具体做法：Windows-&gt;Preferences-&gt;Maven 重启eclipse 7.最后如果pom.xml报错估计是你的本地仓库里的包没有下完全 右键项目-&gt;Maven-&gt;Update Project 8.效果]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Eclipse Maven 创建]]></title>
    <url>%2F2018%2F07%2F18%2FEclipse-Maven-%E5%88%9B%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[1.新建Maven 项目菜单-&gt;File-&gt;New-&gt;Other-&gt;Maven-&gt;Maven Project 2.这个界面使用默认的选项，点下一步 3.填写信息Group Id： 填写包名Artifact Id: 填写j2se然后点击Finish 4.运行App]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM-restful风格]]></title>
    <url>%2F2018%2F07%2F18%2FSSM-restful%E9%A3%8E%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[1.Restful简介大家在做Web开发的过程中，method常用的值是get和post. 可事实上，method值还可以是put和delete等等其他值。既然method值如此丰富，那么就可以考虑使用同一个url，但是约定不同的method来实施不同的业务，这就是Restful的基本考虑。CRUD是最常见的操作，在使用Restful 风格之前，通常的增加做法是这样的： /addCategory?name=xxx 可是使用了Restful风格之后，增加就变成了： /category CRUD如下表所示，URL就都使用一样的 “/category”，区别只是在于method不同，服务器根据method的不同来判断浏览器期望做的业务行为 2.效果地址：http://127.0.0.1:8080/ssm/category 3.web.xmlSpringMVC 只能处理post和get,为了还原对put和delete的处理，web.xml里面要加如下过滤器 &lt;filter&gt; &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt; &lt;!-- spring的配置文件--&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;filter&gt; &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;filter&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!-- spring mvc核心：分发servlet --&gt; &lt;servlet&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- spring mvc的配置文件 --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;/web-app&gt; 4.listCategory.jsplistCategory.jsp 做了如下修改 增加1.1 action修改为”category”1.2 增加如下filed, 虽然这个form的method是post, 但是springmvc看到这个_method的值是put后，会把其修改为put. &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt; 删除2.1 url修改为category/id2.2 点击超链后，会使用form提交，并且提交_method的值为delete,以达到和增加类似的效果 $(function(){ $(&quot;.delete&quot;).click(function(){ var href=$(this).attr(&quot;href&quot;); $(&quot;#formdelete&quot;).attr(&quot;action&quot;,href).submit(); return false; }) }) 获取3.1 url修改为了/category/id 在最开始增加了jquery.min.js的引入 &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt; &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; /*将post method 改变为delete*/ $(function(){ $(&quot;.delete&quot;).click(function(){ var href=$(this).attr(&quot;href&quot;); $(&quot;#formdelete&quot;).attr(&quot;action&quot;,href).submit(); return false; }) }) &lt;/script&gt; &lt;div style=&quot;width:500px;margin:0px auto;text-align:center&quot;&gt; &lt;table align=&apos;center&apos; border=&apos;1&apos; cellspacing=&apos;0&apos;&gt; &lt;tr&gt; &lt;td&gt;id&lt;/td&gt; &lt;td&gt;name&lt;/td&gt; &lt;td&gt;编辑&lt;/td&gt; &lt;td&gt;删除&lt;/td&gt; &lt;/tr&gt; &lt;c:forEach items=&quot;${cs}&quot; var=&quot;c&quot; varStatus=&quot;st&quot;&gt; &lt;tr&gt; &lt;td&gt;${c.id}&lt;/td&gt; &lt;td&gt;${c.name}&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;category/${c.id}&quot;&gt;编辑&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a class=&quot;delete&quot; href=&quot;category/${c.id}&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/table&gt; &lt;div style=&quot;text-align:center&quot;&gt; &lt;a href=&quot;?start=0&quot;&gt;首 页&lt;/a&gt; &lt;a href=&quot;?start=${page.start-page.count}&quot;&gt;上一页&lt;/a&gt; &lt;a href=&quot;?start=${page.start+page.count}&quot;&gt;下一页&lt;/a&gt; &lt;a href=&quot;?start=${page.last}&quot;&gt;末 页&lt;/a&gt; &lt;/div&gt; &lt;div style=&quot;text-align:center;margin-top:40px&quot;&gt; &lt;form method=&quot;post&quot; action=&quot;category&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt; 分类名称： &lt;input name=&quot;name&quot; value=&quot;&quot; type=&quot;text&quot;&gt; &lt;br&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;增加分类&quot;&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;form id=&quot;formdelete&quot; action=&quot;&quot; method=&quot;POST&quot; &gt; &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt; &lt;/form&gt; 5.editCategory.jspaction修改为了 category/id &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt; &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;div style=&quot;width:500px;margin:0px auto;text-align:center&quot;&gt; &lt;div style=&quot;text-align:center;margin-top:40px&quot;&gt; &lt;form method=&quot;post&quot; action=&quot;../category/${c.id}&quot;&gt; 分类名称： &lt;input name=&quot;name&quot; value=&quot;${c.name}&quot; type=&quot;text&quot;&gt; &lt;br&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;修改分类&quot;&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; 6.CategoryControllerCRUD的RequestMapping都修改为了/category,只是method各不相同。其他的没变化 package com.how2java.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.servlet.ModelAndView; import com.how2java.pojo.Category; import com.how2java.service.CategoryService; import com.how2java.util.Page; // 告诉spring mvc这是一个控制器类 @Controller @RequestMapping(&quot;&quot;) public class CategoryController { @Autowired CategoryService categoryService; @RequestMapping(value=&quot;/category&quot;,method=RequestMethod.GET) public ModelAndView listCategory(Page page){ ModelAndView mav = new ModelAndView(); List&lt;Category&gt; cs= categoryService.list(page); int total = categoryService.total(); page.caculateLast(total); // 放入转发参数 mav.addObject(&quot;cs&quot;, cs); // 放入jsp路径 mav.setViewName(&quot;listCategory&quot;); return mav; } @RequestMapping(value=&quot;/category&quot;,method=RequestMethod.PUT) public ModelAndView addCategory(Category category){ System.out.println(&quot;category.getName():&quot;+category.getName()); categoryService.add(category); ModelAndView mav = new ModelAndView(&quot;redirect:/category&quot;); return mav; } @RequestMapping(value=&quot;/category/{id}&quot;,method=RequestMethod.DELETE) public ModelAndView deleteCategory(Category category){ categoryService.delete(category); ModelAndView mav = new ModelAndView(&quot;redirect:/category&quot;); return mav; } @RequestMapping(value=&quot;/category/{id}&quot;,method=RequestMethod.GET) public ModelAndView editCategory(Category category){ Category c= categoryService.get(category.getId()); ModelAndView mav = new ModelAndView(&quot;editCategory&quot;); mav.addObject(&quot;c&quot;, c); return mav; } @RequestMapping(value=&quot;/category/{id}&quot;,method=RequestMethod.POST) public ModelAndView updateCategory(Category category){ categoryService.update(category); ModelAndView mav = new ModelAndView(&quot;redirect:/category&quot;); return mav; } }]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM-json]]></title>
    <url>%2F2018%2F07%2F18%2FSSM-json%2F</url>
    <content type="text"><![CDATA[1.jqeury.min.js 2.json中文问题虽然在spring mvc 中文问题里已经提供了过滤器进行ssm的中文处理，但是json处理还要加点额外的内容。把原本的 &lt;mvc:annotation-driven /&gt; 修改为如下： &lt;mvc:annotation-driven &gt; &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt; &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt; &lt;property name=&quot;supportedMediaTypes&quot; value=&quot;text/plain;charset=UTF-8&quot; /&gt; &lt;/bean&gt; &lt;/mvc:message-converters&gt; &lt;/mvc:annotation-driven&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt; &lt;context:annotation-config/&gt; &lt;context:component-scan base-package=&quot;com.how2java.controller&quot;&gt; &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt; &lt;/context:component-scan&gt; &lt;mvc:annotation-driven &gt; &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt; &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt; &lt;property name=&quot;supportedMediaTypes&quot; value=&quot;text/plain;charset=UTF-8&quot; /&gt; &lt;/bean&gt; &lt;/mvc:message-converters&gt; &lt;/mvc:annotation-driven&gt; &lt;mvc:default-servlet-handler /&gt; &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt; &lt;/bean&gt; &lt;/beans&gt; 3.CategoryController控制器里提供3个方法，分别用来处理json 提交，json获取单个对象，json获取多个对象 package com.how2java.controller; import java.util.ArrayList; import java.util.List; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseBody; import com.alibaba.fastjson.JSONObject; import com.how2java.pojo.Category; // 告诉spring mvc这是一个控制器类 @Controller @RequestMapping(&quot;&quot;) public class CategoryController { @ResponseBody @RequestMapping(&quot;/submitCategory&quot;) public String submitCategory(@RequestBody Category category) { System.out.println(&quot;SSM接受到浏览器提交的json，并转换为Category对象:&quot;+category); return &quot;ok&quot;; } @ResponseBody @RequestMapping(&quot;/getOneCategory&quot;) public String getOneCategory() { Category c = new Category(); c.setId(100); c.setName(&quot;第100个分类&quot;); JSONObject json= new JSONObject(); json.put(&quot;category&quot;, JSONObject.toJSON(c)); return json.toJSONString(); } @ResponseBody @RequestMapping(&quot;/getManyCategory&quot;) public String getManyCategory() { List&lt;Category&gt; cs = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 10; i++) { Category c = new Category(); c.setId(i); c.setName(&quot;分类名称:&quot;+i); cs.add(c); } return JSONObject.toJSON(cs).toString(); } } 4.submit.html提交成功后，在tomcat控制台查看使用json方式提交的数据 注： 不要在eclipse自带的浏览器里面点击，自带的浏览器有bug，有时候不能识别jquery, 会导致点击没有反应。 使用独立的浏览器，比如chrome,firefox点击测试 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;用AJAX以JSON方式提交数据&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;form &gt; id：&lt;input type=&quot;text&quot; id=&quot;id&quot; value=&quot;123&quot; /&gt;&lt;br/&gt; 名称：&lt;input type=&quot;text&quot; id=&quot;name&quot; value=&quot;category xxx&quot;/&gt;&lt;br/&gt; &lt;input type=&quot;button&quot; value=&quot;提交&quot; id=&quot;sender&quot;&gt; &lt;/form&gt; &lt;div id=&quot;messageDiv&quot;&gt;&lt;/div&gt; &lt;script&gt; $(&apos;#sender&apos;).click(function(){ var id=document.getElementById(&apos;id&apos;).value; var name=document.getElementById(&apos;name&apos;).value; var category={&quot;name&quot;:name,&quot;id&quot;:id}; var jsonData = JSON.stringify(category); var page=&quot;submitCategory&quot;; $.ajax({ type:&quot;post&quot;, url: page, data:jsonData, dataType:&quot;json&quot;, contentType : &quot;application/json;charset=UTF-8&quot;, success: function(result){ } }); alert(&quot;提交成功，请在Tomcat控制台查看服务端接收到的数据&quot;); }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 5.getOne.html点击按钮，获取json数据 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;用AJAX以JSON方式获取数据&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;通过AJAX获取一个Hero对象---&quot; id=&quot;sender&quot;&gt; &lt;div id=&quot;messageDiv&quot;&gt;&lt;/div&gt; &lt;script&gt; $(&apos;#sender&apos;).click(function(){ var url=&quot;getOneCategory&quot;; $.post( url, function(data) { var json=JSON.parse(data); var name =json.category.name; var id = json.category.id; $(&quot;#messageDiv&quot;).html(&quot;分类id：&quot;+ id + &quot;&lt;br&gt;分类名称:&quot; +name ); }); }); &lt;/script&gt; &lt;/body&gt; &lt;/body&gt; &lt;/html&gt; 6.getMany.html点击按钮，获取多个json数据 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;用AJAX以JSON方式获取数据&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;通过AJAX获取多个Hero对象111&quot; id=&quot;sender&quot;&gt; &lt;div id=&quot;messageDiv&quot;&gt;&lt;/div&gt; &lt;script&gt; $(&apos;#sender&apos;).click(function(){ var url=&quot;getManyCategory&quot;; $.post( url, function(data) { console.log(data); var categorys = $.parseJSON(data); console.log(categorys.length); for(i in categorys){ var old = $(&quot;#messageDiv&quot;).html(); var category = categorys[i]; $(&quot;#messageDiv&quot;).html(old + &quot;&lt;br&gt;&quot;+category.id+&quot; ----- &quot;+category.name); } }); }); &lt;/script&gt; &lt;/body&gt; &lt;/body&gt; &lt;/html&gt;]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM-事务管理]]></title>
    <url>%2F2018%2F07%2F18%2FSSM-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[1.MYSQL 表的类型必须是INNODB才支持事务在Mysql中，只有当表的类型是INNODB的时候，才支持事务，所以需要把表的类型设置为INNODB,否则无法观察到事务. 修改表的类型为INNODB的SQL： alter table category_ ENGINE = innodb; 查看表的类型的SQL show table status from how2java; 2.jar包aspectjweaver.jar 3.CategoryServicepackage com.how2java.service; import java.util.List; import com.how2java.pojo.Category; public interface CategoryService { List&lt;Category&gt; list(); void add(Category c); void update(Category c); void delete(Category c); void deleteAll(); Category get(int id); void addTwo(); } 4.CategoryServiceImpl在CategoryServiceImpl中实现deleteAll和addTwo方法。分别做如下事情： 删除所有Category 增加2个Category对象，第一个可以正常增加，第二个因为名字太长，加入会失败。 package com.how2java.service.impl; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; import com.how2java.service.CategoryService; @Service public class CategoryServiceImpl implements CategoryService{ @Autowired CategoryMapper categoryMapper; public List&lt;Category&gt; list(){ return categoryMapper.list(); } @Override public void add(Category c) { // TODO Auto-generated method stub categoryMapper.add(c); } @Override public void update(Category c) { // TODO Auto-generated method stub categoryMapper.update(c); } @Override public void delete(Category c) { // TODO Auto-generated method stub categoryMapper.delete(c); } @Override public Category get(int id) { return categoryMapper.get(id); } @Override public void addTwo() { // TODO Auto-generated method stub Category c1 = new Category(); c1.setName(&quot;短的名字&quot;); categoryMapper.add(c1); Category c2 = new Category(); c2.setName(&quot;名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,&quot;); categoryMapper.add(c2); } @Override public void deleteAll() { // TODO Auto-generated method stub List&lt;Category&gt; cs = list(); for (Category c : cs) { categoryMapper.delete(c); } } } 5.MybatisTest修改测试类MybatisTest ：注入CategoryService 对象，并调用deleteAll和addTwo方法，运行后在数据库中发现只有只有一条数据插入成功了，说明addTwo方法不是事务管理的。 如果是事务管理的，那么就应该都成功，或者都失败。 package com.how2java.test; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import com.how2java.service.CategoryService; @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(&quot;classpath:applicationContext.xml&quot;) public class MybatisTest { @Autowired private CategoryService categoryService; @Test public void testAddTwo() { categoryService.deleteAll(); categoryService.addTwo(); } } 6.为addTwo方法加上事务注解@Transactional(propagation=Propagation.REQUIRED,rollbackForClassName=&quot;Exception&quot;) package com.how2java.service.impl; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; import com.how2java.service.CategoryService; @Service public class CategoryServiceImpl implements CategoryService{ @Autowired CategoryMapper categoryMapper; public List&lt;Category&gt; list(){ return categoryMapper.list(); } @Override public void add(Category c) { // TODO Auto-generated method stub categoryMapper.add(c); } @Override public void update(Category c) { // TODO Auto-generated method stub categoryMapper.update(c); } @Override public void delete(Category c) { // TODO Auto-generated method stub categoryMapper.delete(c); } @Override public Category get(int id) { return categoryMapper.get(id); } @Override @Transactional(propagation=Propagation.REQUIRED,rollbackForClassName=&quot;Exception&quot;) public void addTwo() { // TODO Auto-generated method stub Category c1 = new Category(); c1.setName(&quot;短的名字&quot;); categoryMapper.add(c1); Category c2 = new Category(); c2.setName(&quot;名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,&quot;); categoryMapper.add(c2); } @Override public void deleteAll() { // TODO Auto-generated method stub List&lt;Category&gt; cs = list(); for (Category c : cs) { categoryMapper.delete(c); } } } 7.applicationContext.xml修改applicationContext，添加事务管理器和事务注解扫描器以及支持AOP方式 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;context:annotation-config /&gt; &lt;context:component-scan base-package=&quot;com.how2java.service&quot; /&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt; &lt;!-- 基本属性 url、user、password --&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot; /&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt; &lt;!-- 配置初始化大小、最小、最大 --&gt; &lt;property name=&quot;initialSize&quot; value=&quot;3&quot; /&gt; &lt;property name=&quot;minIdle&quot; value=&quot;3&quot; /&gt; &lt;property name=&quot;maxActive&quot; value=&quot;20&quot; /&gt; &lt;!-- 配置获取连接等待超时的时间 --&gt; &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; /&gt; &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt; &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; /&gt; &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt; &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; /&gt; &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT 1&quot; /&gt; &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; /&gt; &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; /&gt; &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt; &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot; /&gt; &lt;/bean&gt; &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.how2java.pojo&quot; /&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/how2java/mapper/*.xml&quot;/&gt; &lt;/bean&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.how2java.mapper&quot;/&gt; &lt;/bean&gt; &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt; &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt; &lt;/bean&gt; &lt;aop:config&gt; &lt;aop:pointcut id=&quot;serviceMethod&quot; expression=&quot;execution(* com.how2java.service.*.*(..))&quot;/&gt; &lt;aop:advisor pointcut-ref=&quot;serviceMethod&quot; advice-ref=&quot;txadvice&quot;/&gt; &lt;/aop:config&gt; &lt;/beans&gt;]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM-CRUD]]></title>
    <url>%2F2018%2F07%2F18%2FSSM-CRUD%2F</url>
    <content type="text"><![CDATA[1.添加log4j.properties用来记录日志 # Global logging configuration log4j.rootLogger=ERROR, stdout # MyBatis logging configuration... log4j.logger.com.how2java=TRACE # Console output... log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 2.CategoryConroller.java在控制器中把所有请求都写好 package com.how2java.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import com.github.pagehelper.PageHelper; import com.github.pagehelper.PageInfo; import com.how2java.pojo.Category; import com.how2java.service.CategoryService; import com.how2java.util.Page; // 告诉spring mvc这是一个控制器类 @Controller @RequestMapping(&quot;&quot;) public class CategoryController { @Autowired CategoryService categoryService; @RequestMapping(&quot;listCategory&quot;) public ModelAndView listCategory(Page page){ ModelAndView mav = new ModelAndView(); PageHelper.offsetPage(page.getStart(),5); List&lt;Category&gt; cs= categoryService.list(); int total = (int) new PageInfo&lt;&gt;(cs).getTotal(); page.caculatelast(total); // 放入转发参数 mav.addObject(&quot;cs&quot;, cs); // 放入jsp路径 mav.setViewName(&quot;listCategory&quot;); return mav; } @RequestMapping(&quot;addCategory&quot;) public ModelAndView addCategory(Category category){ categoryService.add(category); ModelAndView mav = new ModelAndView(&quot;redirect:/listCategory&quot;); return mav; } @RequestMapping(&quot;deleteCategory&quot;) public ModelAndView deleteCategory(Category category){ categoryService.delete(category); ModelAndView mav = new ModelAndView(&quot;redirect:/listCategory&quot;); return mav; } @RequestMapping(&quot;editCategory&quot;) public ModelAndView editCategory(Category category){ Category c= categoryService.get(category.getId()); ModelAndView mav = new ModelAndView(&quot;editCategory&quot;); mav.addObject(&quot;c&quot;, c); return mav; } @RequestMapping(&quot;updateCategory&quot;) public ModelAndView updateCategory(Category category){ categoryService.update(category); ModelAndView mav = new ModelAndView(&quot;redirect:/listCategory&quot;); return mav; } } 3.CategoryMapper.javapackage com.how2java.mapper; import java.util.List; import com.how2java.pojo.Category; import com.how2java.util.Page; public interface CategoryMapper { public void add(Category category); public void update(Category category); public void delete(Category category); public Category get(int id); public List&lt;Category&gt; list(); } 4.Category.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.mapper.CategoryMapper&quot;&gt; &lt;insert id=&quot;add&quot; parameterType=&quot;Category&quot; &gt; insert into category_ ( name ) values (#{name}) &lt;/insert&gt; &lt;delete id=&quot;delete&quot; parameterType=&quot;Category&quot;&gt; delete from category_ where id= #{id} &lt;/delete&gt; &lt;select id=&quot;get&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt; select * from category_ where id= #{id} &lt;/select&gt; &lt;update id=&quot;update&quot; parameterType=&quot;Category&quot;&gt; update category_ set name= #{name} where id= #{id} &lt;/update&gt; &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt; select * from category_ &lt;/select&gt; &lt;/mapper&gt; 5.CategoryService.javaService端口的接口 package com.how2java.service; import java.util.List; import com.how2java.pojo.Category; public interface CategoryService { List&lt;Category&gt; list(); void add(Category c); void update(Category c); void delete(Category c); Category get(int id); } 6.CategoryServiceImpl.java完善接口 package com.how2java.service.impl; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; import com.how2java.service.CategoryService; @Service public class CategoryServiceImpl implements CategoryService{ @Autowired CategoryMapper categoryMapper; public List&lt;Category&gt; list(){ return categoryMapper.list(); } @Override public void add(Category c) { // TODO Auto-generated method stub categoryMapper.add(c); } @Override public void update(Category c) { // TODO Auto-generated method stub categoryMapper.update(c); } @Override public void delete(Category c) { // TODO Auto-generated method stub categoryMapper.delete(c); } @Override public Category get(int id) { return categoryMapper.get(id); } } 7.MybatisTest.javapackage com.how2java.test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(&quot;classpath:applicationContext.xml&quot;) public class MybatisTest { @Autowired private CategoryMapper categoryMapper; // @Test public void testAdd() { for (int i = 0; i &lt; 100; i++) { Category category = new Category(); category.setName(&quot;new Category&quot;); categoryMapper.add(category); } } } 8.listCategory.jsp&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt; &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;div style=&quot;width:500px;margin:0px auto;text-align:center&quot;&gt; &lt;table align=&apos;center&apos; border=&apos;1&apos; cellspacing=&apos;0&apos;&gt; &lt;tr&gt; &lt;td&gt;id&lt;/td&gt; &lt;td&gt;name&lt;/td&gt; &lt;td&gt;编辑&lt;/td&gt; &lt;td&gt;删除&lt;/td&gt; &lt;/tr&gt; &lt;c:forEach items=&quot;${cs}&quot; var=&quot;c&quot; varStatus=&quot;st&quot;&gt; &lt;tr&gt; &lt;td&gt;${c.id}&lt;/td&gt; &lt;td&gt;${c.name}&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;editCategory?id=${c.id}&quot;&gt;编辑&lt;/a&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;deleteCategory?id=${c.id}&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/table&gt; &lt;div style=&quot;text-align:center&quot;&gt; &lt;a href=&quot;?start=0&quot;&gt;首 页&lt;/a&gt; &lt;a href=&quot;?start=${page.start-page.count}&quot;&gt;上一页&lt;/a&gt; &lt;a href=&quot;?start=${page.start+page.count}&quot;&gt;下一页&lt;/a&gt; &lt;a href=&quot;?start=${page.last}&quot;&gt;末 页&lt;/a&gt; &lt;/div&gt; &lt;div style=&quot;text-align:center;margin-top:40px&quot;&gt; &lt;form method=&quot;post&quot; action=&quot;addCategory&quot;&gt; 分类名称： &lt;input name=&quot;name&quot; value=&quot;&quot; type=&quot;text&quot;&gt; &lt;br&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;增加分类&quot;&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; 9.editCategory.jsp&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt; &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;div style=&quot;width:500px;margin:0px auto;text-align:center&quot;&gt; &lt;div style=&quot;text-align:center;margin-top:40px&quot;&gt; &lt;form method=&quot;post&quot; action=&quot;updateCategory&quot;&gt; 分类名称： &lt;input name=&quot;name&quot; value=&quot;${c.name}&quot; type=&quot;text&quot;&gt; &lt;br&gt;&lt;br&gt; &lt;input type=&quot;hidden&quot; value=&quot;${c.id}&quot; name=&quot;id&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;增加分类&quot;&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM-连接池]]></title>
    <url>%2F2018%2F07%2F18%2FSSM-%E8%BF%9E%E6%8E%A5%E6%B1%A0%2F</url>
    <content type="text"><![CDATA[修改applicationContext.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;context:annotation-config /&gt; &lt;context:component-scan base-package=&quot;com.how2java.service&quot; /&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt; &lt;!-- 基本属性 url、user、password --&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot; /&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt; &lt;!-- 配置初始化大小、最小、最大 --&gt; &lt;property name=&quot;initialSize&quot; value=&quot;3&quot; /&gt; &lt;property name=&quot;minIdle&quot; value=&quot;3&quot; /&gt; &lt;property name=&quot;maxActive&quot; value=&quot;20&quot; /&gt; &lt;!-- 配置获取连接等待超时的时间 --&gt; &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; /&gt; &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt; &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; /&gt; &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt; &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; /&gt; &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT 1&quot; /&gt; &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; /&gt; &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; /&gt; &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt; &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot; /&gt; &lt;/bean&gt; &lt;!-- &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt; --&gt; &lt;!-- &lt;property name=&quot;driverClassName&quot;&gt; --&gt; &lt;!-- &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt; --&gt; &lt;!-- &lt;/property&gt; --&gt; &lt;!-- &lt;property name=&quot;url&quot;&gt; --&gt; &lt;!-- &lt;value&gt;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&lt;/value&gt; --&gt; &lt;!-- &lt;/property&gt; --&gt; &lt;!-- &lt;property name=&quot;username&quot;&gt; --&gt; &lt;!-- &lt;value&gt;root&lt;/value&gt; --&gt; &lt;!-- &lt;/property&gt; --&gt; &lt;!-- &lt;property name=&quot;password&quot;&gt; --&gt; &lt;!-- &lt;value&gt;admin&lt;/value&gt; --&gt; &lt;!-- &lt;/property&gt; --&gt; &lt;!-- &lt;/bean&gt; --&gt; &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.how2java.pojo&quot; /&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/how2java/mapper/*.xml&quot;/&gt; &lt;/bean&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.how2java.mapper&quot;/&gt; &lt;/bean&gt; &lt;/beans&gt;]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM-PageHelper]]></title>
    <url>%2F2018%2F07%2F18%2FSSM-PageHelper%2F</url>
    <content type="text"><![CDATA[1.jar包需要导入的包有pagehelper-5.1.0-beta2.jar，jsqlparser-1.0.jar 2.applicationContext.xml增加PageHelp插件配置 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;!-- 1. 通过注解，将Service的生命周期纳入Spring的管理 --&gt; &lt;context:annotation-config /&gt; &lt;context:component-scan base-package=&quot;com.how2java.service&quot; /&gt; &lt;!-- 2. 配置数据源 --&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt; &lt;property name=&quot;driverClassName&quot;&gt; &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt; &lt;/property&gt; &lt;property name=&quot;url&quot;&gt; &lt;value&gt;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&lt;/value&gt; &lt;/property&gt; &lt;property name=&quot;username&quot;&gt; &lt;value&gt;root&lt;/value&gt; &lt;/property&gt; &lt;property name=&quot;password&quot;&gt; &lt;value&gt;admin&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 3. 扫描存放SQL语句的Category.xml --&gt; &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.how2java.pojo&quot; /&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/how2java/mapper/*.xml&quot;/&gt; &lt;property name=&quot;plugins&quot;&gt; &lt;array&gt; &lt;bean class=&quot;com.github.pagehelper.PageInterceptor&quot;&gt; &lt;property name=&quot;properties&quot;&gt; &lt;!--使用下面的方式配置参数，一行配置一个 --&gt; &lt;value&gt; &lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/array&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 4. 扫描Mapper，并将其生命周期纳入Spring的管理 --&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.how2java.mapper&quot;/&gt; &lt;/bean&gt; &lt;/beans&gt; 3.CategoryServiceCategoryService去掉total方法和list(Page) 方法 package com.how2java.service; import java.util.List; import com.how2java.pojo.Category; import com.how2java.util.Page; public interface CategoryService { List&lt;Category&gt; list(); } 4.CategoryServiceImplCategoryServiceImpl去掉total方法和list(Page) 方法 package com.how2java.service.impl; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; import com.how2java.service.CategoryService; @Service public class CategoryServiceImpl implements CategoryService{ @Autowired CategoryMapper categoryMapper; public List&lt;Category&gt; list(){ return categoryMapper.list(); } } 5.CategoryMapperCategoryMapper去掉total方法和list(Page) 方法 package com.how2java.mapper; import java.util.List; import com.how2java.pojo.Category; import com.how2java.util.Page; public interface CategoryMapper { public int add(Category category); public void delete(int id); public Category get(int id); public int update(Category category); public List&lt;Category&gt; list(); } 6.Category.xmlCategory.xml去掉total对应的sql语句，list也去掉limit &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.mapper.CategoryMapper&quot;&gt; &lt;insert id=&quot;add&quot; parameterType=&quot;Category&quot; &gt; insert into category_ ( name ) values (#{name}) &lt;/insert&gt; &lt;delete id=&quot;delete&quot; parameterType=&quot;Category&quot; &gt; delete from category_ where id= #{id} &lt;/delete&gt; &lt;select id=&quot;get&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt; select * from category_ where id= #{id} &lt;/select&gt; &lt;update id=&quot;update&quot; parameterType=&quot;Category&quot; &gt; update category_ set name=#{name} where id=#{id} &lt;/update&gt; &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt; select * from category_ &lt;/select&gt; &lt;/mapper&gt; 7.CategoryControllerCategoryController在调用categoryService.list(); 之前，执行： PageHelper.offsetPage(page.getStart(),5); 并通过int total = (int) new PageInfo&lt;&gt;(cs).getTotal();获取总数。其他都不变 package com.how2java.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.support.PagedListHolder; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import com.github.pagehelper.PageHelper; import com.github.pagehelper.PageInfo; import com.how2java.pojo.Category; import com.how2java.service.CategoryService; import com.how2java.util.Page; // 告诉spring mvc这是一个控制器类 @Controller @RequestMapping(&quot;&quot;) public class CategoryController { @Autowired CategoryService categoryService; @RequestMapping(&quot;listCategory&quot;) public ModelAndView listCategory(Page page){ ModelAndView mav = new ModelAndView(); PageHelper.offsetPage(page.getStart(),5); List&lt;Category&gt; cs= categoryService.list(); int total = (int) new PageInfo&lt;&gt;(cs).getTotal(); page.caculateLast(total); // 放入转发参数 mav.addObject(&quot;cs&quot;, cs); // 放入jsp路径 mav.setViewName(&quot;listCategory&quot;); return mav; } } 8.MybatisTest注释掉原来的代码 package com.how2java.test; import java.util.List; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; import com.how2java.util.Page; @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(&quot;classpath:applicationContext.xml&quot;) public class MybatisTest { // @Autowired // private CategoryMapper categoryMapper; // //// @Test // public void testAdd() { // for (int i = 0; i &lt; 100; i++) { // Category category = new Category(); // category.setName(&quot;new Category&quot;); // categoryMapper.add(category); // } // // } // // @Test // public void testTotal() { // int total = categoryMapper.total(); // System.out.println(total); // } // // @Test // public void testList() { // Page p = new Page(); // p.setStart(2); // p.setCount(3); // List&lt;Category&gt; cs=categoryMapper.list(p); // for (Category c : cs) { // System.out.println(c.getName()); // } // } } 9.测试]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM-分页]]></title>
    <url>%2F2018%2F07%2F18%2FSSM-%E5%88%86%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[分页类:1.PagePage类用于存放分页信息：start: 开始位置count: 每页的个数last: 最后一页的位置caculateLast()方法: 通过总数total和每页的个数计算出最后一页的位置 package com.how2java.util; public class Page { int start=0; int count = 5; int last = 0; public int getStart() { return start; } public void setStart(int start) { this.start = start; } public int getCount() { return count; } public void setCount(int count) { this.count = count; } public int getLast() { return last; } public void setLast(int last) { this.last = last; } public void caculatelast(int total) { // 假设总数是50，是能够被5整除的，那么最后一页的开始就是45 if(total % count == 0) { last = total - count; } // 假设总数是51，不能够被5整除的，那么最后一页的开始就是50 else { last = total - total % count; } } } 2.Category.xml修改list，根据当有分页信息的时候，进行分页查询增加total sql语句 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.mapper.CategoryMapper&quot;&gt; &lt;insert id=&quot;add&quot; parameterType=&quot;Category&quot; &gt; insert into category_ ( name ) values (#{name}) &lt;/insert&gt; &lt;delete id=&quot;delete&quot; parameterType=&quot;Category&quot; &gt; delete from category_ where id= #{id} &lt;/delete&gt; &lt;select id=&quot;get&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt; select * from category_ where id= #{id} &lt;/select&gt; &lt;update id=&quot;update&quot; parameterType=&quot;Category&quot; &gt; update category_ set name=#{name} where id=#{id} &lt;/update&gt; &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt; select * from category_ &lt;if test=&quot;start!=null and count!=null&quot;&gt; limit #{start},#{count} &lt;/if&gt; &lt;/select&gt; &lt;select id=&quot;total&quot; resultType=&quot;int&quot;&gt; select count(*) from category_ &lt;/select&gt; &lt;/mapper&gt; 3.CategoryMapper增加total方法用于调用Category.xml 中total对应的sql语句增加 list(Page page)，根据分页来查询数据 package com.how2java.mapper; import java.util.List; import com.how2java.pojo.Category; import com.how2java.util.Page; public interface CategoryMapper { public int add(Category category); public void delete(int id); public Category get(int id); public int update(Category category); public List&lt;Category&gt; list(); public List&lt;Category&gt; list(Page page); public int total(); } 4.CategoryService增加total用于获取所有增加 list(Page page)，根据分页来查询数据 package com.how2java.service; import java.util.List; import com.how2java.pojo.Category; import com.how2java.util.Page; public interface CategoryService { List&lt;Category&gt; list(); int total(); List&lt;Category&gt; list(Page page); } 5.CategoryServiceImpl实现total()和list(Page page) 方法 package com.how2java.service.impl; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; import com.how2java.service.CategoryService; import com.how2java.util.Page; @Service public class CategoryServiceImpl implements CategoryService{ @Autowired CategoryMapper categoryMapper; public List&lt;Category&gt; list(){ return categoryMapper.list(); } @Override public List&lt;Category&gt; list(Page page) { // TODO Auto-generated method stub return categoryMapper.list(page); } @Override public int total() { return categoryMapper.total(); }; } 6.CategoryController修改listCategory，接受分页信息的注入 listCategory(Page page) 根据分页对象，进行查询获取对象集合cs List cs= categoryService.list(page); 根据总数，计算出最后一页的信息 int total = categoryService.total(); package com.how2java.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import com.how2java.pojo.Category; import com.how2java.service.CategoryService; import com.how2java.util.Page; // 告诉spring mvc这是一个控制器类 @Controller @RequestMapping(&quot;&quot;) public class CategoryController { @Autowired CategoryService categoryService; @RequestMapping(&quot;listCategory&quot;) public ModelAndView listCategory(Page page){ ModelAndView mav = new ModelAndView(); List&lt;Category&gt; cs= categoryService.list(page); int total = categoryService.total(); page.caculateLast(total); // 放入转发参数 mav.addObject(&quot;cs&quot;, cs); // 放入jsp路径 mav.setViewName(&quot;listCategory&quot;); return mav; } } 7.listCategory.jsp修改listCategory.jsp，分别提供首页，上一页，下一页，末页等链接 &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt; &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;div style=&quot;width:500px;margin:0px auto;text-align:center&quot;&gt; &lt;table align=&apos;center&apos; border=&apos;1&apos; cellspacing=&apos;0&apos;&gt; &lt;tr&gt; &lt;td&gt;id&lt;/td&gt; &lt;td&gt;name&lt;/td&gt; &lt;/tr&gt; &lt;c:forEach items=&quot;${cs}&quot; var=&quot;c&quot; varStatus=&quot;st&quot;&gt; &lt;tr&gt; &lt;td&gt;${c.id}&lt;/td&gt; &lt;td&gt;${c.name}&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/table&gt; &lt;div style=&quot;text-align:center&quot;&gt; &lt;a href=&quot;?start=0&quot;&gt;首 页&lt;/a&gt; &lt;a href=&quot;?start=${page.start-page.count}&quot;&gt;上一页&lt;/a&gt; &lt;a href=&quot;?start=${page.start+page.count}&quot;&gt;下一页&lt;/a&gt; &lt;a href=&quot;?start=${page.last}&quot;&gt;末 页&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; 8.增加100个对象修改MybatisTest类 package com.how2java.test; import java.util.List; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; import com.how2java.util.Page; @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(&quot;classpath:applicationContext.xml&quot;) public class MybatisTest { @Autowired private CategoryMapper categoryMapper; // @Test public void testAdd() { for (int i = 0; i &lt; 100; i++) { Category category = new Category(); category.setName(&quot;new Category&quot;); categoryMapper.add(category); } } @Test public void testTotal() { int total = categoryMapper.total(); System.out.println(total); } @Test public void testList() { Page p = new Page(); p.setStart(2); p.setCount(3); List&lt;Category&gt; cs=categoryMapper.list(p); for (Category c : cs) { System.out.println(c.getName()); } } }]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM-整合步骤]]></title>
    <url>%2F2018%2F07%2F17%2FSSM-%E6%95%B4%E5%90%88%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"><![CDATA[持久层：DAO层（mapper）DAO层：DAO层主要是做数据持久层的工作，负责与数据库进行联络的一些任务都封装在此，DAO层的设计首先是设计DAO的接口，然后在Spring的配置文件中定义此接口的实现类，然后就可在模块中调用此接口来进行数据业务的处理，而不用关心此接口的具体实现类是哪个类，显得结构非常清晰，DAO层的数据源配置，以及有关数据库连接的参数都在Spring的配置文件中进行配置。 业务层：Service层Service层：Service层主要负责业务模块的逻辑应用设计。首先设计接口，再设计其实现的类接着再在Spring的配置文件中配置其实现的关联。这样我们就可以在应用中调用Service接口来进行业务处理。Service层的业务实现，具体要调用到已定义的DAO层的接口，封装Service层的业务逻辑有利于通用的业务逻辑的独立性和重复利用性，程序显得非常简洁。 表现层：Controller层（Handler层）Controller层:Controller层负责具体的业务模块流程的控制，在此层里面要调用Service层的接口来控制业务流程，控制的配置也同样是在Spring的配置文件里面进行，针对具体的业务流程，会有不同的控制器，我们具体的设计过程中可以将流程进行抽象归纳，设计出可以重复利用的子单元流程模块，这样不仅使程序结构变得清晰，也大大减少了代码量。 View层View层 此层与控制层结合比较紧密，需要二者结合起来协同工发。View层主要负责前台jsp页面的表示. 1.思路图 首先浏览器上访问路径 /listCategory tomcat根据web.xml上的配置信息，拦截到了/listCategory，并将其交由DispatcherServlet处理。 DispatcherServlet 根据springMVC的配置，将这次请求交由CategoryController类进行处理，所以需要进行这个类的实例化 在实例化CategoryController的时候，注入CategoryServiceImpl。 (自动装配实现了CategoryService接口的的实例，只有CategoryServiceImpl实现了CategoryService接口，所以就会注入CategoryServiceImpl) 在实例化CategoryServiceImpl的时候，又注入CategoryMapper 根据ApplicationContext.xml中的配置信息，将CategoryMapper和Category.xml关联起来了。 这样拿到了实例化好了的CategoryController,并调用listCategory方法 在listCategory方法中，访问CategoryService,并获取数据，并把数据放在”cs”上，接着服务端跳转到listCategory.jsp去 最后在listCategory.jsp 中显示数据 2.数据库create database how2java; use how2java; CREATE TABLE category_ ( id int(11) NOT NULL AUTO_INCREMENT, name varchar(30) , PRIMARY KEY (id) ) DEFAULT CHARSET=UTF8; use how2java; insert into category_ values(null,&quot;category1&quot;); insert into category_ values(null,&quot;category2&quot;); insert into category_ values(null,&quot;category3&quot;); insert into category_ values(null,&quot;category4&quot;); insert into category_ values(null,&quot;category5&quot;); select * from category_ 3.新建项目在eclipse中新建项目ssm，使用dynamic web project的方式 4.导入jar包导入lib.rar包 5.pojopackage com.how2java.pojo; public class Category { private int id; private String name; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public String toString() { return &quot;Category [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;; } } 6.CategoryMapperpackage com.how2java.mapper; import java.util.List; import com.how2java.pojo.Category; public interface CategoryMapper { public void add(Category category); public void delete(int id); public Category get(int id); public void update(Category category); public List&lt;Category&gt; list(); public int count(); } 7.Category.xmlCategory.xml需要和CategoryMapper放在同一个包下面，并且namespace必须写CategoryMapper的完整类名 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.mapper.CategoryMapper&quot;&gt; &lt;insert id=&quot;add&quot; parameterType=&quot;Category&quot; &gt; insert into category_ ( name ) values (#{name}) &lt;/insert&gt; &lt;delete id=&quot;delete&quot; parameterType=&quot;Category&quot; &gt; delete from category_ where id= #{id} &lt;/delete&gt; &lt;select id=&quot;get&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt; select * from category_ where id= #{id} &lt;/select&gt; &lt;update id=&quot;update&quot; parameterType=&quot;Category&quot; &gt; update category_ set name=#{name} where id=#{id} &lt;/update&gt; &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt; select * from category_ &lt;/select&gt; &lt;/mapper&gt; 8.CategoryServicepackage com.how2java.service; import java.util.List; import com.how2java.pojo.Category; public interface CategoryService { List&lt;Category&gt; list(); } 9.CategoryServiceImplCategoryServiceImpl被注解@Service标示为一个Service并且装配了categoryMapper 在CategoryServiceImpl类前面有一个@Service,表示它被Spring管理起来了。@Servicepublic class CategoryServiceImpl @AutowiredCategoryService categoryService;这句话的意思是找到实现了CategoryService 接口的类装配进来 所以Spring就会找到它管理的CategoryServiceImpl 类装配（注入）进去。 而CategoryService 本身是接口，没法被注入的啦 package com.how2java.service.impl; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; import com.how2java.service.CategoryService; @Service public class CategoryServiceImpl implements CategoryService{ @Autowired CategoryMapper categoryMapper; public List&lt;Category&gt; list(){ return categoryMapper.list(); } } 10.CategoryControllerCategoryController被@Controller标示为了控制器自动装配了categoryService通过@RequestMapping映射访问路径/listCategory路径到方法listCategory()。在listCategory()方法中，通过categoryService获取后，然后存放在”cs”这个key上。 @RequestMapping(“”) (绝对路径)倘若写成了@RequestMapping(“abc”), 那么访问的时候就需要在地址栏里加上/abc/ package com.how2java.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import com.how2java.pojo.Category; import com.how2java.service.CategoryService; // 告诉spring mvc这是一个控制器类 @Controller @RequestMapping(&quot;&quot;) public class CategoryController { @Autowired CategoryService categoryService; @RequestMapping(&quot;listCategory&quot;) public ModelAndView listCategory(){ ModelAndView mav = new ModelAndView(); List&lt;Category&gt; cs= categoryService.list(); // 放入转发参数 mav.addObject(&quot;cs&quot;, cs); // 放入jsp路径 mav.setViewName(&quot;listCategory&quot;); return mav; } } 11.web.xml在WEB-INF目录下新增加web.xml，这个web.xml有两个作用： 通过ContextLoaderListener在web app启动的时候，获取contextConfigLocation配置文件的文件名applicationContext.xml，并进行Spring相关初始化工作 有任何访问，都被DispatcherServlet所拦截，这就是Spring MVC那套工作机制了。 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt; &lt;!-- spring的配置文件--&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!-- spring mvc核心：分发servlet --&gt; &lt;servlet&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- spring mvc的配置文件 --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;/web-app&gt; 12.applicationContext.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;!-- 1. 通过注解，将Service的生命周期纳入Spring的管理 --&gt; &lt;context:annotation-config /&gt; &lt;context:component-scan base-package=&quot;com.how2java.service&quot; /&gt; &lt;!-- 2. 配置数据源 --&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt; &lt;property name=&quot;driverClassName&quot;&gt; &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt; &lt;/property&gt; &lt;property name=&quot;url&quot;&gt; &lt;value&gt;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&lt;/value&gt; &lt;/property&gt; &lt;property name=&quot;username&quot;&gt; &lt;value&gt;root&lt;/value&gt; &lt;/property&gt; &lt;property name=&quot;password&quot;&gt; &lt;value&gt;admin&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 3. 扫描存放SQL语句的Category.xml --&gt; &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.how2java.pojo&quot; /&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/how2java/mapper/*.xml&quot;/&gt; &lt;/bean&gt; &lt;!-- 4. 扫描Mapper，并将其生命周期纳入Spring的管理 --&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.how2java.mapper&quot;/&gt; &lt;/bean&gt; &lt;/beans&gt; 13.springMVC.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt; &lt;!-- 1. 扫描Controller,并将其生命周期纳入Spring管理 --&gt; &lt;context:annotation-config/&gt; &lt;context:component-scan base-package=&quot;com.how2java.controller&quot;&gt; &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt; &lt;/context:component-scan&gt; &lt;!-- 2.注解驱动，以使得访问路径与方法的匹配可以通过注解配置 --&gt; &lt;mvc:annotation-driven /&gt; &lt;!-- 3. 静态页面，如html,css,js,images可以访问 --&gt; &lt;mvc:default-servlet-handler /&gt; &lt;!-- 4. 视图定位到/WEB/INF/jsp 这个目录下 --&gt; &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt; &lt;/bean&gt; &lt;/beans&gt; 14.listCategory.jsp在WEB-INF下创建jsp目录，并创建文件listCategory.jsp。在这个jsp文件中，通过forEach标签，遍历CategoryController传递过来的集合数据。 &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt; &lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;table align=&apos;center&apos; border=&apos;1&apos; cellspacing=&apos;0&apos;&gt; &lt;tr&gt; &lt;td&gt;id&lt;/td&gt; &lt;td&gt;name&lt;/td&gt; &lt;/tr&gt; &lt;c:forEach items=&quot;${cs}&quot; var=&quot;c&quot; varStatus=&quot;st&quot;&gt; &lt;tr&gt; &lt;td&gt;${c.id}&lt;/td&gt; &lt;td&gt;${c.name}&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/table&gt; 15.测试部署在Tomcat中，重启tomcat，然后访问地址，观察效果 http://127.0.0.1:8080/ssm/listCategory]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-逆向工程]]></title>
    <url>%2F2018%2F07%2F17%2FMybatis-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[1.简介Mybatis Generator是一个用于Mybatis逆向工程的工具。前面学习的方式都是先有pojo, mapper, xml, 然后再创建表。 用逆向工程的方式，首先保证数据库里有表，然后通过Mybatis Generator生成pojo, mapper和xml。 可以节约大家的时间，提高开发效率，降低出错几率 2.jar包导入需要额外的Mybatis Generator jar包（mybatis-generator-core-1.3.5.jar） 3.配置文件 在src目录下创建generatorConfig.xml 这个配置文件有如下作用 指定 mysql jdbcjar 包的位置,这里用的位置是 e:/project/mybatis/lib/mysql-connector-java-5.0.8-bin.jar 设置数据库链接账号密码 指定pojo,mapper,xml分别生成的包名 指定表名以及表名对应的类名4.1 使用自增长键： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt; &lt;generatorConfiguration&gt; &lt;!--数据库驱动--&gt; &lt;!-- 如果IDE(eclipse或者idea) 项目里导入了jar包，那么就不需要配置了jar包的绝对路径了 &lt;classPathEntry location=&quot;e:/project/mybatis/lib/mysql-connector-java-5.0.8-bin.jar&quot;/&gt; --&gt; &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;commentGenerator&gt; &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;false&quot;/&gt; &lt;/commentGenerator&gt; &lt;!--数据库链接地址账号密码--&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost/how2java&quot; userId=&quot;root&quot; password=&quot;admin&quot;&gt; &lt;/jdbcConnection&gt; &lt;javaTypeResolver&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt; &lt;/javaTypeResolver&gt; &lt;!--生成Model类存放位置--&gt; &lt;javaModelGenerator targetPackage=&quot;com.how2java.pojo&quot; targetProject=&quot;src&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt; &lt;/javaModelGenerator&gt; &lt;!--生成映射文件存放位置--&gt; &lt;sqlMapGenerator targetPackage=&quot;com.how2java.pojo&quot; targetProject=&quot;src&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/sqlMapGenerator&gt; &lt;!--生成Dao类存放位置--&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.how2java.mapper&quot; targetProject=&quot;src&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt; &lt;/javaClientGenerator&gt; &lt;!--生成对应表及类名--&gt; &lt;table tableName=&quot;category_&quot; domainObjectName=&quot;Category&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;true&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;property name=&quot;my.isgen.usekeys&quot; value=&quot;true&quot;/&gt; &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;JDBC&quot;/&gt; &lt;/table&gt; &lt;!-- &lt;table tableName=&quot;product_&quot; domainObjectName=&quot;Product&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt; --&gt; &lt;/context&gt; &lt;/generatorConfiguration&gt; 4.TestMybatisGenerator运行成功之后，就会在对应位置生成pojo,xml,和mapper package com.how2java; import java.io.File; import java.io.InputStream; import java.util.ArrayList; import java.util.List; import org.mybatis.generator.api.MyBatisGenerator; import org.mybatis.generator.config.Configuration; import org.mybatis.generator.config.xml.ConfigurationParser; import org.mybatis.generator.internal.DefaultShellCallback; public class TestMybatisGenerator { public static void main(String[] args) throws Exception { List&lt;String&gt; warnings = new ArrayList&lt;String&gt;(); boolean overwrite = true; InputStream is= TestMybatisGenerator.class.getClassLoader().getResource(&quot;generatorConfig.xml&quot;).openStream(); ConfigurationParser cp = new ConfigurationParser(warnings); Configuration config = cp.parseConfiguration(is); is.close(); DefaultShellCallback callback = new DefaultShellCallback(overwrite); MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings); myBatisGenerator.generate(null); System.out.println(&quot;生成代码成功，刷新项目，查看文件,然后执行TestMybatis.java&quot;); } } 5.TestMybatis运行TestMybatis，执行自动生成的mapper，借助CategoryExample 进行模糊查询名称里出现了9的分类 package com.how2java; import java.io.InputStream; import java.util.List; //import com.how2java.mapper.CategoryMapper; //import com.how2java.pojo.Category; //import com.how2java.pojo.CategoryExample; //import com.how2java.mapper.CategoryMapper; //import com.how2java.pojo.CategoryExample; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; import com.how2java.pojo.CategoryExample; public class TestMybatis { public static void main(String args[]) throws Exception { System.out.println(&quot;先运行TestMybatisGenerator创建mapper,pojo,xml 等文件，然后取消import里被注释的，以及接下来的注释，并执行代码&quot;); // String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session=sqlSessionFactory.openSession(); CategoryExample example = new CategoryExample(); example.createCriteria().andNameLike(&quot;%9%&quot;); CategoryMapper mapper = session.getMapper(CategoryMapper.class); List&lt;Category&gt; cs= mapper.selectByExample(example); for (Category c : cs) { System.out.println(c.getName()); } } }]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-c3p0连接池]]></title>
    <url>%2F2018%2F07%2F17%2FMybatis-c3p0%E8%BF%9E%E6%8E%A5%E6%B1%A0%2F</url>
    <content type="text"><![CDATA[1.需要导入c3p0的jar包2.C3P0DataSourceFactoryMybatis使用C3P0有点怪怪的，需要自己写个类继承UnpooledDataSourceFactory，然后指定dataSource 为ComboPooledDataSource。这个ComboPooledDataSource就是c3p0的数据源。 package org.mybatis.c3p0; import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory; import com.mchange.v2.c3p0.ComboPooledDataSource; public class C3P0DataSourceFactory extends UnpooledDataSourceFactory{ public C3P0DataSourceFactory(){ this.dataSource =new ComboPooledDataSource(); } } 3.mybatis-config.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;!-- &lt;dataSource type=&quot;POOLED&quot;&gt; --&gt; &lt;!-- &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; --&gt; &lt;!-- &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; --&gt; &lt;!-- &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; --&gt; &lt;!-- &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; --&gt; &lt;!-- &lt;/dataSource&gt; --&gt; &lt;dataSource type=&quot;org.mybatis.c3p0.C3P0DataSourceFactory&quot;&gt; &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt; &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;autoReconnect=true&amp;amp;failOverReadOnly=false&quot;/&gt; &lt;property name=&quot;user&quot; value=&quot;root&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot; /&gt; &lt;!-- 连接池初始化大小为3 --&gt; &lt;property name=&quot;initialPoolSize&quot; value=&quot;3&quot;/&gt; &lt;!-- 连接池最大为10 --&gt; &lt;property name=&quot;maxPoolSize&quot; value=&quot;10&quot;/&gt; &lt;!-- 连接池最小为3 --&gt; &lt;property name=&quot;minPoolSize&quot; value=&quot;3&quot;/&gt; &lt;!-- 连接池在无空闲连接可用时一次性最多创建的新数据库连接数 --&gt; &lt;property name=&quot;acquireIncrement&quot; value=&quot;5&quot;/&gt; &lt;!-- 连接的最大空闲时间，如果超过这个时间（秒），某个数据库连接还没有被使用，则会断开掉这个连接。如果为0，则永远不会断开连接,即回收此连接 --&gt; &lt;property name=&quot;maxIdleTime&quot; value=&quot;30&quot;/&gt; &lt;!-- 最大的Statement数量 --&gt; &lt;property name=&quot;maxStatements&quot; value=&quot;500&quot;/&gt; &lt;!-- 每个连接启动的最大Statement数量 --&gt; &lt;property name=&quot;maxStatementsPerConnection&quot; value=&quot;50&quot;/&gt; &lt;!-- 同时运行的线程数 --&gt; &lt;property name=&quot;numHelperThreads&quot; value=&quot;5&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt;]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-缓存]]></title>
    <url>%2F2018%2F07%2F17%2FMybatis-%E7%BC%93%E5%AD%98%2F</url>
    <content type="text"><![CDATA[一级缓存1.在一个Session里查相同id的数据如图所示，在session1中查询两次id=1的Category对象。第一次会去数据库中取数据，但是第二次就不会访问数据库了，而是直接从session中取出来。 package com.how2java; import java.io.IOException; import java.io.InputStream; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session1 = sqlSessionFactory.openSession(); Category c1 = session1.selectOne(&quot;getCategory&quot;, 1); System.out.println(c1); Category c2 = session1.selectOne(&quot;getCategory&quot;, 1); System.out.println(c2); session1.commit(); session1.close(); } } 2.在不同Session里查相同id的数据这一次，另外打开一个session,取同样id的数据，就会发现需要执行sql语句，证实了一级缓存是在session里的 package com.how2java; import java.io.IOException; import java.io.InputStream; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session1 = sqlSessionFactory.openSession(); Category c1 = session1.selectOne(&quot;getCategory&quot;, 1); System.out.println(c1); Category c2 = session1.selectOne(&quot;getCategory&quot;, 1); System.out.println(c2); session1.commit(); session1.close(); SqlSession session2 = sqlSessionFactory.openSession(); Category c3 = session2.selectOne(&quot;getCategory&quot;, 1); System.out.println(c3); session2.commit(); session2.close(); } } 二级缓存1.启动二级缓存11行新增一个段配置，以支持二级缓存 &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;settings&gt; &lt;!-- 打开延迟加载的开关 --&gt; &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot; /&gt; &lt;!-- 将积极加载改为消息加载即按需加载 --&gt; &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt; &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt; &lt;/settings&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.CategoryMapper&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.ProductMapper&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 2.Category.xml在第7行新增以启动Category对象的二级缓存 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;cache/&gt; &lt;insert id=&quot;addCategory&quot; parameterType=&quot;Category&quot; &gt; insert into category_ ( name ) values (#{name}) &lt;/insert&gt; &lt;delete id=&quot;deleteCategory&quot; parameterType=&quot;Category&quot; &gt; delete from category_ where id= #{id} &lt;/delete&gt; &lt;select id=&quot;getCategory&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt; select * from category_ where id= #{id} &lt;/select&gt; &lt;update id=&quot;updateCategory&quot; parameterType=&quot;Category&quot; &gt; update category_ set name=#{name} where id=#{id} &lt;/update&gt; &lt;select id=&quot;listCategory&quot; resultType=&quot;Category&quot;&gt; select * from category_ &lt;if test=&quot;start!=null and count!=null&quot;&gt; limit #{start},#{count} &lt;/if&gt; &lt;/select&gt; &lt;/mapper&gt; 3.序列化Category让Category实现序列化接口 package com.how2java.pojo; import java.io.Serializable; import java.util.List; public class Category implements Serializable{ private int id; private String name; List&lt;Product&gt; products; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public List&lt;Product&gt; getProducts() { return products; } public void setProducts(List&lt;Product&gt; products) { this.products = products; } @Override public String toString() { return &quot;Category [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;; } } 4.测试再次运行TestMybatis，如图所示，在同一个SessionFactory下查询id=1的数据，只有第一次需要执行sql语句，以后都是从缓存中取出]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-分页]]></title>
    <url>%2F2018%2F07%2F17%2FMybatis-%E5%88%86%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[1.数据设置为100条为了观察分页查询的效果，把分类表里的数据都删除掉，然后新增100个数据 package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;); for (Category c : cs) { session.delete(&quot;deleteCategory&quot;, c); } for (int i = 0; i &lt; 100; i++) { Category c = new Category(); c.setName(&quot;category name &quot; + i); session.insert(&quot;addCategory&quot;, c); } List&lt;Category&gt; cs2 = session.selectList(&quot;listCategory&quot;); for (Category c : cs2) { System.out.println(c.getName()); } session.commit(); session.close(); } } 2.mybatis-config.xml添加15-19行代码表示开启PageHelper插件 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;settings&gt; &lt;!-- 打开延迟加载的开关 --&gt; &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot; /&gt; &lt;!-- 将积极加载改为消息加载即按需加载 --&gt; &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt; &lt;/settings&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;plugins&gt; &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.CategoryMapper&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.ProductMapper&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 3.Category.xml24-26行的limit注释掉，因为分页相关工作，会由PageHelper去做掉，不需要自己去写了 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;insert id=&quot;addCategory&quot; parameterType=&quot;Category&quot; &gt; insert into category_ ( name ) values (#{name}) &lt;/insert&gt; &lt;delete id=&quot;deleteCategory&quot; parameterType=&quot;Category&quot; &gt; delete from category_ where id= #{id} &lt;/delete&gt; &lt;select id=&quot;getCategory&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt; select * from category_ where id= #{id} &lt;/select&gt; &lt;update id=&quot;updateCategory&quot; parameterType=&quot;Category&quot; &gt; update category_ set name=#{name} where id=#{id} &lt;/update&gt; &lt;select id=&quot;listCategory&quot; resultType=&quot;Category&quot;&gt; select * from category_ &lt;!-- &lt;if test=&quot;start!=null and count!=null&quot;&gt; --&gt; &lt;!-- limit #{start},#{count} --&gt; &lt;!-- &lt;/if&gt; --&gt; &lt;/select&gt; &lt;/mapper&gt; 4.分页查询查询很有意思，只需要在执行查询所有的调用之前，执行一条语句即可： PageHelper.offsetPage(0, 5); 这就表示查出第一页的数据，每页5条 package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.github.pagehelper.PageHelper; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException, InterruptedException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); PageHelper.offsetPage(0, 5); List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;); for (Category c : cs) { System.out.println(c.getName()); } session.commit(); session.close(); } } 5.获取总数通过第31行的代码 PageInfo page= new PageInfo&lt;&gt;(cs); 就可以获取分页信息，包括总数以及其他的 package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.github.pagehelper.PageHelper; import com.github.pagehelper.PageInfo; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException, InterruptedException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); PageHelper.offsetPage(0, 5); List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;); for (Category c : cs) { System.out.println(c.getName()); } PageInfo pageInfo = new PageInfo&lt;&gt;(cs); System.out.println(&quot;总数：&quot;+pageInfo.getTotal()); System.out.println(pageInfo); session.commit(); session.close(); } }]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-延迟加载]]></title>
    <url>%2F2018%2F07%2F17%2FMybatis-%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[延迟加载主要是用于Mybatis自己会执行没有让他执行的SQL语句，为了避免所以添加延迟加载。 1.未添加的效果把27,28,29注释掉，只获取分类，不获取产品，执行后发现，获取产品的SQL语句也执行了 package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); CategoryMapper mapper = session.getMapper(CategoryMapper.class); List&lt;Category&gt; cs = mapper.list(); for (Category c : cs) { System.out.println(c.getName()); // List&lt;Product&gt; ps = c.getProducts(); // for (Product p : ps) { // System.out.println(&quot;\t&quot;+p.getName()); // } } session.commit(); session.close(); } } 2.mybatis-config.xml修改mybatis-config.xml，在6-11行添加延迟加载的配置 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;settings&gt; &lt;!-- 打开延迟加载的开关 --&gt; &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot; /&gt; &lt;!-- 将积极加载改为消息加载即按需加载 --&gt; &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt; &lt;/settings&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.CategoryMapper&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.ProductMapper&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 3.效果执行同样的操作，可以观察到，只查询了category_表的数据，没有查询product_表的数据 获取分类对应的产品集合，这个时候，才会去对product_表进行查询 将注释取消之后]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-事务管理]]></title>
    <url>%2F2018%2F07%2F17%2FMybatis-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[同一个事务，若有一个操作没成功，那么这个事务的其他操作也不能成功 1.JDBC方式确保12行是 &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.CategoryMapper&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 2.测试代码38行的代码提交事务session.commit(); package com.how2java; import java.io.IOException; import java.io.InputStream; import java.sql.SQLException; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import org.apache.ibatis.transaction.Transaction; import org.apache.ibatis.transaction.TransactionFactory; import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException, SQLException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); CategoryMapper mapper = session.getMapper(CategoryMapper.class); Category c1 = new Category(); c1.setName(&quot;长度够短的名称&quot;); mapper.add(c1); Category c2 = new Category(); c2.setName(&quot;超过最大长度30的名称超过最大长度30的名称超过最大长度30的名称超过最大长度30的名称超过最大长度30的名称超过最大长度30的名称&quot;); mapper.add(c2); listAll(mapper); session.commit(); session.close(); } private static void listAll(CategoryMapper mapper) { List&lt;Category&gt; cs = mapper.list(); for (Category c : cs) { System.out.println(c.getName()); } } } 3.Mysql的表必须是INNODB在Mysql中，只有当表的类型是INNODB的时候，才支持事务，所以需要把表category_的类型设置为INNODB,否则无法观察到事务. 修改表的类型为INNODB的SQL： alter table category_ ENGINE = innodb; 查看表的类型的SQL show table status from how2java;]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-日志]]></title>
    <url>%2F2018%2F07%2F17%2FMybatis-%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[log4j.properties# Global logging configuration log4j.rootLogger=ERROR, stdout # MyBatis logging configuration... log4j.logger.com.how2java=TRACE # Console output... log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n log4j在前面的文章中有，参数请参考之前的文章]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-注解]]></title>
    <url>%2F2018%2F07%2F17%2FMybatis-%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[CRUD1.Mapper接口新增加接口CategoryMapper ，并在接口中声明的方法上，加上注解 package com.how2java.mapper; import java.util.List; import org.apache.ibatis.annotations.Delete; import org.apache.ibatis.annotations.Insert; import org.apache.ibatis.annotations.Select; import org.apache.ibatis.annotations.Update; import com.how2java.pojo.Category; public interface CategoryMapper { @Insert(&quot; insert into category_ ( name ) values (#{name}) &quot;) public int add(Category category); @Delete(&quot; delete from category_ where id= #{id} &quot;) public void delete(int id); @Select(&quot;select * from category_ where id= #{id} &quot;) public Category get(int id); @Update(&quot;update category_ set name=#{name} where id=#{id} &quot;) public int update(Category category); @Select(&quot; select * from category_ &quot;) public List&lt;Category&gt; list(); } 2.mybatis-config.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.CategoryMapper&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 3.TestMybatispackage com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); CategoryMapper mapper = session.getMapper(CategoryMapper.class); // add(mapper); // delete(mapper); // get(mapper); // update(mapper); listAll(mapper); session.commit(); session.close(); } private static void update(CategoryMapper mapper) { Category c= mapper.get(8); c.setName(&quot;修改了的Category名稱&quot;); mapper.update(c); listAll(mapper); } private static void get(CategoryMapper mapper) { Category c= mapper.get(8); System.out.println(c.getName()); } private static void delete(CategoryMapper mapper) { mapper.delete(2); listAll(mapper); } private static void add(CategoryMapper mapper) { Category c = new Category(); c.setName(&quot;新增加的Category&quot;); mapper.add(c); listAll(mapper); } private static void listAll(CategoryMapper mapper) { List&lt;Category&gt; cs = mapper.list(); for (Category c : cs) { System.out.println(c.getName()); } } } 一对多1.CategoryMapper新增加CategoryMapper接口，查询所有Category@Select注解获取Category类本身 @Select(“ select * from category_ “) @Results 通过@Result和@Many中调用ProductMapper.listByCategory()方法相结合，来获取一对多关系 @Results({@Result(property = “products”, javaType = List.class, column = “id”, many = @Many(select = “com.how2java.mapper.ProductMapper.listByCategory”))}) package com.how2java.mapper; import java.util.List; import org.apache.ibatis.annotations.Many; import org.apache.ibatis.annotations.Result; import org.apache.ibatis.annotations.Results; import org.apache.ibatis.annotations.Select; import com.how2java.pojo.Category; public interface CategoryMapper { @Select(&quot; select * from category_ &quot;) @Results({ @Result(property = &quot;id&quot;, column = &quot;id&quot;), @Result(property = &quot;products&quot;, javaType = List.class, column = &quot;id&quot;, many = @Many(select = &quot;com.how2java.mapper.ProductMapper.listByCategory&quot;) ) }) public List&lt;Category&gt; list(); } 2.ProductMapper新增接口ProductMapper注解@Select用于根据分类id获取产品集合@Select(“ select * from product_ where cid = #{cid}”) package com.how2java.mapper; import java.util.List; import org.apache.ibatis.annotations.Select; import com.how2java.pojo.Product; public interface ProductMapper { @Select(&quot; select * from product_ where cid = #{cid}&quot;) public List&lt;Product&gt; listByCategory(int cid); } 3.mybatis-config.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.CategoryMapper&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.ProductMapper&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 4.测试package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); CategoryMapper mapper = session.getMapper(CategoryMapper.class); listAll(mapper); session.commit(); session.close(); } private static void listAll(CategoryMapper mapper) { List&lt;Category&gt; cs = mapper.list(); for (Category c : cs) { System.out.println(c.getName()); List&lt;Product&gt; ps = c.getProducts(); for (Product p : ps) { System.out.println(&quot;\t&quot;+p.getName()); } } } } 关于注解参数的解释：https://blog.csdn.net/hjm824/article/details/52972738 多对一1.CategoryMapperpackage com.how2java.mapper; import org.apache.ibatis.annotations.Select; import com.how2java.pojo.Category; public interface CategoryMapper { @Select(&quot; select * from category_ where id = #{id}&quot;) public Category get(int id); } 2.ProductMapperpackage com.how2java.mapper; import java.util.List; import org.apache.ibatis.annotations.One; import org.apache.ibatis.annotations.Result; import org.apache.ibatis.annotations.Results; import org.apache.ibatis.annotations.Select; import com.how2java.pojo.Product; public interface ProductMapper { @Select(&quot; select * from product_ &quot;) @Results({ @Result(property=&quot;category&quot;,column=&quot;cid&quot;,one=@One(select=&quot;com.how2java.mapper.CategoryMapper.get&quot;)) }) public List&lt;Product&gt; list(); } 3.mybatis-config.xml增加上述两个类的映射 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.CategoryMapper&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.ProductMapper&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 4.测试package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.mapper.ProductMapper; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); ProductMapper mapper = session.getMapper(ProductMapper.class); List&lt;Product&gt; ps= mapper.list(); for (Product p : ps) { System.out.println(p + &quot;\t对应的分类是:\t&quot; + p.getCategory().getName()); } session.commit(); session.close(); } } 多对多1.ProductMapperpackage com.how2java.mapper; import org.apache.ibatis.annotations.Select; import com.how2java.pojo.Product; public interface ProductMapper { @Select(&quot;select * from product_ where id = #{id}&quot;) public Product get(int id); } 2.OrderIteamMapper新增OrderItemMapper，提供listByOrder方法。这里会与Product建立多对一关系 package com.how2java.mapper; import java.util.List; import org.apache.ibatis.annotations.One; import org.apache.ibatis.annotations.Result; import org.apache.ibatis.annotations.Results; import org.apache.ibatis.annotations.Select; import com.how2java.pojo.OrderItem; public interface OrderItemMapper { @Select(&quot; select * from order_item_ where oid = #{oid}&quot;) @Results({ @Result(property=&quot;product&quot;,column=&quot;pid&quot;,one=@One(select=&quot;com.how2java.mapper.ProductMapper.get&quot;)) }) public List&lt;OrderItem&gt; listByOrder(int oid); } 3.OrderMapperpackage com.how2java.mapper; import java.util.List; import org.apache.ibatis.annotations.Many; import org.apache.ibatis.annotations.Result; import org.apache.ibatis.annotations.Results; import org.apache.ibatis.annotations.Select; import com.how2java.pojo.Order; public interface OrderMapper { @Select(&quot;select * from order_&quot;) @Results({ @Result(property = &quot;id&quot;, column = &quot;id&quot;), @Result(property = &quot;orderItems&quot;, javaType = List.class, column = &quot;id&quot;, many = @Many(select = &quot;com.how2java.mapper.OrderItemMapper.listByOrder&quot;)) }) public List&lt;Order&gt; list(); } 4.mybatis-config.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;mapper resource=&quot;com/how2java/pojo/Product.xml&quot;/&gt; &lt;mapper resource=&quot;com/how2java/pojo/Order.xml&quot;/&gt; &lt;mapper resource=&quot;com/how2java/pojo/OrderItem.xml&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.OrderItemMapper&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.OrderMapper&quot;/&gt; &lt;mapper class=&quot;com.how2java.mapper.ProductMapper&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 5.测试package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.mapper.OrderMapper; import com.how2java.pojo.Order; import com.how2java.pojo.OrderItem; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); listOrder(session); session.commit(); session.close(); } private static void listOrder(SqlSession session) { OrderMapper mapper =session.getMapper(OrderMapper.class); List&lt;Order&gt; os = mapper.list(); for (Order o : os) { System.out.println(o.getCode()); List&lt;OrderItem&gt; ois= o.getOrderItems(); if(null!=ois){ for (OrderItem oi : ois) { System.out.format(&quot;\t%s\t%f\t%d%n&quot;, oi.getProduct().getName(),oi.getProduct().getPrice(),oi.getNumber()); } } } } } 动态SQL1.CategoryDynaSqlProviderpackage com.how2java; import org.apache.ibatis.jdbc.SQL; public class CategoryDynaSqlProvider { public String list() { return new SQL() .SELECT(&quot;*&quot;) .FROM(&quot;category_&quot;) .toString(); } public String get() { return new SQL() .SELECT(&quot;*&quot;) .FROM(&quot;category_&quot;) .WHERE(&quot;id=#{id}&quot;) .toString(); } public String add(){ return new SQL() .INSERT_INTO(&quot;category_&quot;) .VALUES(&quot;name&quot;, &quot;#{name}&quot;) .toString(); } public String update(){ return new SQL() .UPDATE(&quot;category_&quot;) .SET(&quot;name=#{name}&quot;) .WHERE(&quot;id=#{id}&quot;) .toString(); } public String delete(){ return new SQL() .DELETE_FROM(&quot;category_&quot;) .WHERE(&quot;id=#{id}&quot;) .toString(); } } 2.CategoryMapper把本来是手写SQL的CategoryMapper接口，修改为注解引用CategoryDynaSqlProvider类的方式比如增加，本来是手写SQL语句的 @Insert(“ insert into category_ ( name ) values (#{name}) “)public int add(Category category); 修改为了注解@InsertProvider配合CategoryDynaSqlProvider的add方法 @InsertProvider(type=CategoryDynaSqlProvider.class,method=”add”)public int add(Category category); package com.how2java.mapper; import java.util.List; import org.apache.ibatis.annotations.DeleteProvider; import org.apache.ibatis.annotations.InsertProvider; import org.apache.ibatis.annotations.SelectProvider; import org.apache.ibatis.annotations.UpdateProvider; import com.how2java.CategoryDynaSqlProvider; import com.how2java.pojo.Category; public interface CategoryMapper { @InsertProvider(type=CategoryDynaSqlProvider.class,method=&quot;add&quot;) public int add(Category category); @DeleteProvider(type=CategoryDynaSqlProvider.class,method=&quot;delete&quot;) public void delete(int id); @SelectProvider(type=CategoryDynaSqlProvider.class,method=&quot;get&quot;) public Category get(int id); @UpdateProvider(type=CategoryDynaSqlProvider.class,method=&quot;update&quot;) public int update(Category category); @SelectProvider(type=CategoryDynaSqlProvider.class,method=&quot;list&quot;) public List&lt;Category&gt; list(); } 3.查询测试package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.mapper.CategoryMapper; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); CategoryMapper mapper = session.getMapper(CategoryMapper.class); // add(mapper); // delete(mapper); // get(mapper); // update(mapper); listAll(mapper); session.commit(); session.close(); } private static void update(CategoryMapper mapper) { Category c= mapper.get(14); c.setName(&quot;修改了的Category名稱&quot;); mapper.update(c); listAll(mapper); } private static void get(CategoryMapper mapper) { Category c= mapper.get(14); System.out.println(c.getName()); } private static void delete(CategoryMapper mapper) { mapper.delete(13); listAll(mapper); } private static void add(CategoryMapper mapper) { Category c = new Category(); c.setName(&quot;新增加的Category&quot;); mapper.add(c); listAll(mapper); } private static void listAll(CategoryMapper mapper) { List&lt;Category&gt; cs = mapper.list(); for (Category c : cs) { System.out.println(c.getName()); } } }]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-动态SQL]]></title>
    <url>%2F2018%2F07%2F17%2FMybatis-%E5%8A%A8%E6%80%81SQL%2F</url>
    <content type="text"><![CDATA[if1.Product.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;select id=&quot;listProduct&quot; resultType=&quot;Product&quot;&gt; select * from product_ &lt;if test=&quot;name!=null&quot;&gt; where name like concat(&apos;%&apos;,#{name},&apos;%&apos;) &lt;/if&gt; &lt;/select&gt; &lt;/mapper&gt; 相当于 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;select id=&quot;listProduct&quot; resultType=&quot;Product&quot;&gt; select * from product_ &lt;/select&gt; &lt;select id=&quot;listProductByName&quot; resultType=&quot;Product&quot;&gt; select * from product_ where name like concat(&apos;%&apos;,#{name},&apos;%&apos;) &lt;/select&gt; &lt;/mapper&gt; 2.TestMybatis.javapackage com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.HashMap; import java.util.List; import java.util.Map; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); System.out.println(&quot;查询所有的&quot;); List&lt;Product&gt; ps = session.selectList(&quot;listProduct&quot;); for (Product p : ps) { System.out.println(p); } System.out.println(&quot;模糊查询&quot;); Map&lt;String,Object&gt; params = new HashMap&lt;&gt;(); params.put(&quot;name&quot;,&quot;a&quot;); List&lt;Product&gt; ps2 = session.selectList(&quot;listProduct&quot;,params); for (Product p : ps2) { System.out.println(p); } session.commit(); session.close(); } } where1.Product.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;select id=&quot;listProduct&quot; resultType=&quot;Product&quot;&gt; select * from product_ &lt;where&gt; &lt;if test=&quot;name!=null&quot;&gt; and name like concat(&apos;%&apos;,#{name},&apos;%&apos;) &lt;/if&gt; &lt;if test=&quot;price!=null and price!=0&quot;&gt; and price &gt; #{price} &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; &lt;update id=&quot;updateProduct&quot; parameterType=&quot;Product&quot; &gt; update product_ &lt;set&gt; &lt;if test=&quot;name != null&quot;&gt;name=#{name},&lt;/if&gt; &lt;if test=&quot;price != null&quot;&gt;price=#{price}&lt;/if&gt; &lt;/set&gt; where id=#{id} &lt;/update&gt; &lt;/mapper&gt; 相当于 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;select id=&quot;listProduct&quot; resultType=&quot;Product&quot;&gt; select * from product_ &lt;if test=&quot;name!=null&quot;&gt; where name like concat(&apos;%&apos;,#{name},&apos;%&apos;) &lt;/if&gt; &lt;if test=&quot;price!=0&quot;&gt; and price &gt; #{price} &lt;/if&gt; &lt;/select&gt; &lt;/mapper&gt; 2.TestMybatis.javapackage com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.HashMap; import java.util.List; import java.util.Map; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); Product p = new Product(); p.setId(6); p.setName(&quot;product zz&quot;); p.setPrice(99.99f); session.update(&quot;updateProduct&quot;,p); listAll(session); session.commit(); session.close(); } private static void listAll(SqlSession session) { Map&lt;String,Object&gt; params = new HashMap&lt;&gt;(); // params.put(&quot;name&quot;,&quot;a&quot;); // params.put(&quot;price&quot;,&quot;10&quot;); List&lt;Product&gt; ps2 = session.selectList(&quot;listProduct&quot;,params); for (Product p : ps2) { System.out.println(p); } } } choose类似switch case 1.Product.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;select id=&quot;listProduct&quot; resultType=&quot;Product&quot;&gt; SELECT * FROM product_ &lt;where&gt; &lt;choose&gt; &lt;when test=&quot;name != null&quot;&gt; and name like concat(&apos;%&apos;,#{name},&apos;%&apos;) &lt;/when&gt; &lt;when test=&quot;price !=null and price != 0&quot;&gt; and price &gt; #{price} &lt;/when&gt; &lt;otherwise&gt; and id &gt;1 &lt;/otherwise&gt; &lt;/choose&gt; &lt;/where&gt; &lt;/select&gt; &lt;/mapper&gt; 提供条件就条件查询，不行就是id&gt;1查询 2.TestMybatis.javapackage com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.HashMap; import java.util.List; import java.util.Map; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); Map&lt;String,Object&gt; params = new HashMap&lt;&gt;(); // params.put(&quot;name&quot;,&quot;a&quot;); // params.put(&quot;price&quot;,&quot;10&quot;); List&lt;Product&gt; ps = session.selectList(&quot;listProduct&quot;,params); for (Product p : ps) { System.out.println(p); } session.commit(); session.close(); } private static void listAll(SqlSession session) { } } foreachcollection ：collection属性的值有三个分别是list、array、map三种，分别对应的参数类型为：List、数组、map集合，上面传的参数为List，所以值为list item ： 表示在迭代过程中每一个元素的别名 index ：表示在迭代过程中每次迭代到的位置（下标） open ：前缀 close ：后缀 separator ：分隔符，表示迭代时每个元素之间以什么分隔 我们通常可以将之用到批量删除、添加等操作中。 1.Product.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;select id=&quot;listProduct&quot; resultType=&quot;Product&quot;&gt; SELECT * FROM product_ WHERE ID in &lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt; #{item} &lt;/foreach&gt; &lt;/select&gt; &lt;/mapper&gt; 2.TestMybatis.javapackage com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.ArrayList; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); List&lt;Integer&gt; ids = new ArrayList(); ids.add(1); ids.add(3); ids.add(5); List&lt;Product&gt; ps = session.selectList(&quot;listProduct&quot;,ids); for (Product p : ps) { System.out.println(p); } session.commit(); session.close(); } } bind1.Product.xmlbind 用于模糊查询 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;!-- 本来的模糊查询方式 --&gt; &lt;!-- &lt;select id=&quot;listProduct&quot; resultType=&quot;Product&quot;&gt; --&gt; &lt;!-- select * from product_ where name like concat(&apos;%&apos;,#{0},&apos;%&apos;) --&gt; &lt;!-- &lt;/select&gt; --&gt; &lt;select id=&quot;listProduct&quot; resultType=&quot;Product&quot;&gt; &lt;bind name=&quot;likename&quot; value=&quot;&apos;%&apos; + name + &apos;%&apos;&quot; /&gt; select * from product_ where name like #{likename} &lt;/select&gt; &lt;/mapper&gt; 2.TestMybatis.javapackage com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.HashMap; import java.util.List; import java.util.Map; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); Map&lt;String, String&gt; params =new HashMap(); params.put(&quot;name&quot;, &quot;product&quot;); List&lt;Product&gt; ps = session.selectList(&quot;listProduct&quot;,params); for (Product p : ps) { System.out.println(p); } session.commit(); session.close(); } }]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-多对多]]></title>
    <url>%2F2018%2F07%2F16%2FMybatis-%E5%A4%9A%E5%AF%B9%E5%A4%9A%2F</url>
    <content type="text"><![CDATA[1.数据库create table order_ ( id int(11) NOT NULL AUTO_INCREMENT, code varchar(32) DEFAULT NULL, PRIMARY KEY (id) ) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; create table order_item_( id int(11) NOT NULL AUTO_INCREMENT, oid int , pid int , number int , PRIMARY KEY(id) )AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; INSERT INTO order_ VALUES (1,&apos;code000A&apos;); INSERT INTO order_ VALUES (2,&apos;code000B&apos;); INSERT INTO order_item_ VALUES (null, 1, 1, 100); INSERT INTO order_item_ VALUES (null, 1, 2, 100); INSERT INTO order_item_ VALUES (null, 1, 3, 100); INSERT INTO order_item_ VALUES (null, 2, 2, 100); INSERT INTO order_item_ VALUES (null, 2, 3, 100); INSERT INTO order_item_ VALUES (null, 2, 4, 100); 2.实体类OrderItem.java package com.how2java.pojo; public class OrderItem { private int id; private int number; private Order order; private Product product; public int getId() { return id; } public void setId(int id) { this.id = id; } public int getNumber() { return number; } public void setNumber(int number) { this.number = number; } public Order getOrder() { return order; } public void setOrder(Order order) { this.order = order; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } } Order.java package com.how2java.pojo; import java.util.List; public class Order { private int id; private String code; List&lt;OrderItem&gt; orderItems; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getCode() { return code; } public void setCode(String code) { this.code = code; } public List&lt;OrderItem&gt; getOrderItems() { return orderItems; } public void setOrderItems(List&lt;OrderItem&gt; orderItems) { this.orderItems = orderItems; } } 3.映射文件Order.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;resultMap type=&quot;Order&quot; id=&quot;orderBean&quot;&gt; &lt;id column=&quot;oid&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;code&quot; property=&quot;code&quot; /&gt; &lt;collection property=&quot;orderItems&quot; ofType=&quot;OrderItem&quot;&gt; &lt;id column=&quot;oiid&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt; &lt;association property=&quot;product&quot; javaType=&quot;Product&quot;&gt; &lt;id column=&quot;pid&quot; property=&quot;id&quot;/&gt; &lt;result column=&quot;pname&quot; property=&quot;name&quot;/&gt; &lt;result column=&quot;price&quot; property=&quot;price&quot;/&gt; &lt;/association&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;select id=&quot;listOrder&quot; resultMap=&quot;orderBean&quot;&gt; select o.*,p.*,oi.*, o.id &apos;oid&apos;, p.id &apos;pid&apos;, oi.id &apos;oiid&apos;, p.name &apos;pname&apos; from order_ o left join order_item_ oi on o.id =oi.oid left join product_ p on p.id = oi.pid &lt;/select&gt; &lt;select id=&quot;getOrder&quot; resultMap=&quot;orderBean&quot;&gt; select o.*,p.*,oi.*, o.id &apos;oid&apos;, p.id &apos;pid&apos;, oi.id &apos;oiid&apos;, p.name &apos;pname&apos; from order_ o left join order_item_ oi on o.id =oi.oid left join product_ p on p.id = oi.pid where o.id = #{id} &lt;/select&gt; &lt;/mapper&gt; Product.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;resultMap type=&quot;Product&quot; id=&quot;productBean&quot;&gt; &lt;id column=&quot;pid&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;pname&quot; property=&quot;name&quot; /&gt; &lt;result column=&quot;price&quot; property=&quot;price&quot; /&gt; &lt;!-- 多对一的关系 --&gt; &lt;!-- property: 指的是属性名称, javaType：指的是属性的类型 --&gt; &lt;association property=&quot;category&quot; javaType=&quot;Category&quot;&gt; &lt;id column=&quot;cid&quot; property=&quot;id&quot;/&gt; &lt;result column=&quot;cname&quot; property=&quot;name&quot;/&gt; &lt;/association&gt; &lt;/resultMap&gt; &lt;select id=&quot;listProduct&quot; resultMap=&quot;productBean&quot;&gt; select c.*, p.*, c.id &apos;cid&apos;, p.id &apos;pid&apos;, c.name &apos;cname&apos;, p.name &apos;pname&apos; from category_ c left join product_ p on c.id = p.cid &lt;/select&gt; &lt;select id=&quot;getProduct&quot; resultMap=&quot;productBean&quot;&gt; select c.*, p.*, c.id &apos;cid&apos;, p.id &apos;pid&apos;, c.name &apos;cname&apos;, p.name &apos;pname&apos; from category_ c left join product_ p on c.id = p.cid where p.id = #{id} &lt;/select&gt; &lt;/mapper&gt; OrderItem.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;insert id=&quot;addOrderItem&quot; parameterType=&quot;OrderItem&quot;&gt; insert into order_item_ values(null,#{order.id},#{product.id},#{number}) &lt;/insert&gt; &lt;insert id=&quot;deleteOrderItem&quot; parameterType=&quot;OrderItem&quot;&gt; delete from order_item_ where oid = #{order.id} and pid = #{product.id} &lt;/insert&gt; &lt;/mapper&gt; 4.mybatis-config.xml添加对于Order.xml和OrderItem的映射 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;mapper resource=&quot;com/how2java/pojo/Product.xml&quot;/&gt; &lt;mapper resource=&quot;com/how2java/pojo/Order.xml&quot;/&gt; &lt;mapper resource=&quot;com/how2java/pojo/OrderItem.xml&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 5.查询如图所示，查询出所有的订单，然后遍历每个订单下的多条订单项，以及订单项对应的产品名称，价格，购买数量 通过Order.xml的listOrder对应的sql语句进行查询： &lt;select id=&quot;listOrder&quot; resultMap=&quot;orderBean&quot;&gt; select o.*,p.*,oi.*, o.id &apos;oid&apos;, p.id &apos;pid&apos;, oi.id &apos;oiid&apos;, p.name &apos;pname&apos; from order_ o left join order_item_ oi on o.id =oi.oid left join product_ p on p.id = oi.pid &lt;/select&gt; 联合order_, order_item_, product_ 三张表进行查询 &lt;resultMap type=&quot;Order&quot; id=&quot;orderBean&quot;&gt; &lt;id column=&quot;oid&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;code&quot; property=&quot;code&quot; /&gt; &lt;collection property=&quot;orderItems&quot; ofType=&quot;OrderItem&quot;&gt; &lt;id column=&quot;oiid&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt; &lt;association property=&quot;product&quot; javaType=&quot;Product&quot;&gt; &lt;id column=&quot;pid&quot; property=&quot;id&quot;/&gt; &lt;result column=&quot;pname&quot; property=&quot;name&quot;/&gt; &lt;result column=&quot;price&quot; property=&quot;price&quot;/&gt; &lt;/association&gt; &lt;/collection&gt; &lt;/resultMap&gt; 查询结果 id和code字段放在Order对象里， 然后通过一对多的&lt;collection&gt;标签把oiid和number放在OrderItem对象里，最后把pid,pname,price放进Product对象里。 package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Order; import com.how2java.pojo.OrderItem; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); listOrder(session); session.commit(); session.close(); } private static void listOrder(SqlSession session) { List&lt;Order&gt; os = session.selectList(&quot;listOrder&quot;); for (Order o : os) { System.out.println(o.getCode()); List&lt;OrderItem&gt; ois= o.getOrderItems(); for (OrderItem oi : ois) { System.out.format(&quot;\t%s\t%f\t%d%n&quot;, oi.getProduct().getName(),oi.getProduct().getPrice(),oi.getNumber()); } } } } 6.TestMybatis如图所示，建立了让订单000A和产品z建立了关系首先通过id分别获取Ordre对象和Product对象，然后创建一个新的OrderItem对象，接着设置Order，设置Product，设置数量，最后调用”addOrderItem” 对应的sql语句插入数据。 Order o1 = session.selectOne(&quot;getOrder&quot;, 1); Product p6 = session.selectOne(&quot;getProduct&quot;, 6); OrderItem oi = new OrderItem(); oi.setProduct(p6); oi.setOrder(o1); oi.setNumber(200); session.insert(&quot;addOrderItem&quot;, oi); addOrderItem调用insert into 语句插入一条OrderItem记录 &lt;insert id=&quot;addOrderItem&quot; parameterType=&quot;OrderItem&quot;&gt; insert into order_item_ values(null,#{order.id},#{product.id},#{number}) &lt;/insert&gt; package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Order; import com.how2java.pojo.OrderItem; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); addOrderItem(session); listOrder(session); session.commit(); session.close(); } private static void addOrderItem(SqlSession session) { Order o1 = session.selectOne(&quot;getOrder&quot;, 1); Product p6 = session.selectOne(&quot;getProduct&quot;, 6); OrderItem oi = new OrderItem(); oi.setProduct(p6); oi.setOrder(o1); oi.setNumber(200); session.insert(&quot;addOrderItem&quot;, oi); } private static void listOrder(SqlSession session) { List&lt;Order&gt; os = session.selectList(&quot;listOrder&quot;); for (Order o : os) { System.out.println(o.getCode()); List&lt;OrderItem&gt; ois = o.getOrderItems(); for (OrderItem oi : ois) { System.out.format(&quot;\t%s\t%f\t%d%n&quot;, oi.getProduct().getName(), oi.getProduct().getPrice(), oi.getNumber()); } } } } 7.删除如图所示，删除了订单00A和产品z的关系，再次查询，就看不到产品z了。删除关系的时候，通过订单id(1)和产品id(6)进行删除。其实所谓的删除关系，就是删除掉OrderItem记录。 package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Order; import com.how2java.pojo.OrderItem; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); deleteOrderItem(session); // addOrderItem(session); listOrder(session); session.commit(); session.close(); } private static void deleteOrderItem(SqlSession session) { Order o1 = session.selectOne(&quot;getOrder&quot;,1); Product p6 = session.selectOne(&quot;getProduct&quot;,6); OrderItem oi = new OrderItem(); oi.setProduct(p6); oi.setOrder(o1); session.delete(&quot;deleteOrderItem&quot;, oi); } private static void addOrderItem(SqlSession session) { Order o1 = session.selectOne(&quot;getOrder&quot;,1); Product p6 = session.selectOne(&quot;getProduct&quot;,6); OrderItem oi = new OrderItem(); oi.setProduct(p6); oi.setOrder(o1); oi.setNumber(200); session.insert(&quot;addOrderItem&quot;, oi); } private static void listOrder(SqlSession session) { List&lt;Order&gt; os = session.selectList(&quot;listOrder&quot;); for (Order o : os) { System.out.println(o.getCode()); List&lt;OrderItem&gt; ois= o.getOrderItems(); for (OrderItem oi : ois) { System.out.format(&quot;\t%s\t%f\t%d%n&quot;, oi.getProduct().getName(),oi.getProduct().getPrice(),oi.getNumber()); } } } }]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-一对多 多对一]]></title>
    <url>%2F2018%2F07%2F16%2FMybatis-%E4%B8%80%E5%AF%B9%E5%A4%9A-%E5%A4%9A%E5%AF%B9%E4%B8%80%2F</url>
    <content type="text"><![CDATA[一对多1.新增加产品表use how2java; create table product_( id int NOT NULL AUTO_INCREMENT, name varchar(30) DEFAULT NULL, price float DEFAULT 0, cid int , PRIMARY KEY (id) )AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; use how2java; delete from category_; INSERT INTO category_ VALUES (1,&apos;category1&apos;); INSERT INTO category_ VALUES (2,&apos;category2&apos;); delete from product_; INSERT INTO product_ VALUES (1,&apos;product a&apos;, 88.88, 1); INSERT INTO product_ VALUES (2,&apos;product b&apos;, 88.88, 1); INSERT INTO product_ VALUES (3,&apos;product c&apos;, 88.88, 1); INSERT INTO product_ VALUES (4,&apos;product x&apos;, 88.88, 2); INSERT INTO product_ VALUES (5,&apos;product y&apos;, 88.88, 2); INSERT INTO product_ VALUES (6,&apos;product z&apos;, 88.88, 2); 2.Product.javapackage com.how2java.pojo; public class Product { private int id; private String name; private float price; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public float getPrice() { return price; } public void setPrice(float price) { this.price = price; } @Override public String toString() { return &quot;Product [id=&quot; + id + &quot;, name=&quot; + name + &quot;, price=&quot; + price + &quot;]&quot;; } } 3.Category.javapackage com.how2java.pojo; import java.util.List; public class Category { private int id; private String name; List&lt;Product&gt; products; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public List&lt;Product&gt; getProducts() { return products; } public void setProducts(List&lt;Product&gt; products) { this.products = products; } @Override public String toString() { return &quot;Category [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;; } } 4.Category.mxl通过left join关联查询，对Category和Product表进行关联查询。与前面学习的有所区别，这里不是用的resultType, 而是resultMap，通过resultMap把数据取出来放在对应的 对象属性里注： Category的id 字段 和Product的id字段同名，Mybatis不知道谁是谁的，所以需要通过取别名cid,pid来区分。name字段同理。 &lt;!--column不做限制，可以为任意表的字段，而property须为type 定义的pojo属性--&gt; &lt;resultMap id=&quot;唯一的标识&quot; type=&quot;映射的pojo对象&quot;&gt; &lt;id column=&quot;表的主键字段，或者可以为查询语句中的别名字段&quot; jdbcType=&quot;字段类型&quot; property=&quot;映射pojo对象的主键属性&quot; /&gt; &lt;result column=&quot;表的一个字段（可以为任意表的一个字段）&quot; jdbcType=&quot;字段类型&quot; property=&quot;映射到pojo对象的一个属性（须为type定义的pojo对象中的一个属性）&quot;/&gt; &lt;association property=&quot;pojo的一个对象属性&quot; javaType=&quot;pojo关联的pojo对象&quot;&gt; &lt;id column=&quot;关联pojo对象对应表的主键字段&quot; jdbcType=&quot;字段类型&quot; property=&quot;关联pojo对象的主席属性&quot;/&gt; &lt;result column=&quot;任意表的字段&quot; jdbcType=&quot;字段类型&quot; property=&quot;关联pojo对象的属性&quot;/&gt; &lt;/association&gt; &lt;!-- 集合中的property须为oftype定义的pojo对象的属性--&gt; &lt;collection property=&quot;pojo的集合属性&quot; ofType=&quot;集合中的pojo对象&quot;&gt; &lt;id column=&quot;集合中pojo对象对应的表的主键字段&quot; jdbcType=&quot;字段类型&quot; property=&quot;集合中pojo对象的主键属性&quot; /&gt; &lt;result column=&quot;可以为任意表的字段&quot; jdbcType=&quot;字段类型&quot; property=&quot;集合中的pojo对象的属性&quot; /&gt; &lt;/collection&gt; &lt;/resultMap&gt; association 一对一,多对一级联collection 一对多级联 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;resultMap type=&quot;Category&quot; id=&quot;categoryBean&quot;&gt; &lt;id column=&quot;cid&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;cname&quot; property=&quot;name&quot; /&gt; &lt;!-- 一对多的关系 --&gt; &lt;!-- property: 指的是集合属性的值, ofType：指的是集合中元素的类型 --&gt; &lt;collection property=&quot;products&quot; ofType=&quot;Product&quot;&gt; &lt;id column=&quot;pid&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;pname&quot; property=&quot;name&quot; /&gt; &lt;result column=&quot;price&quot; property=&quot;price&quot; /&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;!-- 关联查询分类和产品表 --&gt; &lt;select id=&quot;listCategory&quot; resultMap=&quot;categoryBean&quot;&gt; select c.*, p.*, c.id &apos;cid&apos;, p.id &apos;pid&apos;, c.name &apos;cname&apos;, p.name &apos;pname&apos; from category_ c left join product_ p on c.id = p.cid &lt;/select&gt; &lt;/mapper&gt; 5.TestMybatispackage com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Category; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;); for (Category c : cs) { System.out.println(c); List&lt;Product&gt; ps = c.getProducts(); for (Product p : ps) { System.out.println(&quot;\t&quot;+p); } } session.commit(); session.close(); } } 多对一1.Product.javapackage com.how2java.pojo; public class Product { private int id; private String name; private float price; private Category category; public Category getCategory() { return category; } public void setCategory(Category category) { this.category = category; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public float getPrice() { return price; } public void setPrice(float price) { this.price = price; } @Override public String toString() { return &quot;Product [id=&quot; + id + &quot;, name=&quot; + name + &quot;, price=&quot; + price + &quot;]&quot;; } } 2.Product.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;resultMap type=&quot;Product&quot; id=&quot;productBean&quot;&gt; &lt;id column=&quot;pid&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;pname&quot; property=&quot;name&quot; /&gt; &lt;result column=&quot;price&quot; property=&quot;price&quot; /&gt; &lt;!-- 多对一的关系 --&gt; &lt;!-- property: 指的是属性名称, javaType：指的是属性的类型 --&gt; &lt;association property=&quot;category&quot; javaType=&quot;Category&quot;&gt; &lt;id column=&quot;cid&quot; property=&quot;id&quot;/&gt; &lt;result column=&quot;cname&quot; property=&quot;name&quot;/&gt; &lt;/association&gt; &lt;/resultMap&gt; &lt;!-- 根据id查询Product, 关联将Orders查询出来 --&gt; &lt;select id=&quot;listProduct&quot; resultMap=&quot;productBean&quot;&gt; select c.*, p.*, c.id &apos;cid&apos;, p.id &apos;pid&apos;, c.name &apos;cname&apos;, p.name &apos;pname&apos; from category_ c left join product_ p on c.id = p.cid &lt;/select&gt; &lt;/mapper&gt; 3.mybatis-config.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;mapper resource=&quot;com/how2java/pojo/Product.xml&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 4.TestMybatispackage com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Product; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); List&lt;Product&gt; ps = session.selectList(&quot;listProduct&quot;); for (Product p : ps) { System.out.println(p+&quot; 对应的分类是 \t &quot;+ p.getCategory()); } session.commit(); session.close(); } }]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-CRUD]]></title>
    <url>%2F2018%2F07%2F16%2FMybatis-CRUD%2F</url>
    <content type="text"><![CDATA[1.在入门的基础上进行2.Category.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;insert id=&quot;addCategory&quot; parameterType=&quot;Category&quot; &gt; insert into category_ ( name ) values (#{name}) &lt;/insert&gt; &lt;delete id=&quot;deleteCategory&quot; parameterType=&quot;Category&quot; &gt; delete from category_ where id= #{id} &lt;/delete&gt; &lt;select id=&quot;getCategory&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt; select * from category_ where id= #{id} &lt;/select&gt; &lt;update id=&quot;updateCategory&quot; parameterType=&quot;Category&quot; &gt; update category_ set name=#{name} where id=#{id} &lt;/update&gt; &lt;select id=&quot;listCategory&quot; resultType=&quot;Category&quot;&gt; select * from category_ &lt;/select&gt; &lt;/mapper&gt; 3.增加通过session.insert调用addCategory对应的SQL语句 Category c = new Category(); c.setName(&quot;新增加的Category&quot;); session.insert(&quot;addCategory&quot;,c); addCategory对应的插入sql语句，#{name}会自动获取c对象的name属性值 &lt;insert id=&quot;addCategory&quot; parameterType=&quot;Category&quot; &gt; insert into category_ ( name ) values (#{name}) &lt;/insert&gt; package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); Category c = new Category(); c.setName(&quot;新增加的Category&quot;); session.insert(&quot;addCategory&quot;,c); listAll(session); session.commit(); session.close(); } private static void listAll(SqlSession session) { List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;); for (Category c : cs) { System.out.println(c.getName()); } } } 4.删除删除id=6的对象 Category c = new Category(); c.setId(6); session.delete(&quot;deleteCategory&quot;,c); deleteCategory对应删除的sql语句 &lt;delete id=&quot;deleteCategory&quot; parameterType=&quot;Category&quot; &gt; delete from category_ where id= #{id} &lt;/delete&gt; package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); Category c = new Category(); c.setId(6); session.delete(&quot;deleteCategory&quot;,c); listAll(session); session.commit(); session.close(); } private static void listAll(SqlSession session) { List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;); for (Category c : cs) { System.out.println(c.getName()); } } } 5.获取通过session.selectOne获取id=3的记录 Category c= session.selectOne(&quot;getCategory&quot;,3); getCategory对应的sql语句： &lt;select id=&quot;getCategory&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt; select * from category_ where id= #{id} &lt;/select&gt; 这是mybatis 内置别名_int 代表 java中的基本类型intint 代表 java中的类类型Integer 6.修改通过session.update进行修改 session.update(“updateCategory”,c);updateCategory对应的sql语句： &lt;update id=&quot;updateCategory&quot; parameterType=&quot;Category&quot; &gt; update category_ set name=#{name} where id=#{id} &lt;/update&gt; package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); Category c= session.selectOne(&quot;getCategory&quot;,3); c.setName(&quot;修改了的Category名稱&quot;); session.update(&quot;updateCategory&quot;,c); listAll(session); session.commit(); session.close(); } private static void listAll(SqlSession session) { List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;); for (Category c : cs) { System.out.println(c.getName()); } } } 7.查询所有session.selectList执行查询语句 List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;); listCategory对应的sql语句 &lt;select id=&quot;listCategory&quot; resultType=&quot;Category&quot;&gt; select * from category_ &lt;/select&gt; package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); listAll(session); session.commit(); session.close(); } private static void listAll(SqlSession session) { List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;); for (Category c : cs) { System.out.println(c.getName()); } } }]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-更多查询]]></title>
    <url>%2F2018%2F07%2F16%2FMybatis-%E6%9B%B4%E5%A4%9A%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[1.在前一步的基础上进行2.模糊查询修改Category.xml，提供listCategoryByName查询语句 select * from category_ where name like concat(&apos;%&apos;,#{0},&apos;%&apos;) List&lt;Category&gt; cs = session.selectList(&quot;listCategoryByName&quot;,&quot;cat&quot;); Category.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;select id=&quot;listCategoryByName&quot; parameterType=&quot;string&quot; resultType=&quot;Category&quot;&gt; select * from category_ where name like concat(&apos;%&apos;,#{0},&apos;%&apos;) &lt;/select&gt; &lt;/mapper&gt; TestMybatis.java package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); List&lt;Category&gt; cs = session.selectList(&quot;listCategoryByName&quot;,&quot;cat&quot;); for (Category c : cs) { System.out.println(c.getName()); } session.commit(); session.close(); } } 3.多条件查询结合前面的模糊查询，多一个id&gt;多少的条件 Category.xml 准备sql语句 &lt;select id=&quot;listCategoryByIdAndName&quot; parameterType=&quot;map&quot; resultType=&quot;Category&quot;&gt; select * from category_ where id&gt; #{id} and name like concat(&apos;%&apos;,#{name},&apos;%&apos;) &lt;/select&gt; 测试代码 Map&lt;String,Object&gt; params = new HashMap&lt;&gt;(); params.put(&quot;id&quot;, 3); params.put(&quot;name&quot;, &quot;cat&quot;); List&lt;Category&gt; cs = session.selectList(&quot;listCategoryByIdAndName&quot;,params); Category.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;select id=&quot;listCategoryByName&quot; resultType=&quot;Category&quot;&gt; select * from category_ where name like concat(&apos;%&apos;,#{0},&apos;%&apos;) &lt;/select&gt; &lt;select id=&quot;listCategoryByIdAndName&quot; parameterType=&quot;map&quot; resultType=&quot;Category&quot;&gt; select * from category_ where id&gt; #{id} and name like concat(&apos;%&apos;,#{name},&apos;%&apos;) &lt;/select&gt; &lt;/mapper&gt; TestMybatis.java package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.HashMap; import java.util.List; import java.util.Map; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session = sqlSessionFactory.openSession(); Map&lt;String,Object&gt; params = new HashMap&lt;&gt;(); params.put(&quot;id&quot;, 3); params.put(&quot;name&quot;, &quot;cat&quot;); List&lt;Category&gt; cs = session.selectList(&quot;listCategoryByIdAndName&quot;,params); for (Category c : cs) { System.out.println(c.getName()); } session.commit(); session.close(); } }]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis-入门]]></title>
    <url>%2F2018%2F07%2F16%2FMybatis-%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[1.创建数据库create database how2java USE how2java; CREATE TABLE category_ ( id int(11) NOT NULL AUTO_INCREMENT, name varchar(32) DEFAULT NULL, PRIMARY KEY (id) ) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; USE how2java; INSERT INTO category_ VALUES (null,&apos;category1&apos;); INSERT INTO category_ VALUES (null,&apos;category2&apos;); 2.创建java工程 3.导入jar包 4.Category.java准备实体类Category，用于映射表category_ package com.how2java.pojo; public class Category { private int id; private String name; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } } 5.配置文件mybatis-config.xml在src目录下创建mybatis的主配置文件mybatis-config.xml其作用主要是提供连接数据库用的驱动，数据库名称，编码方式，账号密码 &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; 以及别名，自动扫描com.how2java.pojo下的类型，使得在后续配置文件Category.xml中使用resultType的时候，可以直接使用Category,而不必写全com.how2java.pojo.Category &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; 映射Category.xml &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;/mappers&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;typeAliases&gt; &lt;package name=&quot;com.how2java.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; 6.Category.xml在包com.how2java.pojo下，新建文件Category.xml namespace=&quot;com.how2java.pojo&quot; 命名空间是这样的：如果是com.how2java.pojo，那么调用listCategory的完整做法就应该是：session.selectList(“com.how2java.pojo.listCategory”);如果是sadfsafdsfs，那么调用listCategory的完整做法就应该是：session.selectList(“sadfsafdsfs.listCategory”); 表示命名空间是com.how2java.pojo，在后续调用sql语句的时候，会用到它里面定义了一条sql语句 select * from category_ 这条sql语句用id: listCategory 进行标示以供后续代码调用。 resultType=”Category” 表示返回的数据和Category关联起来，这里本应该使用的是 com.how2java.pojo.Category, 但是因为上一步配置了别名，所以直接使用Category就行了 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt; &lt;select id=&quot;listCategory&quot; resultType=&quot;Category&quot;&gt; select * from category_ &lt;/select&gt; &lt;/mapper&gt; 7.TestMybatis.java根据配置文件mybatis-config.xml得到sqlSessionFactory String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); 然后再根据sqlSessionFactory 得到session SqlSession session=sqlSessionFactory.openSession(); 最后通过session的selectList方法，调用sql语句listCategory。listCategory这个就是在配置文件Category.xml中那条sql语句设置的id。执行完毕之后，得到一个Category集合，遍历即可看到数据。 List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;); for (Category c : cs) { System.out.println(c.getName()); } session.selectList(“listCategory”); 也可以写成 session.selectList(“com.how2java.pojo.listCategory”); 效果一样。 package com.how2java; import java.io.IOException; import java.io.InputStream; import java.util.List; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import com.how2java.pojo.Category; public class TestMybatis { public static void main(String[] args) throws IOException { String resource = &quot;mybatis-config.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession session=sqlSessionFactory.openSession(); List&lt;Category&gt; cs=session.selectList(&quot;listCategory&quot;); for (Category c : cs) { System.out.println(c.getName()); } } } 8.基本原理图 应用程序找Mybatis要数据 mybatis从数据库中找来数据 2.1 通过mybatis-config.xml 定位哪个数据库 2.2 通过Category.xml执行对应的select语句 2.3 基于Category.xml把返回的数据库记录封装在Category对象中 2.4 把多个Category对象装在一个Category集合中 返回一个Category集合]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-注解]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[1.注释struts.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;!-- &lt;action name=&quot;showProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;show&quot;&gt; --&gt; &lt;!-- &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; --&gt; &lt;!-- &lt;/action&gt; --&gt; &lt;/package&gt; &lt;/struts&gt; 2.ProductAction然后就是在ProductAction类上面添加注解 在类前面添加3个注解 @Namespace(“/“) 表示访问路径，如果是@Namespace(“/test”)，那么访问的时候，就需要写成http://127.0.0.1:8080/struts/test/showProduct @ParentPackage(“struts-default”) 与配置文件中的struts-default相同，表示使用默认的一套拦截器 @Results({@Result(name=”show”, location=”/show.jsp”), @Result(name=”home”, location=”/index.jsp”)}) 预先定义多个results, “show” 返回”/show.jsp” , “home” 返回 “/index.jsp”.注： 这里并没有用到”home”,写出来的目的是为了演示这种定义多个result 的代码风格。 在show方法前加上注解： @Action(“showProduct”) 表示当访问路径是showProduct的时候，就会调用show方法 package com.how2java.action; import org.apache.struts2.convention.annotation.Action; import org.apache.struts2.convention.annotation.Namespace; import org.apache.struts2.convention.annotation.ParentPackage; import org.apache.struts2.convention.annotation.Result; import org.apache.struts2.convention.annotation.Results; import com.how2java.bean.Product; @Namespace(&quot;/&quot;) @ParentPackage(&quot;struts-default&quot;) @Results({@Result(name=&quot;show&quot;, location=&quot;/show.jsp&quot;), @Result(name=&quot;home&quot;, location=&quot;/index.jsp&quot;)}) public class ProductAction { private Product product; @Action(&quot;showProduct&quot;) public String show() { product = new Product(); product.setName(&quot;iphone7&quot;); return &quot;show&quot;; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } } 3.其他常用注解Namespace：指定命名空间。ParentPackage：指定父包。 Result：提供了Action结果的映射。（一个结果的映射）Results：“Result”注解列表ResultPath：指定结果页面的基路径。 Action：指定Action的访问URL。Actions：“Action”注解列表。 ExceptionMapping：指定异常映射。（映射一个声明异常）ExceptionMappings：一级声明异常的数组。 InterceptorRef：拦截器引用。InterceptorRefs：拦截器引用组。 4.测试http://127.0.0.1:8080/struts/showProduct]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-验证]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-%E9%AA%8C%E8%AF%81%2F</url>
    <content type="text"><![CDATA[表单验证1.在ProductAction中增加validate()方法在这个例子里，如果输入的name是空的，就会提示name can’t be empty注意： ProductAction类要继承 ActionSupport package com.how2java.action; import com.how2java.bean.Product; import com.opensymphony.xwork2.ActionSupport; public class ProductAction extends ActionSupport{ private Product product; public String show(){ product = new Product(); product.setName(&quot;iphone7&quot;); return &quot;show&quot;; } public String add(){ return &quot;show&quot;; } public void validate(){ if ( product.getName().length() == 0 ){ addFieldError( &quot;product.name&quot;, &quot;name can&apos;t be empty&quot; ); } } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } } 2.struts.xml这个配置的作用是如果validate校验没有通过，那么需要通过Input跳转到输入界面 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;showProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;show&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;addProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;add&quot;&gt; &lt;result name=&quot;input&quot;&gt;addProduct.jsp&lt;/result&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 在action中并没有方法的返回值为”input”，直接在Struts.xml中增加一个input的result，为什么会发生跳转？在执行add（）方法后，为什么validate（）方法能在跳转到show.jsp之前进行校验动作？ 因为struts内部在你看不见的地方定义了input 3.addProduct.jsp为了让错误提示信息显示成红色，增加struts的head标签 &lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt; &lt;html&gt; &lt;s:head/&gt; &lt;body&gt; &lt;s:form action=&quot;addProduct&quot;&gt; &lt;s:textfield name=&quot;product.name&quot; label=&quot;product name&quot; /&gt; &lt;s:submit value=&quot;Submit&quot; /&gt; &lt;/s:form&gt; &lt;/body&gt; &lt;/html&gt; 4.测试http://127.0.0.1:8080/struts/addProduct.jsp xml表单验证1.把ProductAction的validate()方法去掉把validate()去掉，免得混淆 2.新建文件ProductAction-validation.xml文件一定要放在和ProductAction相同的包下面文件命名必须是{actionname}-validation.xml &lt;!DOCTYPE validators PUBLIC &quot;-//OpenSymphony Group//XWork Validator 1.0.2//EN&quot; &quot;http://www.opensymphony.com/xwork/xwork-validator-1.0.2.dtd&quot;&gt; &lt;validators&gt; &lt;validator type=&quot;requiredstring&quot;&gt; &lt;param name=&quot;fieldname&quot;&gt;product.name&lt;/param&gt; &lt;message&gt;name is required.&lt;/message&gt; &lt;/validator&gt; &lt;/validators&gt; 3.测试同上]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-客户端跳转]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B7%B3%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[客户端跳转1.做好一切准备工作2.ProductAction.java新增addPage方法，返回“addPage” package com.how2java.action; import java.util.ArrayList; import java.util.List; import com.how2java.bean.Product; public class ProductAction { private Product product; private List&lt;Product&gt; products; private List&lt;Integer&gt; selectedProducts; public List&lt;Integer&gt; getSelectedProducts() { return selectedProducts; } public void setSelectedProducts(List&lt;Integer&gt; selectedProducts) { this.selectedProducts = selectedProducts; } public List&lt;Product&gt; getProducts() { return products; } public void setProducts(List&lt;Product&gt; products) { this.products = products; } public String show() { product = new Product(); product.setName(&quot;iphone7&quot;); return &quot;show&quot;; } public String add() { return &quot;show&quot;; } public String list() { products=new ArrayList(); selectedProducts = new ArrayList(); Product p1 = new Product(); p1.setId(1); p1.setName(&quot;product1&quot;); Product p2 = new Product(); p2.setId(2); p2.setName(&quot;product2&quot;); Product p3 = new Product(); p3.setId(3); p3.setName(&quot;product3&quot;); products.add(p1); products.add(p2); products.add(p3); selectedProducts.add(2); selectedProducts.add(3); return &quot;list&quot;; } public String addPage(){ return &quot;addPage&quot;; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } } 3.struts.xml配置客户端跳转在result标签里加上新的属性： type=”redirect” &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/constant&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;addPageProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;addPage&quot;&gt; &lt;result name=&quot;addPage&quot; type=&quot;redirect&quot;&gt;addProduct.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;showProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;show&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;addProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;add&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;listProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;list&quot;&gt; &lt;result name=&quot;list&quot;&gt;list.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 4.测试 客户端跳转传参1.做好一切准备工作2.ProductAction.java 准备name属性 在addPage()中设置name的值 package com.how2java.action; import java.util.ArrayList; import java.util.List; import com.how2java.bean.Product; public class ProductAction { private String name; public String getName() { return name; } public void setName(String name) { this.name = name; } private Product product; private List&lt;Product&gt; products; private List&lt;Integer&gt; selectedProducts; public List&lt;Integer&gt; getSelectedProducts() { return selectedProducts; } public void setSelectedProducts(List&lt;Integer&gt; selectedProducts) { this.selectedProducts = selectedProducts; } public List&lt;Product&gt; getProducts() { return products; } public void setProducts(List&lt;Product&gt; products) { this.products = products; } public String show() { product = new Product(); product.setName(&quot;iphone7&quot;); return &quot;show&quot;; } public String add() { return &quot;show&quot;; } public String list() { products=new ArrayList(); selectedProducts = new ArrayList(); Product p1 = new Product(); p1.setId(1); p1.setName(&quot;product1&quot;); Product p2 = new Product(); p2.setId(2); p2.setName(&quot;product2&quot;); Product p3 = new Product(); p3.setId(3); p3.setName(&quot;product3&quot;); products.add(p1); products.add(p2); products.add(p3); selectedProducts.add(2); selectedProducts.add(3); return &quot;list&quot;; } public String addPage(){ name = &quot;default name&quot;; return &quot;addPage&quot;; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } } 3.struts.xml设置参数传递增加?name=${name} &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/constant&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;addPageProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;addPage&quot;&gt; &lt;result name=&quot;addPage&quot; type=&quot;redirect&quot;&gt;addProduct.jsp?name=${name}&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;showProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;show&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;addProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;add&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;listProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;list&quot;&gt; &lt;result name=&quot;list&quot;&gt;list.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 4.addProduct.jsp&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;html&gt; &lt;form action=&quot;addProduct&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;product.name&quot; value=&quot;${param.name}&quot;&gt; &lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/html&gt; 5.测试http://127.0.0.1:8080/struts/addProduct.jsp?name=default name]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-拦截器]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-%E6%8B%A6%E6%88%AA%E5%99%A8%2F</url>
    <content type="text"><![CDATA[拦截器可以简单地看成是Struts中的”filter”拦截器可以拦截指定的Action，并且对Action进行相应的操作在本例里，拦截了ProductAction，并且注入了当前时间 1.做好一切准备工作2.ProductAction.java准备一个Date属性，用于被拦截器注入时间 package com.how2java.action; import java.util.ArrayList; import java.util.Date; import java.util.List; import com.how2java.bean.Category; import com.how2java.bean.Product; public class ProductAction { private Date date; public Date getDate() { return date; } public void setDate(Date date) { this.date = date; } private Product product; private List&lt;Category&gt; categories =new ArrayList(); public List&lt;Category&gt; getCategories() { return categories; } public void setCategories(List&lt;Category&gt; categories) { this.categories = categories; } public String show() { product = new Product(); product.setName(&quot;iphone7&quot;); return &quot;show&quot;; } public String add() { return &quot;show&quot;; } public String list() { Category category1 =new Category(); category1.setId(1); category1.setName(&quot;category1&quot;); Category category2 =new Category(); category2.setId(2); category2.setName(&quot;category2&quot;); categories.add(category1); categories.add(category2); List&lt;Product&gt; products1=new ArrayList(); Product p1 = new Product(); p1.setId(1); p1.setName(&quot;product1&quot;); Product p2 = new Product(); p2.setId(2); p2.setName(&quot;product2&quot;); Product p3 = new Product(); p3.setId(3); p3.setName(&quot;product3&quot;); products1.add(p1); products1.add(p2); products1.add(p3); List&lt;Product&gt; products2=new ArrayList(); Product p4 = new Product(); p4.setId(4); p4.setName(&quot;product4&quot;); Product p5 = new Product(); p5.setId(5); p5.setName(&quot;product5&quot;); Product p6 = new Product(); p6.setId(6); p6.setName(&quot;product6&quot;); products2.add(p4); products2.add(p5); products2.add(p6); category1.setProducts(products1); category2.setProducts(products2); return &quot;list&quot;; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } } 3.list.jsp用于显示时间 &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt; &lt;%@page isELIgnored=&quot;false&quot;%&gt; ${date} &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt; &lt;tr&gt; &lt;td&gt;id&lt;/td&gt; &lt;td&gt;name&lt;/td&gt; &lt;td&gt;products&lt;/td&gt; &lt;/tr&gt; &lt;s:iterator value=&quot;categories&quot; var=&quot;c&quot;&gt; &lt;tr&gt; &lt;td&gt;${c.id}&lt;/td&gt; &lt;td&gt;${c.name}&lt;/td&gt; &lt;td&gt; &lt;s:iterator value=&quot;#c.products&quot; var=&quot;p&quot;&gt; ${p.name}&lt;br/&gt; &lt;/s:iterator&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/s:iterator&gt; &lt;/table&gt; &lt;s:debug/&gt; 4.创建拦截器把拦截到的Action强制转换成 ProductAction，并设置当前时间（注入） package com.how2java.interceptor; import java.util.Date; import com.how2java.action.ProductAction; import com.opensymphony.xwork2.ActionInvocation; import com.opensymphony.xwork2.interceptor.AbstractInterceptor; public class DateInterceptor extends AbstractInterceptor { public String intercept(ActionInvocation invocation) throws Exception { ProductAction action = (ProductAction)invocation.getAction(); action.setDate(new Date()); return invocation.invoke(); } } 5.配置struts.xml10-12 声明dateInterceptor16 对ProductAction使用拦截器dateInterceptor17 一旦使用了自定义的拦截器，本来配置在action上的默认的拦截器就失效了。 所以需要再加上defaultStack &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/constant&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;interceptors&gt; &lt;interceptor name=&quot;dateInterceptor&quot; class=&quot;com.how2java.interceptor.DateInterceptor&quot; /&gt; &lt;/interceptors&gt; &lt;action name=&quot;*Product*&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;{1}&quot;&gt; &lt;interceptor-ref name=&quot;dateInterceptor&quot; /&gt; &lt;interceptor-ref name=&quot;defaultStack&quot; /&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;result name=&quot;list&quot;&gt;list.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 6.测试]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-通配符匹配]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作2.struts.xml*Product 表示所有以Product结尾的路径，都会匹配在这个Action上method={1}表示第一个通配符如果访问的是addProduct就会调用add方法如果访问的是listProduct就会调用list方法以此类推 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/constant&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;*Product&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;{1}&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;result name=&quot;list&quot;&gt;list.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 3.测试http://127.0.0.1:8080/struts/listProduct]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-调试]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-%E8%B0%83%E8%AF%95%2F</url>
    <content type="text"><![CDATA[1.访问页面如图所示，访问如下路径，可以看到当前struts配置了哪些Action可以使用http://127.0.0.1:8080/struts/config-browser/actionNames 2.访问页面有的时候jsp上不显示action传递过来的数据，有可能的原因是action并没有传递任何数据 这个时候我们就需要工具来查看action到底有没有传递数据 访问测试地址： http://127.0.0.1:8080/struts/listProduct list.jsp修改办法很简单，直接增加s:debug &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt; &lt;%@page isELIgnored=&quot;false&quot;%&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;id&lt;/td&gt; &lt;td&gt;name&lt;/td&gt; &lt;/tr&gt; &lt;s:iterator value=&quot;products&quot; var=&quot;p&quot;&gt; &lt;tr&gt; &lt;td&gt;${p.id}&lt;/td&gt; &lt;td&gt;${p.name}&lt;/td&gt; &lt;/tr&gt; &lt;/s:iterator&gt; &lt;/table&gt; &lt;s:debug/&gt;]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-标签]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[form1.addProduct.jspproduct.name是提交给后台action接收用的.也就是你在输入框中输入的内容;label中的值是页面输入框前面显示的内容 &lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt; &lt;html&gt; &lt;body&gt; &lt;s:form action=&quot;addProduct&quot;&gt; &lt;s:textfield name=&quot;product.name&quot; label=&quot;product name&quot; /&gt; &lt;s:submit value=&quot;Submit&quot; /&gt; &lt;/s:form&gt; &lt;/body&gt; &lt;/html&gt; iterator1.ProductAction 为ProductAction增加一个products属性，类型是List，并提供getter setter 为ProductAction增加一个list()方法，为products添加3个product对象，并返回“list” package com.how2java.action; import java.util.ArrayList; import java.util.List; import com.how2java.bean.Product; public class ProductAction { private Product product; private List&lt;Product&gt; products; public List&lt;Product&gt; getProducts() { return products; } public void setProducts(List&lt;Product&gt; products) { this.products = products; } public String show() { product = new Product(); product.setName(&quot;iphone7&quot;); return &quot;show&quot;; } public String add() { return &quot;show&quot;; } public String list() { products=new ArrayList(); Product p1 = new Product(); p1.setId(1); p1.setName(&quot;product1&quot;); Product p2 = new Product(); p2.setId(2); p2.setName(&quot;product2&quot;); Product p3 = new Product(); p3.setId(3); p3.setName(&quot;product3&quot;); products.add(p1); products.add(p2); products.add(p3); return &quot;list&quot;; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } } 2.struts.xml配置路径listProduct，并返回list.jsp &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/constant&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;showProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;show&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;addProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;add&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;listProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;list&quot;&gt; &lt;result name=&quot;list&quot;&gt;list.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 3.list.jsp使用s:iterator标签进行遍历value 表示集合var 表示遍历出来的元素st 表示遍历出来的元素状态st.index 当前行号 基0st.count 当前行号 基1st.first 是否是第一个元素st.last 是否是最后一个元素st.odd 是否是奇数st.even 是否是偶数 &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&gt; &lt;style&gt; table { border-collapse: collapse; } td { border: 1px solid gray; } &lt;/style&gt; &lt;table align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td&gt;id&lt;/td&gt; &lt;td&gt;name&lt;/td&gt; &lt;td&gt;st.index&lt;/td&gt; &lt;td&gt;st.count&lt;/td&gt; &lt;td&gt;st.first&lt;/td&gt; &lt;td&gt;st.last&lt;/td&gt; &lt;td&gt;st.odd&lt;/td&gt; &lt;td&gt;st.even&lt;/td&gt; &lt;/tr&gt; &lt;s:iterator value=&quot;products&quot; var=&quot;p&quot; status=&quot;st&quot;&gt; &lt;tr&gt; &lt;td&gt;${p.id}&lt;/td&gt; &lt;td&gt;${p.name}&lt;/td&gt; &lt;td&gt;${st.index}&lt;/td&gt; &lt;td&gt;${st.count}&lt;/td&gt; &lt;td&gt;${st.first}&lt;/td&gt; &lt;td&gt;${st.last}&lt;/td&gt; &lt;td&gt;${st.odd}&lt;/td&gt; &lt;td&gt;${st.even}&lt;/td&gt; &lt;/tr&gt; &lt;/s:iterator&gt; &lt;/table&gt; 4.测试 check1.ProductAction.java除了前例中准备的products再新增一个属性ListselectedProducts，用于存放哪些产品被选中了注意： ListselectedProducts 里放的是id，而不是对象 package com.how2java.action; import java.util.ArrayList; import java.util.List; import com.how2java.bean.Product; public class ProductAction { private Product product; private List&lt;Product&gt; products; private List&lt;Integer&gt; selectedProducts; public List&lt;Integer&gt; getSelectedProducts() { return selectedProducts; } public void setSelectedProducts(List&lt;Integer&gt; selectedProducts) { this.selectedProducts = selectedProducts; } public List&lt;Product&gt; getProducts() { return products; } public void setProducts(List&lt;Product&gt; products) { this.products = products; } public String show() { product = new Product(); product.setName(&quot;iphone7&quot;); return &quot;show&quot;; } public String add() { return &quot;show&quot;; } public String list() { products=new ArrayList(); selectedProducts = new ArrayList(); Product p1 = new Product(); p1.setId(1); p1.setName(&quot;product1&quot;); Product p2 = new Product(); p2.setId(2); p2.setName(&quot;product2&quot;); Product p3 = new Product(); p3.setId(3); p3.setName(&quot;product3&quot;); products.add(p1); products.add(p2); products.add(p3); selectedProducts.add(2); selectedProducts.add(3); return &quot;list&quot;; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } } 2.list.jsp使用s:checkboxlist标签value：哪些被选中name：提交到服务端用的名称list:用于遍历的集合listValue:显示的checkbox的名称listKey:checkbox的value &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&gt; &lt;%@page isELIgnored=&quot;false&quot;%&gt; &lt;s:checkboxlist value=&quot;selectedProducts&quot; name=&quot;product.id&quot; list=&quot;products&quot; listValue=&quot;name&quot; listKey=&quot;id&quot; /&gt; 3.测试 radio1.list.jsp在前例checkbox标签的基础上增加s:radio标签value表示：哪项被选中name表示：提交到服务端用的名称list:用于遍历的集合listValue:显示的radio的名称listKey:radio的value &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&gt; &lt;%@page isELIgnored=&quot;false&quot;%&gt; &lt;s:radio name=&quot;product.id&quot; value=&quot;2&quot; list=&quot;products&quot; listValue=&quot;name&quot; listKey=&quot;id&quot; /&gt; 2.测试 select1.list.jsp使用s:select标签name表示：提交到服务端用的名称list:用于遍历的集合listKey:每个option的valuelistValue:显示的名称multiple:true表示可以选中多行size=”3”表示默认显示3行value表示：哪些被选中 注: 可以增加一个属性 theme=”simple” 使得最后生成的最简单的风格的html，否则就会有一些奇奇怪怪的tr td或者直接在struts.xml中加一句 Servlet下载文件 &lt;constant name=&quot;struts.ui.theme&quot; value=&quot;simple&quot;/&gt; 注: 如果要增加class，需要使用属性: cssClass &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot;%&gt; &lt;%@page isELIgnored=&quot;false&quot;%&gt; &lt;s:select label=&quot;products&quot; name=&quot;product.id&quot; list=&quot;products&quot; listKey=&quot;id&quot; listValue=&quot;name&quot; multiple=&quot;true&quot; size=&quot;3&quot; value=&quot;selectedProducts&quot; /&gt; 2.测试多重迭代1.Category.javaCategory除了有id和name属性外，还有List属性表示category和product是一对多关系 package com.how2java.bean; import java.util.List; public class Category { int id; String name; List&lt;Product&gt; products; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public List&lt;Product&gt; getProducts() { return products; } public void setProducts(List&lt;Product&gt; products) { this.products = products; } } 2.ProductAction.java在list()中准备数据两个category，并且每个category对应3个product package com.how2java.action; import java.util.ArrayList; import java.util.List; import com.how2java.bean.Category; import com.how2java.bean.Product; public class ProductAction { private Product product; private List&lt;Category&gt; categories =new ArrayList(); public List&lt;Category&gt; getCategories() { return categories; } public void setCategories(List&lt;Category&gt; categories) { this.categories = categories; } public String show() { product = new Product(); product.setName(&quot;iphone7&quot;); return &quot;show&quot;; } public String add() { return &quot;show&quot;; } public String list() { Category category1 =new Category(); category1.setId(1); category1.setName(&quot;category1&quot;); Category category2 =new Category(); category2.setId(2); category2.setName(&quot;category2&quot;); categories.add(category1); categories.add(category2); List&lt;Product&gt; products1=new ArrayList(); Product p1 = new Product(); p1.setId(1); p1.setName(&quot;product1&quot;); Product p2 = new Product(); p2.setId(2); p2.setName(&quot;product2&quot;); Product p3 = new Product(); p3.setId(3); p3.setName(&quot;product3&quot;); products1.add(p1); products1.add(p2); products1.add(p3); List&lt;Product&gt; products2=new ArrayList(); Product p4 = new Product(); p4.setId(4); p4.setName(&quot;product4&quot;); Product p5 = new Product(); p5.setId(5); p5.setName(&quot;product5&quot;); Product p6 = new Product(); p6.setId(6); p6.setName(&quot;product6&quot;); products2.add(p4); products2.add(p5); products2.add(p6); category1.setProducts(products1); category2.setProducts(products2); return &quot;list&quot;; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } } 3.list.jsp遍历每一个category，接着把每个category下对应的products也遍历出来 &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt; &lt;%@page isELIgnored=&quot;false&quot;%&gt; &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt; &lt;tr&gt; &lt;td&gt;id&lt;/td&gt; &lt;td&gt;name&lt;/td&gt; &lt;td&gt;products&lt;/td&gt; &lt;/tr&gt; &lt;s:iterator value=&quot;categories&quot; var=&quot;c&quot;&gt; &lt;tr&gt; &lt;td&gt;${c.id}&lt;/td&gt; &lt;td&gt;${c.name}&lt;/td&gt; &lt;td&gt; &lt;s:iterator value=&quot;#c.products&quot; var=&quot;p&quot;&gt; ${p.name}&lt;br/&gt; &lt;/s:iterator&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/s:iterator&gt; &lt;/table&gt; &lt;s:debug/&gt; 4.测试]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-上传文件]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作2.upload.jsp上传一定要为form加上enctype=”multipart/form-data”，表示提交的数据是二进制的并且必须是method=”post” &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;%@page isELIgnored=&quot;false&quot; %&gt; &lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt; &lt;html&gt; &lt;body&gt; &lt;form action=&quot;upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; 上传文件 : &lt;input type=&quot;file&quot; name=&quot;doc&quot; /&gt; &lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 3.UploadAction.java在upload.jsp中file字段对应的name是“doc”所以在action中，必须准备3个属性，分别是File doc;String docFileName;String docContentType;属性名字不能使用其他的，必须基于“doc”然后为这3个属性提供getter setter package com.how2java.action; import java.io.File; import java.io.IOException; import java.util.UUID; import org.apache.commons.io.FileUtils; import org.apache.struts2.ServletActionContext; public class UploadAction { File doc; String docFileName; String docContentType; public File getDoc() { return doc; } public void setDoc(File doc) { this.doc = doc; } public String getDocFileName() { return docFileName; } public void setDocFileName(String docFileName) { this.docFileName = docFileName; } public String getDocContentType() { return docContentType; } public void setDocContentType(String docContentType) { this.docContentType = docContentType; } public String upload() { System.out.println(doc); System.out.println(docFileName); System.out.println(docContentType); return &quot;success&quot;; } } 4.struts.xml为upload路径配置UploadAction，并返回success.jsp &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;showProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;show&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;addProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;add&quot;&gt; &lt;result name=&quot;input&quot;&gt;addProduct.jsp&lt;/result&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;upload&quot; class=&quot;com.how2java.action.UploadAction&quot; method=&quot;upload&quot;&gt; &lt;result name=&quot;success&quot;&gt;success.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 5.success.jsp分别显示doc,docFileName,docContentType &lt;%@page isELIgnored=&quot;false&quot;%&gt; uploaded success ${doc} &lt;br/&gt; ${docFileName} &lt;br/&gt; ${docContentType} &lt;br/&gt; 6.struts.xml设置上传文件最大大小为10m &lt;constant name=&quot;struts.multipart.maxSize&quot; value=&quot;10240000&quot;/&gt; &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;constant name=&quot;struts.multipart.maxSize&quot; value=&quot;10240000&quot;/&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;showProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;show&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;addProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;add&quot;&gt; &lt;result name=&quot;input&quot;&gt;addProduct.jsp&lt;/result&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;upload&quot; class=&quot;com.how2java.action.UploadAction&quot; method=&quot;upload&quot;&gt; &lt;result name=&quot;success&quot;&gt;success.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt;]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-session]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-session%2F</url>
    <content type="text"><![CDATA[struts中的Session有两个一个是传统的servlet包下的HttpSession另一个是Struts中自己定义的Session 传统的servlet包下的session的获取办法是：ServletActionContext.getRequest().getSession();使用该方法，需要在eclipse的项目中导入servlet-api.jar， 新的Session的获取办法是Map m = ActionContext.getContext().getSession();这个session以Map类的形式出现，其中的值和HttpSession中的值是同步的 1.做好一切准备工作2.ProductAciton.java在add方法中获取Struts定义的SessionMap m = ActionContext.getContext().getSession();然后把name放进去 package com.how2java.action; import java.util.Map; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletRequestWrapper; import javax.servlet.http.HttpServletResponse; import org.apache.struts2.ServletActionContext; import org.apache.struts2.dispatcher.StrutsRequestWrapper; import com.how2java.bean.Product; import com.opensymphony.xwork2.ActionContext; import com.opensymphony.xwork2.ActionSupport; public class ProductAction extends ActionSupport { private Product product; public String show() { HttpServletRequest request = ServletActionContext.getRequest(); HttpServletResponse response = ServletActionContext.getResponse(); System.out.println(&quot;request:\t&quot; + request); System.out.println(&quot;response:\t&quot; + response); product = new Product(); product.setName(&quot;iphone7&quot;); return &quot;show&quot;; } public String add() { Map m = ActionContext.getContext().getSession(); m.put(&quot;name&quot;, product.getName()); return &quot;show&quot;; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } } 3.show.jsp&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;%@page isELIgnored=&quot;false&quot;%&gt; product.name: ${product.name} &lt;br&gt; session中的 name: ${name}]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-Error FilterStart]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-Error-FilterStart%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作2.log4j.xml 参考log4j教程 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE log4j:configuration PUBLIC &quot;-//log4j/log4j Configuration//EN&quot; &quot;log4j.dtd&quot;&gt; &lt;log4j:configuration xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt; &lt;appender name=&quot;STDOUT&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt; &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt; &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d %-5p %c.%M:%L - %m%n&quot;/&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!-- specify the logging level for loggers from other libraries --&gt; &lt;logger name=&quot;com.opensymphony&quot;&gt; &lt;level value=&quot;DEBUG&quot; /&gt; &lt;/logger&gt; &lt;logger name=&quot;org.apache.struts2&quot;&gt; &lt;level value=&quot;DEBUG&quot; /&gt; &lt;/logger&gt; &lt;!-- for all other loggers log only debug and above log messages --&gt; &lt;root&gt; &lt;priority value=&quot;INFO&quot;/&gt; &lt;appender-ref ref=&quot;STDOUT&quot; /&gt; &lt;/root&gt; &lt;/log4j:configuration&gt; 3.struts.xml在12行class故意打错 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/constant&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;showProduct&quot; class=&quot;com.how2java.action.ProductAction1&quot; method=&quot;show&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;addProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;add&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 4.测试]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-显示数据]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作 2.ProductAction.javapackage com.how2java.action; import com.how2java.bean.Product; public class ProductAction { private Product product; public String show() { product = new Product(); product.setName(&quot;iphone7&quot;); return &quot;show&quot;; } public String add() { System.out.println(&quot;product.name:&quot; + product.getName()); return &quot;show&quot;; } public Product getProduct() { return product; } public void setProduct(Product product) { this.product = product; } } 3.Product.javapackage com.how2java.bean; public class Product { int id; String name; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } } 4.struts.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;showProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;show&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;addProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;add&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 5.addProduct.jsp&lt;html&gt; &lt;form action=&quot;addProduct&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;product.name&quot;&gt; &lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/html&gt; 6.show.jsp&lt;%@page isELIgnored=&quot;false&quot;%&gt; ${product.name}]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-中文问题]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作2.addProduct.jsp提交数据的时候指定编码方式UTF-8并且设置form 的method为post方式 &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;html&gt; &lt;form action=&quot;addProduct&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;product.name&quot;&gt; &lt;br/&gt; &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt; &lt;/form&gt; &lt;/html&gt; 3.struts.xml&lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/constant&gt;指定解码方式为UTF-8 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/constant&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;showProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;show&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;action name=&quot;addProduct&quot; class=&quot;com.how2java.action.ProductAction&quot; method=&quot;add&quot;&gt; &lt;result name=&quot;show&quot;&gt;show.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 4.show.jsp&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;%@page isELIgnored=&quot;false&quot;%&gt; ${product.name} 同2，第一句指定UTF-8]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts-配置]]></title>
    <url>%2F2018%2F07%2F16%2Fstruts-%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1.创建项目创建dynamic web project项目 2.导入jar包3.新建web.xml其中配置了一个 Filter, 所有的请求都被过滤给了这个 Filterorg.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter &lt;web-app&gt; &lt;filter&gt; &lt;filter-name&gt;struts2&lt;/filter-name&gt; &lt;filter-class&gt; org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter &lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;struts2&lt;/filter-name&gt; &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt; &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;/web-app&gt; 4.配置struts.xml在src目录下创建一个struts.xml文件 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;&gt; &lt;struts&gt; &lt;package name=&quot;basicstruts&quot; extends=&quot;struts-default&quot;&gt; &lt;action name=&quot;index&quot;&gt; &lt;result&gt;index.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; 效果是在访问index时，服务器跳转到index.jsp 5.创建index.jsp内容：Hello Struts2 World 6.测试]]></content>
      <categories>
        <category>struts</category>
      </categories>
      <tags>
        <tag>struts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Log4j]]></title>
    <url>%2F2018%2F07%2F14%2FLog4j%2F</url>
    <content type="text"><![CDATA[此文仅仅用来记录个人对Log4j的学习。 入门1.导入log4j包2.使用Log4j 1.每句日志消耗的毫秒数 2.是在main线程里的日志 3.日志级别 一共有6个级别 TRACE DEBUG INFO WARN ERROR FATAL 4.是在log4j.TestLog4j这个类里的日志 5.日志输出级别范围可控制，只输出高于DEBUG级别的 package log4j; import org.apache.log4j.BasicConfigurator; import org.apache.log4j.Level; import org.apache.log4j.Logger; public class TestLog4j { static Logger logger = Logger.getLogger(TestLog4j.class); // 基于类的名称获取日志对象 public static void main(String[] args) throws InterruptedException { BasicConfigurator.configure(); //进行默认配置 logger.setLevel(Level.DEBUG); //设置日志输出级别 logger.trace(&quot;跟踪信息&quot;); logger.debug(&quot;调试信息&quot;); logger.info(&quot;输出信息&quot;); Thread.sleep(1000);//是为了便于观察前后日志输出的时间差 logger.warn(&quot;警告信息&quot;); logger.error(&quot;错误信息&quot;); logger.fatal(&quot;致命信息&quot;); //进行不同级别的日志输出 } } 3.效果 配置讲解1.log4j.properties log4j.rootLogger=debug, stdout, R #设置日志输出的等级为debug,低于debug就不会输出了 #设置日志输出到两种地方，分别叫做 stdout和 R log4j.appender.stdout=org.apache.log4j.ConsoleAppender #第一个地方stdout, 输出到控制台 log4j.appender.stdout.layout=org.apache.log4j.PatternLayout # Pattern to output the caller&apos;s file name and line number. log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n log4j.appender.R=org.apache.log4j.RollingFileAppender log4j.appender.R.File=example.log log4j.appender.R.MaxFileSize=100KB # Keep one backup file log4j.appender.R.MaxBackupIndex=5 # 第二个地方R, 以滚动的方式输出到文件，文件名是example.log,文件最大100k, 最多滚动5个文件 log4j.appender.R.layout=org.apache.log4j.PatternLayout log4j.appender.R.layout.ConversionPattern=%p %t %c - %m%n log4j日志输出格式一览： %c 输出日志信息所属的类的全名%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28%f 输出日志信息所属的类的类名%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行%m 输出代码中指定的信息，如log(message)中的message%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推%r 输出自应用启动到输出该日志信息所耗费的毫秒数%t 输出产生该日志事件的线程名 所以：%5p [%t] (%F:%L) - %m%n 就表示宽度是5的优先等级 线程名称 (文件名:行号) - 信息 回车换行 2.TestLog4j然后修改TestLog4j，并运行。 有两个效果 输出在控制台，并且格式有所变化，如图所示，会显示是哪个类的哪一行输出的信息 不仅仅在控制台有输出，在把日志输出到了 E:\project\log4j\example.log 这个位置 package log4j; import org.apache.log4j.Logger; import org.apache.log4j.PropertyConfigurator; public class TestLog4j { static Logger logger = Logger.getLogger(TestLog4j.class); public static void main(String[] args) throws InterruptedException { PropertyConfigurator.configure(&quot;e:\\project\\log4j\\src\\log4j.properties&quot;); for (int i = 0; i &lt; 5000; i++) { logger.trace(&quot;跟踪信息&quot;); logger.debug(&quot;调试信息&quot;); logger.info(&quot;输出信息&quot;); logger.warn(&quot;警告信息&quot;); logger.error(&quot;错误信息&quot;); logger.fatal(&quot;致命信息&quot;); } } } 与 Log4j入门 中的BasicConfigurator.configure();方式不同，采用指定配置文件 PropertyConfigurator.configure(“e:\project\log4j\src\log4j.properties”); Log4j的配置方式按照log4j.properties中的设置进行 log4j.xml1.log4j.xml除了使用log4j.properties，也可以使用xml格式进行配置。在src目录下装备log4j.xml文件 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE log4j:configuration PUBLIC &quot;-//log4j/log4j Configuration//EN&quot; &quot;log4j.dtd&quot;&gt; &lt;log4j:configuration xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt; &lt;appender name=&quot;STDOUT&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt; &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt; &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d %-5p %c.%M:%L - %m%n&quot;/&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!-- specify the logging level for loggers from other libraries --&gt; &lt;logger name=&quot;com.opensymphony&quot;&gt; &lt;level value=&quot;ERROR&quot; /&gt; &lt;/logger&gt; &lt;logger name=&quot;org.apache&quot;&gt; &lt;level value=&quot;ERROR&quot; /&gt; &lt;/logger&gt; &lt;logger name=&quot;org.hibernate&quot;&gt; &lt;level value=&quot;ERROR&quot; /&gt; &lt;/logger&gt; &lt;!-- for all other loggers log only debug and above log messages --&gt; &lt;root&gt; &lt;priority value=&quot;ERROR&quot;/&gt; &lt;appender-ref ref=&quot;STDOUT&quot; /&gt; &lt;/root&gt; 2.修改TestLog4j package log4j; import org.apache.log4j.Logger; import org.apache.log4j.PropertyConfigurator; public class TestLog4j { static Logger logger = Logger.getLogger(TestLog4j.class); public static void main(String[] args) throws InterruptedException { PropertyConfigurator.configure(&quot;e:\\project\\log4j\\src\\log4j.xml&quot;); for (int i = 0; i &lt; 5000; i++) { logger.trace(&quot;跟踪信息&quot;); logger.debug(&quot;调试信息&quot;); logger.info(&quot;输出信息&quot;); logger.warn(&quot;警告信息&quot;); logger.error(&quot;错误信息&quot;); logger.fatal(&quot;致命信息&quot;); } } }]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springmvc-上传文件]]></title>
    <url>%2F2018%2F07%2F14%2FSpringmvc-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作2.配置xml(1)配置web.xml 在web.xml中新增加一段 &lt;servlet-mapping&gt; &lt;servlet-name&gt;default&lt;/servlet-name&gt; &lt;url-pattern&gt;*.jpg&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; 表示允许访问*.jpg 为什么要加这一段呢？ 因为配置springmvc的servlet的时候，使用的路径是”/“，导致静态资源在默认情况下不能访问，所以要加上这一段，允许访问jpg。 并且必须加在springmvc的servlet之前 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;web-app version=&quot;2.4&quot; xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;default&lt;/servlet-name&gt; &lt;url-pattern&gt;*.jpg&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt; org.springframework.web.servlet.DispatcherServlet &lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;filter&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;/web-app&gt; (2)配置springmvc-servlet.xml 增加一段配置 &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;/&gt; 表示开放对上传功能的支持 3.upload.jsp上传页面，需要注意的是form 的两个属性必须提供method=”post” 和 enctype=”multipart/form-data” 缺一不可上传组件 增加一个属性 accept=”image/*” 表示只能选择图片进行上传留意 &lt;input type=&quot;file&quot; name=&quot;image&quot; accept=&quot;image/*&quot; /&gt; 这个image，后面会用到这个image &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot; isELIgnored=&quot;false&quot;%&gt; &lt;form action=&quot;uploadImage&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; 选择图片:&lt;input type=&quot;file&quot; name=&quot;image&quot; accept=&quot;image/*&quot; /&gt; &lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt; &lt;/form&gt; 4.UploadedImageFile在UploadedImageFile中封装MultipartFile类型的字段 image ，用于接受页面的注入 这里的字段 image必须和上传页面upload.jsp中的image &lt;input type=&quot;file&quot; name=&quot;image&quot; accept=&quot;image/*&quot; /&gt; 保持一致 package pojo; import org.springframework.web.multipart.MultipartFile; public class UploadedImageFile { MultipartFile image; public MultipartFile getImage() { return image; } public void setImage(MultipartFile image) { this.image = image; } } 5.UploadControllerpackage controller; import java.io.File; import java.io.IOException; import javax.servlet.http.HttpServletRequest; import org.apache.commons.lang.xwork.RandomStringUtils; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; import pojo.UploadedImageFile; @Controller public class UploadController { @RequestMapping(&quot;/uploadImage&quot;) public ModelAndView upload(HttpServletRequest request, UploadedImageFile file) throws IllegalStateException, IOException { String name = RandomStringUtils.randomAlphanumeric(10); //随机获得文件名 String newFileName = name + &quot;.jpg&quot;; File newFile = new File(request.getServletContext().getRealPath(&quot;/image&quot;), newFileName); //获取image目录 newFile.getParentFile().mkdirs(); file.getImage().transferTo(newFile);//复制文件 ModelAndView mav = new ModelAndView(&quot;showUploadedFile&quot;); //把生成的随机文件名提交给视图，用于后续的显示 mav.addObject(&quot;imageName&quot;, newFileName); return mav; } }]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springmvc-中文问题]]></title>
    <url>%2F2018%2F07%2F14%2FSpringmvc-%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作2.修改web.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;web-app version=&quot;2.4&quot; xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt; org.springframework.web.servlet.DispatcherServlet &lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;filter&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;/web-app&gt;]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springmvc-Session]]></title>
    <url>%2F2018%2F07%2F14%2FSpringmvc-Session%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作2.javabean实体类Product package pojo; public class Product { private int id; private String name; private float price; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public float getPrice() { return price; } public void setPrice(float price) { this.price = price; } } 3.jspcheck.jsp &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; session中记录的访问次数：${count} index.jsp &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; &lt;h1&gt;${message}&lt;/h1&gt; showProduct.jsp &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt; 产品名称： ${product.name}&lt;br&gt; 产品价格： ${product.price} 4.controllerIndexController.java ProductController.java 5.测试]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springmvc-接受表单数据]]></title>
    <url>%2F2018%2F07%2F14%2FSpringmvc-%E6%8E%A5%E5%8F%97%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作2.javabean实体类Product package pojo; public class Product { private int id; private String name; private float price; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public float getPrice() { return price; } public void setPrice(float price) { this.price = price; } } 3.addProduct.jsp 4.ProductController控制器ProductController，准备一个add方法映射/addProduct路径 为add方法准备一个Product 参数，用于接收注入 最后跳转到showProduct页面显示用户提交的数据 注： addProduct.jsp 提交的name和price会自动注入到参数 product里注： 参数product会默认被当做值加入到ModelAndView 中，相当于： mav.addObject(“product”,product); package controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.servlet.ModelAndView; import pojo.Product; @Controller public class ProductController { @RequestMapping(&quot;/addProduct&quot;) public ModelAndView add(Product product) throws Exception { ModelAndView mav = new ModelAndView(&quot;showProduct&quot;); return mav; } } 5.showProduct.jsp 6.测试]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springmvc-注解]]></title>
    <url>%2F2018%2F07%2F14%2FSpringmvc-%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作2.修改IndexController在类前面加上@Controller 表示该类是一个控制器在方法handleRequest 前面加上 @RequestMapping(“/index”) 表示路径/index会映射到该方法上注意：不再让IndexController实现Controller接口 package controller; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; @Controller public class IndexController { @RequestMapping(&quot;/index&quot;) public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { ModelAndView mav = new ModelAndView(&quot;index&quot;); mav.addObject(&quot;message&quot;, &quot;Hello Spring MVC&quot;); return mav; } } 3.修改springmvc-servlet.xml去掉映射相关的配置，因为已经使用注解方式了 增加&lt;context:component-scan base-package=”controller” /&gt;表示从包controller下扫描有@Controller注解的类 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt; &lt;context:component-scan base-package=&quot;controller&quot; /&gt; &lt;bean id=&quot;irViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/page/&quot; /&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt; &lt;/bean&gt; &lt;!-- &lt;bean id=&quot;simpleUrlHandlerMapping&quot; --&gt; &lt;!-- class=&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&gt; --&gt; &lt;!-- &lt;property name=&quot;mappings&quot;&gt; --&gt; &lt;!-- &lt;props&gt; --&gt; &lt;!-- &lt;prop key=&quot;/index&quot;&gt;indexController&lt;/prop&gt; --&gt; &lt;!-- &lt;/props&gt; --&gt; &lt;!-- &lt;/property&gt; --&gt; &lt;!-- &lt;/bean&gt; --&gt; &lt;!-- &lt;bean id=&quot;indexController&quot; class=&quot;controller.IndexController&quot;&gt;&lt;/bean&gt; --&gt; &lt;/beans&gt;]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springmvc-视图定位]]></title>
    <url>%2F2018%2F07%2F14%2FSpringmvc-%E8%A7%86%E5%9B%BE%E5%AE%9A%E4%BD%8D%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作2.修改springmvc-servlet.xml修改springmvc-servlet.xml，增加 &lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/page/&quot; /&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt; &lt;/bean&gt; 其作用是把视图约定在 /WEB-INF/page/*.jsp 这个位置 3.修改IndexController把IndexController类的这一行代码ModelAndView mav = new ModelAndView(“index.jsp”);修改为ModelAndView mav = new ModelAndView(“index”); package controller; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.mvc.Controller; public class IndexController implements Controller { public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { ModelAndView mav = new ModelAndView(&quot;index&quot;); mav.addObject(&quot;message&quot;, &quot;Hello Spring MVC&quot;); return mav; } } 4.移动index.jsp在WEB-INF下新建目录page把index.jsp移动到 WEB-INF/page 目录下]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springmvc-配置]]></title>
    <url>%2F2018%2F07%2F14%2FSpringmvc-%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1.新建项目springmvc在eclipse中新建项目springmvc，使用dynamic web project的方式 2.导入lib包3.web.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;web-app version=&quot;2.4&quot; xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt; org.springframework.web.servlet.DispatcherServlet &lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;/web-app&gt; 配置Spring MVC的入口 DispatcherServlet，把所有的请求都提交到该Servlet 4.springmvc-servlet.xml在WEB-INF目录下创建 springmvc-servlet.xmlspringmvc-servlet.xml 与上一步中的 springmvc 这是Spring MVC的 映射配置文件表示访问路径/index会交给id=indexController的bean处理id=indexController的bean配置为类：IndexController &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE beans PUBLIC &quot;-//SPRING//DTD BEAN//EN&quot; &quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;&gt; &lt;beans&gt; &lt;bean id=&quot;simpleUrlHandlerMapping&quot; class=&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&gt; &lt;property name=&quot;mappings&quot;&gt; &lt;props&gt; &lt;prop key=&quot;/index&quot;&gt;indexController&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id=&quot;indexController&quot; class=&quot;controller.IndexController&quot;&gt;&lt;/bean&gt; &lt;/beans&gt; 5.控制类 IndexController.xml控制类 IndexController实现接口Controller ，提供方法handleRequest处理请求 SpringMVC通过 ModelAndView 对象把模型和视图结合在一起 ModelAndView mav = new ModelAndView(&quot;index.jsp&quot;); mav.addObject(&quot;message&quot;, &quot;Hello Spring MVC&quot;); 表示视图是index.jsp模型数据是 message，内容是 “Hello Spring MVC” package controller; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.mvc.Controller; public class IndexController implements Controller { public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { ModelAndView mav = new ModelAndView(&quot;index.jsp&quot;); mav.addObject(&quot;message&quot;, &quot;Hello Spring MVC&quot;); return mav; } } 6.index.jsp 7.测试 8.原理 用户访问 /index 根据web.xml中的配置 所有的访问都会经过DispatcherServlet 根据 根据配置文件springmvc-servlet.xml ，访问路径/index会进入IndexController类 在IndexController中指定跳转到页面index.jsp，并传递message数据 在index.jsp中显示message信息]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring-AOP注解]]></title>
    <url>%2F2018%2F07%2F14%2FSpring-AOP%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作工程的创建，lib包的导入，javabean的准备 2.applicationContext.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt; &lt;context:component-scan base-package=&quot;com.how2java.aspect&quot;/&gt; &lt;context:component-scan base-package=&quot;com.how2java.service&quot;/&gt; &lt;aop:aspectj-autoproxy/&gt; &lt;/beans&gt; &lt;context:component-scan base-package=”com.how2java.aspect”/&gt; &lt;context:component-scan base-package=”com.how2java.service”/&gt;扫描包com.how2java.aspect和com.how2java.service，定位业务类和切面类aop:aspectj-autoproxy/找到被注解了的切面类，进行切面配置 3.javabeanpackage com.how2java.service; import org.springframework.stereotype.Component; @Component(&quot;s&quot;) public class ProductService { public void doSomeService(){ System.out.println(&quot;doSomeService&quot;); } } 4.日志切面 LoggerAspect 5.TestSpring]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring-AOP]]></title>
    <url>%2F2018%2F07%2F14%2FSpring-AOP%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作工程的创建，lib包的导入，javabean的准备 2.applicationContext.xml先给出代码: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt; &lt;bean name=&quot;c&quot; class=&quot;com.how2java.pojo.Category&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;yyy&quot; /&gt; &lt;/bean&gt; &lt;bean name=&quot;p&quot; class=&quot;com.how2java.pojo.Product&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;product1&quot; /&gt; &lt;property name=&quot;category&quot; ref=&quot;c&quot; /&gt; &lt;/bean&gt; &lt;bean name=&quot;s&quot; class=&quot;com.how2java.service.ProductService&quot;&gt; &lt;/bean&gt; &lt;bean id=&quot;loggerAspect&quot; class=&quot;com.how2java.aspect.LoggerAspect&quot;/&gt; &lt;aop:config&gt; &lt;aop:pointcut id=&quot;loggerCutpoint&quot; expression= &quot;execution(* com.how2java.service.ProductService.*(..)) &quot;/&gt; &lt;aop:aspect id=&quot;logAspect&quot; ref=&quot;loggerAspect&quot;&gt; &lt;aop:around pointcut-ref=&quot;loggerCutpoint&quot; method=&quot;log&quot;/&gt; &lt;/aop:aspect&gt; &lt;/aop:config&gt; &lt;/beans&gt; 这个配置过程是什么含义呢？ &lt;aop:pointcut id=”loggerCutpoint” expression=”execution( com.how2java.service.ProductService.(..)) “/&gt;这一句是声明切入点，切入点的 id 叫 loggerCutPoint ，用来标记这个切入点， 这个expression表示：满足expression中的方法调用之后，就会去进行切面操作，类似于触发了切面： 第一个 代表返回任意类型com.how2java.service.ProductService. 表示包名以 com.how2java.service.ProductService 开头的类的任意方法（第二个*表示任意方法，通配符肯定知道吧）(..) 表示方法的参数是任意数量和类型 简单说就是，只要com.how2java.service这个包中的ProductService类的任意一个函数被调用，不管你的返回值是什么，都会触发开关，我就会去执行切面，也就是辅助功能，但是辅助功能是什么呢，就是下面两句： &lt;aop:aspect id=&quot;logAspect&quot; ref=&quot;loggerAspect&quot;&gt; &lt;aop:after pointcut-ref=&quot;loggerCutpoint&quot; method=&quot;log&quot;/&gt; &lt;/aop:aspect&gt; 只要触发了开关就会去执行切面 id代表这个切面的名字，ref就是指的方法所在的类，method代表的就是方法的名字， pointcut-ref=”loggerCutpoint” 这个就是表示我这个切面是和上面的切点关联起来的（一个切点是可以关联多个切面的，一个切面只能关联一个方法），只要上面的切点被触发，我就会到这里来执行一些辅助功能。 after表示在切入点触发之后来执行我这个中断，当然也有before，一共有五个before，after，After-returning ，After-throwing，Around Before——在方法调用之前调用通知 After——在方法完成之后调用通知，无论方法执行成功与否 After-returning——在方法执行成功之后调用通知 After-throwing——在方法抛出异常后进行通知 Around——通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为 3.javabeanpackage com.how2java.service; public class ProductService { public void doSomeService(){ System.out.println(&quot;doSomeService&quot;); } } 4.日志切面 LoggerAspect 该日志切面的功能是 在调用核心功能之前和之后分别打印日志 5.TestSpring 运行测试，可以发现在编织之后，业务方法运行之前和之后分别会打印日志]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring-注解]]></title>
    <url>%2F2018%2F07%2F14%2FSpring-%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[1.做好一切准备工作 工程的创建，lib包的导入，javabean的准备 2.applicationContext.xml因为使用了注解方式（使用注解可以减少xml里的代码量所以不再需要在bean属性中写其他bean的属性了 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt; &lt;context:annotation-config/&gt; &lt;!-- 表示告诉Spring要用注解的方式进行配置 --&gt; &lt;bean name=&quot;c&quot; class=&quot;com.how2java.pojo.Category&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;category 1&quot; /&gt; &lt;/bean&gt; &lt;bean name=&quot;p&quot; class=&quot;com.how2java.pojo.Product&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;product1&quot; /&gt; &lt;!-- &lt;property name=&quot;category&quot; ref=&quot;c&quot; /&gt; 这个行为通过注解完成 --&gt; &lt;/bean&gt; &lt;/beans&gt; 除了这种方式还可以修改applicationContext.xml，什么都去掉，只新增： &lt;context:component-scan base-package=”com.how2java.pojo”/&gt; 其作用是告诉Spring，bean都放在com.how2java.pojo这个包下 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt; &lt;context:component-scan base-package=&quot;com.how2java.pojo&quot;/&gt; &lt;/beans&gt; 3.javabean有两个做好的类Category.java Product.java 若使用第2步第二种方式 package com.how2java.pojo; import org.springframework.stereotype.Component; @Component(&quot;c&quot;)//表明此类是bean public class Category { public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } private int id; private String name=&quot;category 1&quot;; } package com.how2java.pojo; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; @Component(&quot;p&quot;) public class Product { private int id; private String name=&quot;product 1&quot;; @Autowired private Category category; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Category getCategory() { return category; } public void setCategory(Category category) { this.category = category; } } //由于name在xml中的value没有给出，所以只能在bean里把name属性直接赋值 4.main]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring-配置]]></title>
    <url>%2F2018%2F07%2F13%2FSpring-%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1.新建Java工程2.lib包3.导入包project-&gt;properties-&gt;java build path-&gt;libaries-&gt;add external jars 之后开始编写4.applicationContext.xml在src目录下新建applicationContext.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xsi:schemaLocation=&quot; http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;&gt; &lt;bean name=&quot;c&quot; class=&quot;com.how2java.pojo.Category&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;category 1&quot; /&gt; &lt;/bean&gt; &lt;bean name=&quot;p&quot; class=&quot;com.how2java.pojo.Product&quot;&gt; &lt;property name=&quot;name&quot; value=&quot;product1&quot; /&gt; &lt;property name=&quot;category&quot; ref=&quot;c&quot; /&gt; &lt;/bean&gt; &lt;/beans&gt; 5.Category,Product javabean package com.how2java.pojo; public class Category { public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } private int id; private String name; } package com.how2java.pojo; public class Product { private int id; private String name; private Category category; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Category getCategory() { return category; } public void setCategory(Category category) { this.category = category; } } 6.TestSpring.javapackage com.how2java.test; import org.springframework.context.ApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; import com.how2java.pojo.Product; public class TestSpring { public static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(new String[] { &quot;applicationContext.xml&quot; }); Product p = (Product) context.getBean(&quot;p&quot;); System.out.println(p.getName()); System.out.println(p.getCategory().getName()); } }]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git]]></title>
    <url>%2F2018%2F07%2F13%2Fgit%2F</url>
    <content type="text"><![CDATA[1. 设置名字邮箱git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;email@example.com&quot; 2. git 初始化git init 通过git init命令把这个目录变成Git可以管理的仓库 3. 在仓库里写文件例 vi readme.txt 4. 添加文件在仓库git add file1.txt git add file2.txt file3.txt git commit -m &quot;add 3 files.&quot; // -m 备注 5. 显示当前仓库状态git status 6. 查看不同git diff 7. 跳回之前或者未来版本git reset --hard HEAD~100 //HEAD表示新版本 git reset --hard 1094a //写前几项就行 例如:跳回上个版本 git reset --hard HEAD~1 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL 8. 撤回(1) 未add 可以用 git checkout -- file 例如:git checkout -- readme.txt (2) 已add 可以用 git reset HEAD file 例如:git reset HEAD readme.txt (3) commit 可以用版本回退 9. 删除git rm file 例如:git rm test.txt 记得删除后提交 10. 从远程端克隆Github有仓库的前提下 使用 git clone 例如:git clone git@github.com:twh233/gitskills.git (仓库名:gitskills) 11. 分支git check -b dev 相当于创建并切换dev分支 git branch dev//生成分支 git checkout dev//切换 另外git branch 查看当前分支 git merge dev 合并dev到当前分支上 删除分支 git branch -d dev 12. 分支冲突在其他分支上对此文件修改提交之后 在master分支上对此文件又修改提交会出现分支冲突 git log --graph --pretty=oneline --abbrev-commit 查看分支合并情况 git checkout -b feature1 vi readme.txt git add readme.txt git commit -m &quot;AND simple&quot; git checkout master git add readme.txt git merge feature1 //此处会冲突 git status//冲突文件 vi readme.txt//解决冲突文件 git add readme.txt git commit -m &quot;conflict fixed&quot; 13. 合并分支git merge --no-ff -m &quot;merge with no-ff&quot; dev 合并分支为一个commit 所以写-m 备注 14. 远程仓库git remote git remote -v 详细信息 git push origin master //将该分支推送到远程库 15. 抓取分支git remote git remote -v 详细信息 git push origin master //将该分支推送到远程库 git branch --set-upstream-to=origin/dev dev//指定本地dev与origin/dev链接 (如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;) git pull git add env.txt git commit -m &quot;add env.txt&quot; git push origin dev 16. 临时储存git stash 可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作 git stash list 查看工作区储存的工作现场 一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除； 另一种方式是用git stash pop，恢复的同时把stash内容也删了 17. Bug分支git status git stash git checkout master git checkout -b 新分支//创建新分支 在master分支创建临时分支 vi readme.txt git add readme.txt git commit -m &quot;fix bug 101&quot; git checkout master git merge --no-ff -m &quot;merged bug fix 101&quot; 新分支 git checkout dev //切回之前工作分支 git stash git stash list 18. Feature 分支git checkout -b feature-vulcan git add 1.py git commit -m &quot;add new feature&quot; git checkout dev //切回dev 准备合并 //此时废弃feature-vulcan git branch -d feature-vulcan git branch -D feature-vulcan 19. 分支直线git rebase 20. 创建标签(1)正常打标签 git checkout master git tag v1.0 (2)之前标签忘了打 git log --pretty=oneline --abbrev-commit 查看日志之后 看commit id git tag v0.9 commit id (3)打标签时带说明 git tag -a v0.1 -m &quot;version 0.1 released&quot; commit id// -a 指定标签名 -m 指定说明文字 git tag //查看所有标签 git show v0.9 //查看单个标签 21. 操作标签(1) 删除标签 git tag -d v0.1 git push origin :refs/tags/v0.9 (2) 推送标签 git push origin v1.0 git push origin --tags 一次性推送 22. 自定义gitgit config --global alias.自定义 命令名 例:git config --global alias.ci commit git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html颜色选择]]></title>
    <url>%2F2018%2F06%2F21%2Fhtml%E9%A2%9C%E8%89%B2%E9%80%89%E6%8B%A9%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664&lt;DIV&gt;&lt;/DIV&gt; &lt;DIV align=center&gt; &lt;TABLE cellSpacing=0 width=760 border=1&gt; &lt;TBODY&gt; &lt;TR&gt; &lt;TD width=60 bgColor=#000000&gt;&lt;/TD&gt; &lt;TD width=50&gt;#000000&lt;/TD&gt; &lt;TD width=60 bgColor=#2f0000&gt;&lt;/TD&gt; &lt;TD width=50&gt;#2F0000&lt;/TD&gt; &lt;TD width=60 bgColor=#600030&gt;&lt;/TD&gt; &lt;TD width=50&gt;#600030&lt;/TD&gt; &lt;TD width=60 bgColor=#460046&gt;&lt;/TD&gt; &lt;TD width=50&gt;#460046&lt;/TD&gt; &lt;TD width=60 bgColor=#28004d&gt;&lt;/TD&gt; &lt;TD width=50&gt;#28004D&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#272727&gt;&lt;/TD&gt; &lt;TD&gt;#272727&lt;/TD&gt; &lt;TD bgColor=#4d0000&gt;&lt;/TD&gt; &lt;TD&gt;#4D0000&lt;/TD&gt; &lt;TD bgColor=#820041&gt;&lt;/TD&gt; &lt;TD&gt;#820041&lt;/TD&gt; &lt;TD bgColor=#5e005e&gt;&lt;/TD&gt; &lt;TD&gt;#5E005E&lt;/TD&gt; &lt;TD bgColor=#3a006f&gt;&lt;/TD&gt; &lt;TD&gt;#3A006F&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#3c3c3c&gt;&lt;/TD&gt; &lt;TD&gt;#3C3C3C&lt;/TD&gt; &lt;TD bgColor=#600000&gt;&lt;/TD&gt; &lt;TD&gt;#600000&lt;/TD&gt; &lt;TD bgColor=#9f0050&gt;&lt;/TD&gt; &lt;TD&gt;#9F0050&lt;/TD&gt; &lt;TD bgColor=#750075&gt;&lt;/TD&gt; &lt;TD&gt;#750075&lt;/TD&gt; &lt;TD bgColor=#4b0091&gt;&lt;/TD&gt; &lt;TD&gt;#4B0091&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#4f4f4f&gt;&lt;/TD&gt; &lt;TD&gt;#4F4F4F&lt;/TD&gt; &lt;TD bgColor=#750000&gt;&lt;/TD&gt; &lt;TD&gt;#750000&lt;/TD&gt; &lt;TD bgColor=#bf0060&gt;&lt;/TD&gt; &lt;TD&gt;#BF0060&lt;/TD&gt; &lt;TD bgColor=#930093&gt;&lt;/TD&gt; &lt;TD&gt;#930093&lt;/TD&gt; &lt;TD bgColor=#5b00ae&gt;&lt;/TD&gt; &lt;TD&gt;#5B00AE&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#5b5b5b&gt;&lt;/TD&gt; &lt;TD&gt;#5B5B5B&lt;/TD&gt; &lt;TD bgColor=#930000&gt;&lt;/TD&gt; &lt;TD&gt;#930000&lt;/TD&gt; &lt;TD bgColor=#d9006c&gt;&lt;/TD&gt; &lt;TD&gt;#D9006C&lt;/TD&gt; &lt;TD bgColor=#ae00ae&gt;&lt;/TD&gt; &lt;TD&gt;#AE00AE&lt;/TD&gt; &lt;TD bgColor=#6f00d2&gt;&lt;/TD&gt; &lt;TD&gt;#6F00D2&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#6c6c6c&gt;&lt;/TD&gt; &lt;TD&gt;#6C6C6C&lt;/TD&gt; &lt;TD bgColor=#ae0000&gt;&lt;/TD&gt; &lt;TD&gt;#AE0000&lt;/TD&gt; &lt;TD bgColor=#f00078&gt;&lt;/TD&gt; &lt;TD&gt;#F00078&lt;/TD&gt; &lt;TD bgColor=#d200d2&gt;&lt;/TD&gt; &lt;TD&gt;#D200D2&lt;/TD&gt; &lt;TD bgColor=#8600ff&gt;&lt;/TD&gt; &lt;TD&gt;#8600FF&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#7b7b7b&gt;&lt;/TD&gt; &lt;TD&gt;#7B7B7B&lt;/TD&gt; &lt;TD bgColor=#ce0000&gt;&lt;/TD&gt; &lt;TD&gt;#CE0000&lt;/TD&gt; &lt;TD bgColor=#ff0080&gt;&lt;/TD&gt; &lt;TD&gt;#FF0080&lt;/TD&gt; &lt;TD bgColor=#e800e8&gt;&lt;/TD&gt; &lt;TD&gt;#E800E8&lt;/TD&gt; &lt;TD bgColor=#921aff&gt;&lt;/TD&gt; &lt;TD&gt;#921AFF&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#8e8e8e&gt;&lt;/TD&gt; &lt;TD&gt;#8E8E8E&lt;/TD&gt; &lt;TD bgColor=#ea0000&gt;&lt;/TD&gt; &lt;TD&gt;#EA0000&lt;/TD&gt; &lt;TD bgColor=#ff359a&gt;&lt;/TD&gt; &lt;TD&gt;#FF359A&lt;/TD&gt; &lt;TD bgColor=#ff00ff&gt;&lt;/TD&gt; &lt;TD&gt;#FF00FF&lt;/TD&gt; &lt;TD bgColor=#9f35ff&gt;&lt;/TD&gt; &lt;TD&gt;#9F35FF&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#9d9d9d&gt;&lt;/TD&gt; &lt;TD&gt;#9D9D9D&lt;/TD&gt; &lt;TD bgColor=#ff0000&gt;&lt;/TD&gt; &lt;TD&gt;#FF0000&lt;/TD&gt; &lt;TD bgColor=#ff60af&gt;&lt;/TD&gt; &lt;TD&gt;#FF60AF&lt;/TD&gt; &lt;TD bgColor=#ff44ff&gt;&lt;/TD&gt; &lt;TD&gt;#FF44FF&lt;/TD&gt; &lt;TD bgColor=#b15bff&gt;&lt;/TD&gt; &lt;TD&gt;#B15BFF&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#adadad&gt;&lt;/TD&gt; &lt;TD&gt;#ADADAD&lt;/TD&gt; &lt;TD bgColor=#ff2d2d&gt;&lt;/TD&gt; &lt;TD&gt;#FF2D2D&lt;/TD&gt; &lt;TD bgColor=#ff79bc&gt;&lt;/TD&gt; &lt;TD&gt;#FF79BC&lt;/TD&gt; &lt;TD bgColor=#ff77ff&gt;&lt;/TD&gt; &lt;TD&gt;#FF77FF&lt;/TD&gt; &lt;TD bgColor=#be77ff&gt;&lt;/TD&gt; &lt;TD&gt;#BE77FF&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#bebebe&gt;&lt;/TD&gt; &lt;TD&gt;#BEBEBE&lt;/TD&gt; &lt;TD bgColor=#ff5151&gt;&lt;/TD&gt; &lt;TD&gt;#FF5151&lt;/TD&gt; &lt;TD bgColor=#ff95ca&gt;&lt;/TD&gt; &lt;TD&gt;#FF95CA&lt;/TD&gt; &lt;TD bgColor=#ff8eff&gt;&lt;/TD&gt; &lt;TD&gt;#FF8EFF&lt;/TD&gt; &lt;TD bgColor=#ca8eff&gt;&lt;/TD&gt; &lt;TD&gt;#CA8EFF&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#d0d0d0&gt;&lt;/TD&gt; &lt;TD&gt;#d0d0d0&lt;/TD&gt; &lt;TD bgColor=#ff7575&gt;&lt;/TD&gt; &lt;TD&gt;#ff7575&lt;/TD&gt; &lt;TD bgColor=#ffaad5&gt;&lt;/TD&gt; &lt;TD&gt;#ffaad5&lt;/TD&gt; &lt;TD bgColor=#ffa6ff&gt;&lt;/TD&gt; &lt;TD&gt;#ffa6ff&lt;/TD&gt; &lt;TD bgColor=#d3a4ff&gt;&lt;/TD&gt; &lt;TD&gt;#d3a4ff&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#e0e0e0&gt;&lt;/TD&gt; &lt;TD&gt;#E0E0E0&lt;/TD&gt; &lt;TD bgColor=#ff9797&gt;&lt;/TD&gt; &lt;TD&gt;#FF9797&lt;/TD&gt; &lt;TD bgColor=#ffc1e0&gt;&lt;/TD&gt; &lt;TD&gt;#FFC1E0&lt;/TD&gt; &lt;TD bgColor=#ffbfff&gt;&lt;/TD&gt; &lt;TD&gt;#FFBFFF&lt;/TD&gt; &lt;TD bgColor=#dcb5ff&gt;&lt;/TD&gt; &lt;TD&gt;#DCB5FF&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#f0f0f0&gt;&lt;/TD&gt; &lt;TD&gt;#F0F0F0&lt;/TD&gt; &lt;TD bgColor=#ffb5b5&gt;&lt;/TD&gt; &lt;TD&gt;#FFB5B5&lt;/TD&gt; &lt;TD bgColor=#ffd9ec&gt;&lt;/TD&gt; &lt;TD&gt;#FFD9EC&lt;/TD&gt; &lt;TD bgColor=#ffd0ff&gt;&lt;/TD&gt; &lt;TD&gt;#FFD0FF&lt;/TD&gt; &lt;TD bgColor=#e6caff&gt;&lt;/TD&gt; &lt;TD&gt;#E6CAFF&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#fcfcfc&gt;&lt;/TD&gt; &lt;TD&gt;#FCFCFC&lt;/TD&gt; &lt;TD bgColor=#ffd2d2&gt;&lt;/TD&gt; &lt;TD&gt;#FFD2D2&lt;/TD&gt; &lt;TD bgColor=#ffecf5&gt;&lt;/TD&gt; &lt;TD&gt;#FFECF5&lt;/TD&gt; &lt;TD bgColor=#ffe6ff&gt;&lt;/TD&gt; &lt;TD&gt;#FFE6FF&lt;/TD&gt; &lt;TD bgColor=#f1e1ff&gt;&lt;/TD&gt; &lt;TD&gt;#F1E1FF&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#ffffff&gt;&lt;/TD&gt; &lt;TD&gt;#FFFFFF&lt;/TD&gt; &lt;TD bgColor=#ffecec&gt;&lt;/TD&gt; &lt;TD&gt;#FFECEC&lt;/TD&gt; &lt;TD bgColor=#fff7fb&gt;&lt;/TD&gt; &lt;TD&gt;#FFF7FB&lt;/TD&gt; &lt;TD bgColor=#fff7ff&gt;&lt;/TD&gt; &lt;TD&gt;#FFF7FF&lt;/TD&gt; &lt;TD bgColor=#faf4ff&gt;&lt;/TD&gt; &lt;TD&gt;#FAF4FF&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#000079&gt;&lt;/TD&gt; &lt;TD&gt;#000079&lt;/TD&gt; &lt;TD bgColor=#000079&gt;&lt;/TD&gt; &lt;TD&gt;#000079&lt;/TD&gt; &lt;TD bgColor=#003e3e&gt;&lt;/TD&gt; &lt;TD&gt;#003E3E&lt;/TD&gt; &lt;TD bgColor=#006030&gt;&lt;/TD&gt; &lt;TD&gt;#006030&lt;/TD&gt; &lt;TD bgColor=#006000&gt;&lt;/TD&gt; &lt;TD&gt;#006000&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#000093&gt;&lt;/TD&gt; &lt;TD&gt;#000093&lt;/TD&gt; &lt;TD bgColor=#003d79&gt;&lt;/TD&gt; &lt;TD&gt;#003D79&lt;/TD&gt; &lt;TD bgColor=#005757&gt;&lt;/TD&gt; &lt;TD&gt;#005757&lt;/TD&gt; &lt;TD bgColor=#01814a&gt;&lt;/TD&gt; &lt;TD&gt;#01814A&lt;/TD&gt; &lt;TD bgColor=#007500&gt;&lt;/TD&gt; &lt;TD&gt;#007500&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#0000c6&gt;&lt;/TD&gt; &lt;TD&gt;#0000C6&lt;/TD&gt; &lt;TD bgColor=#004b97&gt;&lt;/TD&gt; &lt;TD&gt;#004B97&lt;/TD&gt; &lt;TD bgColor=#007979&gt;&lt;/TD&gt; &lt;TD&gt;#007979&lt;/TD&gt; &lt;TD bgColor=#019858&gt;&lt;/TD&gt; &lt;TD&gt;#019858&lt;/TD&gt; &lt;TD bgColor=#009100&gt;&lt;/TD&gt; &lt;TD&gt;#009100&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#0000c6&gt;&lt;/TD&gt; &lt;TD&gt;#0000C6&lt;/TD&gt; &lt;TD bgColor=#005ab5&gt;&lt;/TD&gt; &lt;TD&gt;#005AB5&lt;/TD&gt; &lt;TD bgColor=#009393&gt;&lt;/TD&gt; &lt;TD&gt;#009393&lt;/TD&gt; &lt;TD bgColor=#01b468&gt;&lt;/TD&gt; &lt;TD&gt;#01B468&lt;/TD&gt; &lt;TD bgColor=#00a600&gt;&lt;/TD&gt; &lt;TD&gt;#00A600&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#0000e3&gt;&lt;/TD&gt; &lt;TD&gt;#0000E3&lt;/TD&gt; &lt;TD bgColor=#0066cc&gt;&lt;/TD&gt; &lt;TD&gt;#0066CC&lt;/TD&gt; &lt;TD bgColor=#00aeae&gt;&lt;/TD&gt; &lt;TD&gt;#00AEAE&lt;/TD&gt; &lt;TD bgColor=#02c874&gt;&lt;/TD&gt; &lt;TD&gt;#02C874&lt;/TD&gt; &lt;TD bgColor=#00bb00&gt;&lt;/TD&gt; &lt;TD&gt;#00BB00&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#2828ff&gt;&lt;/TD&gt; &lt;TD&gt;#2828FF&lt;/TD&gt; &lt;TD bgColor=#0072e3&gt;&lt;/TD&gt; &lt;TD&gt;#0072E3&lt;/TD&gt; &lt;TD bgColor=#00caca&gt;&lt;/TD&gt; &lt;TD&gt;#00CACA&lt;/TD&gt; &lt;TD bgColor=#02df82&gt;&lt;/TD&gt; &lt;TD&gt;#02DF82&lt;/TD&gt; &lt;TD bgColor=#00db00&gt;&lt;/TD&gt; &lt;TD&gt;#00DB00&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#4a4aff&gt;&lt;/TD&gt; &lt;TD&gt;#4A4AFF&lt;/TD&gt; &lt;TD bgColor=#0080ff&gt;&lt;/TD&gt; &lt;TD&gt;#0080FF&lt;/TD&gt; &lt;TD bgColor=#00e3e3&gt;&lt;/TD&gt; &lt;TD&gt;#00E3E3&lt;/TD&gt; &lt;TD bgColor=#02f78e&gt;&lt;/TD&gt; &lt;TD&gt;#02F78E&lt;/TD&gt; &lt;TD bgColor=#00ec00&gt;&lt;/TD&gt; &lt;TD&gt;#00EC00&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#6a6aff&gt;&lt;/TD&gt; &lt;TD&gt;#6A6AFF&lt;/TD&gt; &lt;TD bgColor=#2894ff&gt;&lt;/TD&gt; &lt;TD&gt;#2894FF&lt;/TD&gt; &lt;TD bgColor=#00ffff&gt;&lt;/TD&gt; &lt;TD&gt;#00FFFF&lt;/TD&gt; &lt;TD bgColor=#1afd9c&gt;&lt;/TD&gt; &lt;TD&gt;#1AFD9C&lt;/TD&gt; &lt;TD bgColor=#28ff28&gt;&lt;/TD&gt; &lt;TD&gt;#28FF28&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#7d7dff&gt;&lt;/TD&gt; &lt;TD&gt;#7D7DFF&lt;/TD&gt; &lt;TD bgColor=#46a3ff&gt;&lt;/TD&gt; &lt;TD&gt;#46A3FF&lt;/TD&gt; &lt;TD bgColor=#4dffff&gt;&lt;/TD&gt; &lt;TD&gt;#4DFFFF&lt;/TD&gt; &lt;TD bgColor=#4efeb3&gt;&lt;/TD&gt; &lt;TD&gt;#4EFEB3&lt;/TD&gt; &lt;TD bgColor=#53ff53&gt;&lt;/TD&gt; &lt;TD&gt;#53FF53&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#9393ff&gt;&lt;/TD&gt; &lt;TD&gt;#9393FF&lt;/TD&gt; &lt;TD bgColor=#66b3ff&gt;&lt;/TD&gt; &lt;TD&gt;#66B3FF&lt;/TD&gt; &lt;TD bgColor=#80ffff&gt;&lt;/TD&gt; &lt;TD&gt;#80FFFF&lt;/TD&gt; &lt;TD bgColor=#7afec6&gt;&lt;/TD&gt; &lt;TD&gt;#7AFEC6&lt;/TD&gt; &lt;TD bgColor=#79ff79&gt;&lt;/TD&gt; &lt;TD&gt;#79FF79&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#aaaaff&gt;&lt;/TD&gt; &lt;TD&gt;#AAAAFF&lt;/TD&gt; &lt;TD bgColor=#84c1ff&gt;&lt;/TD&gt; &lt;TD&gt;#84C1FF&lt;/TD&gt; &lt;TD bgColor=#a6ffff&gt;&lt;/TD&gt; &lt;TD&gt;#A6FFFF&lt;/TD&gt; &lt;TD bgColor=#96fed1&gt;&lt;/TD&gt; &lt;TD&gt;#96FED1&lt;/TD&gt; &lt;TD bgColor=#93ff93&gt;&lt;/TD&gt; &lt;TD&gt;#93FF93&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#b9b9ff&gt;&lt;/TD&gt; &lt;TD&gt;#B9B9FF&lt;/TD&gt; &lt;TD bgColor=#97cbff&gt;&lt;/TD&gt; &lt;TD&gt;#97CBFF&lt;/TD&gt; &lt;TD bgColor=#bbffff&gt;&lt;/TD&gt; &lt;TD&gt;#BBFFFF&lt;/TD&gt; &lt;TD bgColor=#adfedc&gt;&lt;/TD&gt; &lt;TD&gt;#ADFEDC&lt;/TD&gt; &lt;TD bgColor=#a6ffa6&gt;&lt;/TD&gt; &lt;TD&gt;#A6FFA6&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#ceceff&gt;&lt;/TD&gt; &lt;TD&gt;#CECEFF&lt;/TD&gt; &lt;TD bgColor=#acd6ff&gt;&lt;/TD&gt; &lt;TD&gt;#ACD6FF&lt;/TD&gt; &lt;TD bgColor=#caffff&gt;&lt;/TD&gt; &lt;TD&gt;#CAFFFF&lt;/TD&gt; &lt;TD bgColor=#c1ffe4&gt;&lt;/TD&gt; &lt;TD&gt;#C1FFE4&lt;/TD&gt; &lt;TD bgColor=#bbffbb&gt;&lt;/TD&gt; &lt;TD&gt;#BBFFBB&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#ddddff&gt;&lt;/TD&gt; &lt;TD&gt;#DDDDFF&lt;/TD&gt; &lt;TD bgColor=#c4e1ff&gt;&lt;/TD&gt; &lt;TD&gt;#C4E1FF&lt;/TD&gt; &lt;TD bgColor=#d9ffff&gt;&lt;/TD&gt; &lt;TD&gt;#D9FFFF&lt;/TD&gt; &lt;TD bgColor=#d7ffee&gt;&lt;/TD&gt; &lt;TD&gt;#D7FFEE&lt;/TD&gt; &lt;TD bgColor=#ceffce&gt;&lt;/TD&gt; &lt;TD&gt;#CEFFCE&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#ececff&gt;&lt;/TD&gt; &lt;TD&gt;#ECECFF&lt;/TD&gt; &lt;TD bgColor=#d2e9ff&gt;&lt;/TD&gt; &lt;TD&gt;#D2E9FF&lt;/TD&gt; &lt;TD bgColor=#ecffff&gt;&lt;/TD&gt; &lt;TD&gt;#ECFFFF&lt;/TD&gt; &lt;TD bgColor=#e8fff5&gt;&lt;/TD&gt; &lt;TD&gt;#E8FFF5&lt;/TD&gt; &lt;TD bgColor=#dfffdf&gt;&lt;/TD&gt; &lt;TD&gt;#DFFFDF&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#fbfbff&gt;&lt;/TD&gt; &lt;TD&gt;#FBFBFF&lt;/TD&gt; &lt;TD bgColor=#ecf5ff&gt;&lt;/TD&gt; &lt;TD&gt;#ECF5FF&lt;/TD&gt; &lt;TD bgColor=#fdffff&gt;&lt;/TD&gt; &lt;TD&gt;#FDFFFF&lt;/TD&gt; &lt;TD bgColor=#fbfffd&gt;&lt;/TD&gt; &lt;TD&gt;#FBFFFD&lt;/TD&gt; &lt;TD bgColor=#f0fff0&gt;&lt;/TD&gt; &lt;TD&gt;#F0FFF0&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#467500&gt;&lt;/TD&gt; &lt;TD&gt;#467500&lt;/TD&gt; &lt;TD bgColor=#424200&gt;&lt;/TD&gt; &lt;TD&gt;#424200&lt;/TD&gt; &lt;TD bgColor=#5b4b00&gt;&lt;/TD&gt; &lt;TD&gt;#5B4B00&lt;/TD&gt; &lt;TD bgColor=#844200&gt;&lt;/TD&gt; &lt;TD&gt;#844200&lt;/TD&gt; &lt;TD bgColor=#642100&gt;&lt;/TD&gt; &lt;TD&gt;#642100&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#548c00&gt;&lt;/TD&gt; &lt;TD&gt;#548C00&lt;/TD&gt; &lt;TD bgColor=#5b5b00&gt;&lt;/TD&gt; &lt;TD&gt;#5B5B00&lt;/TD&gt; &lt;TD bgColor=#796400&gt;&lt;/TD&gt; &lt;TD&gt;#796400&lt;/TD&gt; &lt;TD bgColor=#9f5000&gt;&lt;/TD&gt; &lt;TD&gt;#9F5000&lt;/TD&gt; &lt;TD bgColor=#842b00&gt;&lt;/TD&gt; &lt;TD&gt;#842B00&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#64a600&gt;&lt;/TD&gt; &lt;TD&gt;#64A600&lt;/TD&gt; &lt;TD bgColor=#737300&gt;&lt;/TD&gt; &lt;TD&gt;#737300&lt;/TD&gt; &lt;TD bgColor=#977c00&gt;&lt;/TD&gt; &lt;TD&gt;#977C00&lt;/TD&gt; &lt;TD bgColor=#bb5e00&gt;&lt;/TD&gt; &lt;TD&gt;#BB5E00&lt;/TD&gt; &lt;TD bgColor=#a23400&gt;&lt;/TD&gt; &lt;TD&gt;#A23400&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#73bf00&gt;&lt;/TD&gt; &lt;TD&gt;#73BF00&lt;/TD&gt; &lt;TD bgColor=#8c8c00&gt;&lt;/TD&gt; &lt;TD&gt;#8C8C00&lt;/TD&gt; &lt;TD bgColor=#ae8f00&gt;&lt;/TD&gt; &lt;TD&gt;#AE8F00&lt;/TD&gt; &lt;TD bgColor=#d26900&gt;&lt;/TD&gt; &lt;TD&gt;#D26900&lt;/TD&gt; &lt;TD bgColor=#bb3d00&gt;&lt;/TD&gt; &lt;TD&gt;#BB3D00&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#82d900&gt;&lt;/TD&gt; &lt;TD&gt;#82D900&lt;/TD&gt; &lt;TD bgColor=#a6a600&gt;&lt;/TD&gt; &lt;TD&gt;#A6A600&lt;/TD&gt; &lt;TD bgColor=#c6a300&gt;&lt;/TD&gt; &lt;TD&gt;#C6A300&lt;/TD&gt; &lt;TD bgColor=#ea7500&gt;&lt;/TD&gt; &lt;TD&gt;#EA7500&lt;/TD&gt; &lt;TD bgColor=#d94600&gt;&lt;/TD&gt; &lt;TD&gt;#D94600&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#8cea00&gt;&lt;/TD&gt; &lt;TD&gt;#8CEA00&lt;/TD&gt; &lt;TD bgColor=#c4c400&gt;&lt;/TD&gt; &lt;TD&gt;#C4C400&lt;/TD&gt; &lt;TD bgColor=#d9b300&gt;&lt;/TD&gt; &lt;TD&gt;#D9B300&lt;/TD&gt; &lt;TD bgColor=#ff8000&gt;&lt;/TD&gt; &lt;TD&gt;#FF8000&lt;/TD&gt; &lt;TD bgColor=#f75000&gt;&lt;/TD&gt; &lt;TD&gt;#F75000&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#9aff02&gt;&lt;/TD&gt; &lt;TD&gt;#9AFF02&lt;/TD&gt; &lt;TD bgColor=#e1e100&gt;&lt;/TD&gt; &lt;TD&gt;#E1E100&lt;/TD&gt; &lt;TD bgColor=#eac100&gt;&lt;/TD&gt; &lt;TD&gt;#EAC100&lt;/TD&gt; &lt;TD bgColor=#ff9224&gt;&lt;/TD&gt; &lt;TD&gt;#FF9224&lt;/TD&gt; &lt;TD bgColor=#ff5809&gt;&lt;/TD&gt; &lt;TD&gt;#FF5809&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#a8ff24&gt;&lt;/TD&gt; &lt;TD&gt;#A8FF24&lt;/TD&gt; &lt;TD bgColor=#f9f900&gt;&lt;/TD&gt; &lt;TD&gt;#F9F900&lt;/TD&gt; &lt;TD bgColor=#ffd306&gt;&lt;/TD&gt; &lt;TD&gt;#FFD306&lt;/TD&gt; &lt;TD bgColor=#ffa042&gt;&lt;/TD&gt; &lt;TD&gt;#FFA042&lt;/TD&gt; &lt;TD bgColor=#ff8040&gt;&lt;/TD&gt; &lt;TD&gt;#FF8040&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#b7ff4a&gt;&lt;/TD&gt; &lt;TD&gt;#B7FF4A&lt;/TD&gt; &lt;TD bgColor=#ffff37&gt;&lt;/TD&gt; &lt;TD&gt;#FFFF37&lt;/TD&gt; &lt;TD bgColor=#ffdc35&gt;&lt;/TD&gt; &lt;TD&gt;#FFDC35&lt;/TD&gt; &lt;TD bgColor=#ffaf60&gt;&lt;/TD&gt; &lt;TD&gt;#FFAF60&lt;/TD&gt; &lt;TD bgColor=#ff8f59&gt;&lt;/TD&gt; &lt;TD&gt;#FF8F59&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#c2ff68&gt;&lt;/TD&gt; &lt;TD&gt;#C2FF68&lt;/TD&gt; &lt;TD bgColor=#ffff6f&gt;&lt;/TD&gt; &lt;TD&gt;#FFFF6F&lt;/TD&gt; &lt;TD bgColor=#ffe153&gt;&lt;/TD&gt; &lt;TD&gt;#FFE153&lt;/TD&gt; &lt;TD bgColor=#ffbb77&gt;&lt;/TD&gt; &lt;TD&gt;#FFBB77&lt;/TD&gt; &lt;TD bgColor=#ff9d6f&gt;&lt;/TD&gt; &lt;TD&gt;#FF9D6F&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#ccff80&gt;&lt;/TD&gt; &lt;TD&gt;#CCFF80&lt;/TD&gt; &lt;TD bgColor=#ffff93&gt;&lt;/TD&gt; &lt;TD&gt;#FFFF93&lt;/TD&gt; &lt;TD bgColor=#ffe66f&gt;&lt;/TD&gt; &lt;TD&gt;#FFE66F&lt;/TD&gt; &lt;TD bgColor=#ffc78e&gt;&lt;/TD&gt; &lt;TD&gt;#FFC78E&lt;/TD&gt; &lt;TD bgColor=#ffad86&gt;&lt;/TD&gt; &lt;TD&gt;#FFAD86&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#d3ff93&gt;&lt;/TD&gt; &lt;TD&gt;#D3FF93&lt;/TD&gt; &lt;TD bgColor=#ffffaa&gt;&lt;/TD&gt; &lt;TD&gt;#FFFFAA&lt;/TD&gt; &lt;TD bgColor=#ffed97&gt;&lt;/TD&gt; &lt;TD&gt;#FFED97&lt;/TD&gt; &lt;TD bgColor=#ffd1a4&gt;&lt;/TD&gt; &lt;TD&gt;#FFD1A4&lt;/TD&gt; &lt;TD bgColor=#ffbd9d&gt;&lt;/TD&gt; &lt;TD&gt;#FFBD9D&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#deffac&gt;&lt;/TD&gt; &lt;TD&gt;#DEFFAC&lt;/TD&gt; &lt;TD bgColor=#ffffb9&gt;&lt;/TD&gt; &lt;TD&gt;#FFFFB9&lt;/TD&gt; &lt;TD bgColor=#fff0ac&gt;&lt;/TD&gt; &lt;TD&gt;#FFF0AC&lt;/TD&gt; &lt;TD bgColor=#ffdcb9&gt;&lt;/TD&gt; &lt;TD&gt;#FFDCB9&lt;/TD&gt; &lt;TD bgColor=#ffcbb3&gt;&lt;/TD&gt; &lt;TD&gt;#FFCBB3&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#e8ffc4&gt;&lt;/TD&gt; &lt;TD&gt;#E8FFC4&lt;/TD&gt; &lt;TD bgColor=#ffffce&gt;&lt;/TD&gt; &lt;TD&gt;#FFFFCE&lt;/TD&gt; &lt;TD bgColor=#fff4c1&gt;&lt;/TD&gt; &lt;TD&gt;#FFF4C1&lt;/TD&gt; &lt;TD bgColor=#ffe4ca&gt;&lt;/TD&gt; &lt;TD&gt;#FFE4CA&lt;/TD&gt; &lt;TD bgColor=#ffdac8&gt;&lt;/TD&gt; &lt;TD&gt;#FFDAC8&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#efffd7&gt;&lt;/TD&gt; &lt;TD&gt;#EFFFD7&lt;/TD&gt; &lt;TD bgColor=#ffffdf&gt;&lt;/TD&gt; &lt;TD&gt;#FFFFDF&lt;/TD&gt; &lt;TD bgColor=#fff8d7&gt;&lt;/TD&gt; &lt;TD&gt;#FFF8D7&lt;/TD&gt; &lt;TD bgColor=#ffeedd&gt;&lt;/TD&gt; &lt;TD&gt;#FFEEDD&lt;/TD&gt; &lt;TD bgColor=#ffe6d9&gt;&lt;/TD&gt; &lt;TD&gt;#FFE6D9&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#f5ffe8&gt;&lt;/TD&gt; &lt;TD&gt;#F5FFE8&lt;/TD&gt; &lt;TD bgColor=#fffff4&gt;&lt;/TD&gt; &lt;TD&gt;#FFFFF4&lt;/TD&gt; &lt;TD bgColor=#fffcec&gt;&lt;/TD&gt; &lt;TD&gt;#FFFCEC&lt;/TD&gt; &lt;TD bgColor=#fffaf4&gt;&lt;/TD&gt; &lt;TD&gt;#FFFAF4&lt;/TD&gt; &lt;TD bgColor=#fff3ee&gt;&lt;/TD&gt; &lt;TD&gt;#FFF3EE&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#613030&gt;&lt;/TD&gt; &lt;TD&gt;#613030&lt;/TD&gt; &lt;TD bgColor=#616130&gt;&lt;/TD&gt; &lt;TD&gt;#616130&lt;/TD&gt; &lt;TD bgColor=#336666&gt;&lt;/TD&gt; &lt;TD&gt;#336666&lt;/TD&gt; &lt;TD bgColor=#484891&gt;&lt;/TD&gt; &lt;TD&gt;#484891&lt;/TD&gt; &lt;TD bgColor=#6c3365&gt;&lt;/TD&gt; &lt;TD&gt;#6C3365&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#743a3a&gt;&lt;/TD&gt; &lt;TD&gt;#743A3A&lt;/TD&gt; &lt;TD bgColor=#707038&gt;&lt;/TD&gt; &lt;TD&gt;#707038&lt;/TD&gt; &lt;TD bgColor=#3d7878&gt;&lt;/TD&gt; &lt;TD&gt;#3D7878&lt;/TD&gt; &lt;TD bgColor=#5151a2&gt;&lt;/TD&gt; &lt;TD&gt;#5151A2&lt;/TD&gt; &lt;TD bgColor=#7e3d76&gt;&lt;/TD&gt; &lt;TD&gt;#7E3D76&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#804040&gt;&lt;/TD&gt; &lt;TD&gt;#804040&lt;/TD&gt; &lt;TD bgColor=#808040&gt;&lt;/TD&gt; &lt;TD&gt;#808040&lt;/TD&gt; &lt;TD bgColor=#408080&gt;&lt;/TD&gt; &lt;TD&gt;#408080&lt;/TD&gt; &lt;TD bgColor=#5a5aad&gt;&lt;/TD&gt; &lt;TD&gt;#5A5AAD&lt;/TD&gt; &lt;TD bgColor=#8f4586&gt;&lt;/TD&gt; &lt;TD&gt;#8F4586&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#984b4b&gt;&lt;/TD&gt; &lt;TD&gt;#984B4B&lt;/TD&gt; &lt;TD bgColor=#949449&gt;&lt;/TD&gt; &lt;TD&gt;#949449&lt;/TD&gt; &lt;TD bgColor=#4f9d9d&gt;&lt;/TD&gt; &lt;TD&gt;#4F9D9D&lt;/TD&gt; &lt;TD bgColor=#7373b9&gt;&lt;/TD&gt; &lt;TD&gt;#7373B9&lt;/TD&gt; &lt;TD bgColor=#9f4d95&gt;&lt;/TD&gt; &lt;TD&gt;#9F4D95&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#ad5a5a&gt;&lt;/TD&gt; &lt;TD&gt;#AD5A5A&lt;/TD&gt; &lt;TD bgColor=#a5a552&gt;&lt;/TD&gt; &lt;TD&gt;#A5A552&lt;/TD&gt; &lt;TD bgColor=#5cadad&gt;&lt;/TD&gt; &lt;TD&gt;#5CADAD&lt;/TD&gt; &lt;TD bgColor=#8080c0&gt;&lt;/TD&gt; &lt;TD&gt;#8080C0&lt;/TD&gt; &lt;TD bgColor=#ae57a4&gt;&lt;/TD&gt; &lt;TD&gt;#AE57A4&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#b87070&gt;&lt;/TD&gt; &lt;TD&gt;#B87070&lt;/TD&gt; &lt;TD bgColor=#afaf61&gt;&lt;/TD&gt; &lt;TD&gt;#AFAF61&lt;/TD&gt; &lt;TD bgColor=#6fb7b7&gt;&lt;/TD&gt; &lt;TD&gt;#6FB7B7&lt;/TD&gt; &lt;TD bgColor=#9999cc&gt;&lt;/TD&gt; &lt;TD&gt;#9999CC&lt;/TD&gt; &lt;TD bgColor=#b766ad&gt;&lt;/TD&gt; &lt;TD&gt;#B766AD&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#c48888&gt;&lt;/TD&gt; &lt;TD&gt;#C48888&lt;/TD&gt; &lt;TD bgColor=#b9b973&gt;&lt;/TD&gt; &lt;TD&gt;#B9B973&lt;/TD&gt; &lt;TD bgColor=#81c0c0&gt;&lt;/TD&gt; &lt;TD&gt;#81C0C0&lt;/TD&gt; &lt;TD bgColor=#a6a6d2&gt;&lt;/TD&gt; &lt;TD&gt;#A6A6D2&lt;/TD&gt; &lt;TD bgColor=#c07ab8&gt;&lt;/TD&gt; &lt;TD&gt;#C07AB8&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#cf9e9e&gt;&lt;/TD&gt; &lt;TD&gt;#CF9E9E&lt;/TD&gt; &lt;TD bgColor=#c2c287&gt;&lt;/TD&gt; &lt;TD&gt;#C2C287&lt;/TD&gt; &lt;TD bgColor=#95caca&gt;&lt;/TD&gt; &lt;TD&gt;#95CACA&lt;/TD&gt; &lt;TD bgColor=#b8b8dc&gt;&lt;/TD&gt; &lt;TD&gt;#B8B8DC&lt;/TD&gt; &lt;TD bgColor=#ca8ec2&gt;&lt;/TD&gt; &lt;TD&gt;#CA8EC2&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#d9b3b3&gt;&lt;/TD&gt; &lt;TD&gt;#D9B3B3&lt;/TD&gt; &lt;TD bgColor=#cdcd9a&gt;&lt;/TD&gt; &lt;TD&gt;#CDCD9A&lt;/TD&gt; &lt;TD bgColor=#a3d1d1&gt;&lt;/TD&gt; &lt;TD&gt;#A3D1D1&lt;/TD&gt; &lt;TD bgColor=#c7c7e2&gt;&lt;/TD&gt; &lt;TD&gt;#C7C7E2&lt;/TD&gt; &lt;TD bgColor=#d2a2cc&gt;&lt;/TD&gt; &lt;TD&gt;#D2A2CC&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#e1c4c4&gt;&lt;/TD&gt; &lt;TD&gt;#E1C4C4&lt;/TD&gt; &lt;TD bgColor=#d6d6ad&gt;&lt;/TD&gt; &lt;TD&gt;#D6D6AD&lt;/TD&gt; &lt;TD bgColor=#b3d9d9&gt;&lt;/TD&gt; &lt;TD&gt;#B3D9D9&lt;/TD&gt; &lt;TD bgColor=#d8d8eb&gt;&lt;/TD&gt; &lt;TD&gt;#D8D8EB&lt;/TD&gt; &lt;TD bgColor=#dab1d5&gt;&lt;/TD&gt; &lt;TD&gt;#DAB1D5&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#ebd6d6&gt;&lt;/TD&gt; &lt;TD&gt;#EBD6D6&lt;/TD&gt; &lt;TD bgColor=#dedebe&gt;&lt;/TD&gt; &lt;TD&gt;#DEDEBE&lt;/TD&gt; &lt;TD bgColor=#c4e1e1&gt;&lt;/TD&gt; &lt;TD&gt;#C4E1E1&lt;/TD&gt; &lt;TD bgColor=#e6e6f2&gt;&lt;/TD&gt; &lt;TD&gt;#E6E6F2&lt;/TD&gt; &lt;TD bgColor=#e2c2de&gt;&lt;/TD&gt; &lt;TD&gt;#E2C2DE&lt;/TD&gt;&lt;/TR&gt; &lt;TR&gt; &lt;TD bgColor=#f2e6e6&gt;&lt;/TD&gt; &lt;TD&gt;#F2E6E6&lt;/TD&gt; &lt;TD bgColor=#e8e8d0&gt;&lt;/TD&gt; &lt;TD&gt;#E8E8D0&lt;/TD&gt; &lt;TD bgColor=#d1e9e9&gt;&lt;/TD&gt; &lt;TD&gt;#D1E9E9&lt;/TD&gt; &lt;TD bgColor=#f3f3fa&gt;&lt;/TD&gt; &lt;TD&gt;#F3F3FA&lt;/TD&gt; &lt;TD bgColor=#ebd3e8&gt;&lt;/TD&gt; &lt;TD&gt;#EBD3E8&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;/TR&gt;]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[struts学习]]></title>
    <url>%2F2018%2F06%2F14%2Fstruts%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[1.&lt;html:base /&gt;表示你此页面中的所有路径，都以当前文件的真实路径为准如果不加&lt;html:base /&gt;就是以地址栏路径为准 2.html:link&lt;html:link page=”/`.jsp”&gt;&lt;/html:link&gt;类似 &lt;a href&gt; 使用： &lt;html:link page=&quot;/html-link.do&quot; paramId=&quot;stringProperty&quot; paramName=&quot;newValue&quot;&gt; String via paramId and paramName &lt;/html:link&gt; 等于： &lt;a href=&quot;http://serverip:portno/projectcontextname/html-link.do?stringProperty=$newValue&quot;&gt;String via paramId and paramName&lt;/a&gt; 高级使用： &lt;% java.util.HashMap newValues = new java.util.HashMap(); newValues.put(&quot;floatProperty&quot;, new Float(444.0)); newValues.put(&quot;intProperty&quot;, new Integer(555)); newValues.put(&quot;stringArray&quot;, new String[] { &quot;Value1&quot;, &quot;Value2&quot;, &quot;Value3&quot; }); pageContext.setAttribute(&quot;newValues&quot;, newValues); %&gt; &lt;html:link page=&quot;/html-link.do&quot; name=&quot;newValues&quot;&gt; Float, int, and stringArray via name (Map) &lt;/html:link&gt; 等于： &lt;a href=&quot;http://serverip:portno/projectcontextname/html-link.do?stringArray=Value1&amp;stringArray=Value2&amp;stringArray=Value3&amp;floatProperty=444.0&amp;intProperty=555&quot;&gt; Float, int, and stringArray via name (Map)&lt;/a&gt; 3.html:form&lt;html:form action=&quot;manage/student.do?action=login&quot; 去struts-config.xml 找path=&quot;/manage/student&quot; action传入request，login作为参数 4.html:button&lt;html:button property=&quot;button&quot; property基本无实际意义 使用： &lt;html:button property=&quot;button&quot; styleClass=&quot;btn_grey&quot; value=&quot;开始考试&quot; onclick=&quot;window.opener=null;window.close();window.open(&apos;startExam.do?action=startExam&apos;,&apos;&apos;,&apos;width=786,height=600,scrollbars=1&apos;);&quot;/&gt; &lt;html:button property=&quot;button&quot; styleClass=&quot;btn_grey&quot; value=&quot;返回&quot; onclick=&quot;history.back(-1)&quot;/&gt;&lt;/td&gt; 5.html:text&lt;html:text property=&quot;name&quot;&gt; property 为属性 使用： &lt;td align=&quot;left&quot;&gt; &lt;html:text property=&quot;name&quot; size=&quot;20&quot;/&gt; *&lt;/td&gt; &nbsp; &lt;html:text property=&quot;ID&quot; size=&quot;40&quot; name=&quot;seekPwd3&quot; readonly=&quot;true&quot;/&gt; &lt;span class=&quot;word_orange1&quot;&gt; （只读）&lt;/span&gt; &lt;/td&gt; seekPwd3一定是request已经传入了类进去 seekPwd3 javabean里的ID值 6.html:options&lt;html:options collection=&quot;personList&quot; property=&quot;personId&quot; labelProperty = &quot;personName&quot;/&gt; ： &lt;html:options&gt;标签会自动根据参数产生多个&lt;option&gt;。 其中，collection属性指的是待迭代的集合变量，property设 定的是该&lt;option&gt;的value，labelProperty设定的是页面看到的内容。 7.html:multibox&lt;td width=&quot;85%&quot; align=&quot;left&quot; id=&quot;mOption&quot; style=&quot;display:none&quot;&gt; &lt;html:multibox property=&quot;answerArr&quot; styleClass=&quot;noborder&quot;&gt;A&lt;/html:multibox&gt;A &lt;html:multibox property=&quot;answerArr&quot; styleClass=&quot;noborder&quot;&gt;B&lt;/html:multibox&gt;B &lt;html:multibox property=&quot;answerArr&quot; styleClass=&quot;noborder&quot;&gt;C&lt;/html:multibox&gt;C &lt;html:multibox property=&quot;answerArr&quot; styleClass=&quot;noborder&quot;&gt;D&lt;/html:multibox&gt;D &lt;/td&gt; 8.html:hidden&lt;input type=&quot;hidden&quot; name=&quot;XXX&quot; value=&quot;&lt;%=request.getAttribute(XXX)%&gt;&quot;&gt; 等于 &lt;html:hidden property=&quot;theID&quot; /&gt; 在验证原数据与现数据时： &lt;tr&gt; &lt;td align=&quot;left&quot; style=&quot;padding:5px;&quot;&gt;原密码：&lt;/td&gt; &lt;td align=&quot;left&quot;&gt;&lt;html:password styleId=&quot;oldpwd1&quot; property=&quot;oldpwd&quot; size=&quot;30&quot;/&gt; &lt;html:hidden styleId=&quot;holdpwd&quot; property=&quot;oldpwd&quot; value=&quot;&lt;%=managerPwd%&gt;&quot;/&gt;&lt;/td&gt; &lt;/tr&gt; js: if(form.oldpwd1.value!=form.holdpwd.value){ alert(&quot;您输入的原密码不正确，请重新输入!&quot;);form.oldpwd1.value=&quot;&quot;; form.oldpwd1.focus();return false; } 9.html:selecthttps://www.cnblogs.com/mingforyou/archive/2012/04/26/2471546.html 10.logic:Equal&lt;logic:equal name=&quot;RegistrationForm&quot; property=&quot;action&quot; value=&quot;Create&quot;&gt; name=&quot;对象名称&quot; property=&quot;属性名称&quot; value=&quot;比较值&quot; 等于 if 同理还有 &lt;logic:notEqual value=&quot;tsoft&quot; name=&quot;manager&quot; property=&quot;name&quot;&gt; 11.logic:iterate通常我们会将数据存放在list集合中使用 在jsp页面中写java代码，遍历输出集合中的对象信息，如下 &lt;% List list = (List)request.getAttribute(&quot;list&quot;); for(int j=0;j&lt;list.size();j++) { out.print(&quot;&lt;tr&gt;&lt;td&gt;&quot;+j+&quot;&lt;/td&gt;&quot;); out.print(&quot;&lt;td&gt;&quot;); out.print(((TestActionForm)list.get(j)).getSoruser()); out.print(&quot;&lt;/td&gt;&lt;td&gt;&quot;); out.println(((TestActionForm)list.get(j)).getNum()); out.print(&quot;&lt;/td&gt;&lt;/tr&gt;&quot;); } %&gt; 使用struts中的logic:iterate标签，如下 &lt;logic:iterate id=&quot;form&quot; name=&quot;list&quot; type=&quot; example.TestActionForm &quot;&gt; &lt;tr&gt;&lt;td width=&quot;50%&quot;&gt; name: &lt;bean:write name=&quot;form&quot; property=&quot;soruser&quot;/&gt; &lt;td/&gt;&lt;td width=&quot;50%&quot;&gt; password: &lt;bean:write name=&quot;form&quot; property=&quot;num&quot;/&gt; &lt;/td&gt;&lt;/tr&gt; &lt;/logic:iterate&gt; 其中，id为一个bean的名字，同下面bean的name属性，用于输出信息name为要遍历的对象的名字，对应于前面setAttribute(“list”,arraylist);中的list;type为list集合中的对象的位置，我这里也就是类TestActionForm所在的位置 12.bean:write简单讲就是javabean的使用打印输出 &lt;bean:write name=&quot;stuResult&quot; property=&quot;joinTime&quot; format=&quot;yyyy-MM-dd HH:mm:ss&quot; filter=&quot;true&quot;/&gt; 写出javabean format 代表格式 property 属性 13.bean:define有三个用途。 一是定义新字符串常量: &lt;bean:define id=&quot;foo&quot; value=&quot;This is a new String&quot;/&gt; &lt;bean:define id=&quot;bar&quot; value=&apos;&lt;%= &quot;Hello, &quot; + user.getName() %&gt;&apos;/&gt; &lt;bean:defineid=&quot;last&quot; scope=&quot;session&quot; value=&apos;&lt;%= request.getRequestURI() %&gt;&apos;/&gt; 二是复制一个现有的bean给新的bean: &lt;bean:define id=&quot;foo&quot; name=&quot;bar&quot;/&gt; // 将名字为bar的JavaBean赋值给foo &lt;bean:define id=&quot;baz&quot; name=&quot;bop&quot; type=&quot;com.mycompany.MyClass&quot;/&gt; // 额外定义脚本变量的类型，默认为Object 三是复制一个现有的bean的属性给新的bean： &lt;bean:define id=&quot;bop&quot; name=&quot;user&quot; property=&quot;role[3].name&quot;/&gt; &lt;bean:define id=&quot;foo&quot; name=&quot;bar&quot; property=&quot;baz&quot; scope=&quot;request&quot; toScope=&quot;session&quot;/&gt; //toScope属性指新bean的scope，默认为page 上段代码的意思是把名为bar的bean的baz属性赋值给foo，foo的类型为String(默认)。]]></content>
      <categories>
        <category>struts,jsp</category>
      </categories>
      <tags>
        <tag>struts</tag>
        <tag>jsp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html 一些不清楚的地方]]></title>
    <url>%2F2018%2F06%2F13%2Fhtml-%E4%B8%80%E4%BA%9B%E4%B8%8D%E6%B8%85%E6%A5%9A%E7%9A%84%E5%9C%B0%E6%96%B9%2F</url>
    <content type="text"><![CDATA[1.table标签&lt;table cellpadding=&quot;0&quot;&gt; 边框与其内容的间隙大小 &lt;table cellspacing=&quot;0&quot;&gt; 边框与边框之间的间隙大小 &lt;table width=&quot;100%&quot; height=&quot;100%&quot;&gt; 根据用户显示屏自适应大小，全屏 2.td标签&lt;td bgcolor=&quot;#C6C6C6&quot;&gt; 颜色 &lt;td valign=&quot;bottom&quot;&gt; 意味表格的底部，同理可top &lt;td align=&quot;center&quot;&gt;布局在中心 &lt;td style=&quot;padding:5px&quot;&gt; 字体大小 在td标签中valign=”middle”与align=”center”不相同。valign 调格子中内容的垂向（上下）位置，valign=“top“上面, valign=“middle“中间，或 valign=“bottom 下面。align 调格子中内容的（左右）横向位置，align=”LEFT“ 左边对齐, align=”CENTER“中间 或 align=”RIGHT“右边对齐。valign – vertical alignment 的缩写。 3.img标签img标签与Map的套用，在图像上的位置和jsp对应 例如： &lt;img src=&quot;````.jpg&quot; usemap=&quot;#名字&quot;&gt; &lt;img src=&quot;Images/default_mid.JPG&quot; width=&quot;778&quot; height=&quot;254&quot; border=&quot;0&quot; usemap=&quot;#Map&quot;&gt; &lt;map name=&quot;Map&quot;&gt; &lt;area shape=&quot;poly&quot; coords=&quot;190,65,190,65,215,82,194,98,105,113,103,81&quot; href=&quot;examRule.jsp&quot;&gt; &lt;area shape=&quot;poly&quot; coords=&quot;313,59,402,45,435,56,406,78,311,90,313,58&quot; href=&quot;manage/stuResult.do?action=stuResultQueryS&amp;ID=${student}&quot;&gt; &lt;area shape=&quot;poly&quot; coords=&quot;380,141,508,119,541,139,521,154,385,176&quot; href=&quot;manage/student.do?action=modifyQuery&amp;ID=${student}&quot;&gt; &lt;area shape=&quot;poly&quot; coords=&quot;602,58,690,46,715,63,696,76,602,91&quot; href=&quot;logout.jsp&quot;&gt; &lt;/map&gt; 4.submit&lt;input type=&quot;submit&quot; class=&quot;btn_grey&quot; onClick=&quot;history.back(-1)&quot;&gt; 灰色 跳转上一个页面 5.登出session.invalidate(); 6.js(1) js 中实现跳转例如： window.open(‘../index.jsp’,’’,’toolbar,menubar,scrollbars,resizable,status,location,directories,copyhistory,height=600,width=778’); 7.引入jsp引入其他jsp&lt;%@ include file=&quot;copyright.jsp&quot;%&gt; 此后补充]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 关于excel]]></title>
    <url>%2F2018%2F06%2F12%2FPython-%E5%85%B3%E4%BA%8Eexcel%2F</url>
    <content type="text"><![CDATA[read_excel()加载函数为read_excel(),其具体参数如下。 read_excel(io, sheetname=0, header=0, skiprows=None, skip_footer=0, index_col=None,names=None, parse_cols=None, parse_dates=False,date_parser=None,na_values=None,thousands=None, convert_float=True, has_index_names=None, converters=None,dtype=None, true_values=None, false_values=None, engine=None, squeeze=False, **kwds) 常用参数解析： io : string, path object ; excel 路径。 sheetname : string, int, mixed list of strings/ints, or None, default 0 返回多表使用sheetname=[0,1],若sheetname=None是返回全表 注意：int/string 返回的是dataframe，而none和list返回的是dict of dataframe header : int, list of ints, default 0 指定列名行，默认0，即取第一行，数据为列名行以下的数据 若数据不含列名，则设定 header = None skiprows : list-like,Rows to skip at the beginning，省略指定行数的数据 skip_footer : int,default 0, 省略从尾部数的int行数据 index_col : int, list of ints, default None指定列为索引列，也可以使用u”strings” names : array-like, default None, 指定列的名字。 举例sheet1: ID NUM-1 NUM-2 NUM-3 36901 142 168 661 36902 78 521 602 36903 144 600 521 36904 95 457 468 36905 69 596 695 sheet2： ID NUM-1 NUM-2 NUM-3 36906 190 527 691 36907 101 403 470 1.iobasestation =&quot;F://pythonBook_PyPDAM/data/test.xls&quot; data = pd.read_excel(basestation) print data 此时输出： ID NUM-1 NUM-2 NUM-3 0 36901 142 168 661 1 36902 78 521 602 2 36903 144 600 521 3 36904 95 457 468 4 36905 69 596 695 2.sheetname返回多表使用sheetname=[0,1],若sheetname=None是返回全表 注意：int/string 返回的是dataframe，而none和list返回的是dict of dataframe data_1 = pd.read_excel(basestation,sheetname=[0,1]) print data_1 print type(data_1) 此时输出： OrderedDict([(0, ID NUM-1 NUM-2 NUM-3 0 36901 142 168 661 1 36902 78 521 602 2 36903 144 600 521 3 36904 95 457 468 4 36905 69 596 695), (1, ID NUM-1 NUM-2 NUM-3 0 36906 190 527 691 1 36907 101 403 470)]) 3.header指定列名行，默认0，即取第一行，数据为列名行以下的数据 若数据不含列名，则设定 header = None ，注意这里还有列名的一行。 data = pd.read_excel(basestation,header=None) print data 输出： 0 1 2 3 0 ID NUM-1 NUM-2 NUM-3 1 36901 142 168 661 2 36902 78 521 602 3 36903 144 600 521 4 36904 95 457 468 5 36905 69 596 695 data = pd.read_excel(basestation,header=[3]) print data 输出： 36903 144 600 521 0 36904 95 457 468 1 36905 69 596 695 4.skiprows省略指定行数的数据 data = pd.read_excel(basestation,skiprows = [1]) print data 输出: ID NUM-1 NUM-2 NUM-3 0 36902 78 521 602 1 36903 144 600 521 2 36904 95 457 468 3 36905 69 596 695 5.skip_footer省略从尾部数的int行的数据 data = pd.read_excel(basestation, skip_footer=3) print data 输出： ID NUM-1 NUM-2 NUM-3 0 36901 142 168 661 1 36902 78 521 602 6.index_col指定列为索引列，也可以使用u”strings” data = pd.read_excel(basestation, index_col=&quot;NUM-3&quot;) print data 输出： ID NUM-1 NUM-2 NUM-3 661 36901 142 168 602 36902 78 521 521 36903 144 600 468 36904 95 457 695 36905 69 596 7.names指定列的名字 data = pd.read_excel(basestation,names=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;e&quot;]) print data a b c e 0 36901 142 168 661 1 36902 78 521 602 2 36903 144 600 521 3 36904 95 457 468 4 36905 69 596 695 to_excel()存储函数为pd.DataFrame.to_excel() to_excel(self, excel_writer, sheet_name=’Sheet1’, na_rep=’’, float_format=None,columns=None, header=True, index=True, index_label=None,startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None,inf_rep=’inf’, verbose=True, freeze_panes=None) excel_writer : 目标路径 sheet_name : 填充excel的第几页 na_rep : excel中缺失值的填充 float_format : string, default None Format string for floating point numbers columns : sequence, optional，Columns to write 选择输出的的列。 header : boolean or list of string, default True Write out column names. If a list of string is given it is assumed to be aliases for the column names index : boolean, default True，Write row names (index) index_label : string or sequence, default None， Column label for index column(s) if desired. If None is given, andheader and index are True, then the index names are used. A sequence should be given if the DataFrame uses MultiIndex. startrow :upper left cell row to dump data frame startcol :upper left cell column to dump data frame engine : string, default None ，write engine to use - you can also set this via the options，io.excel.xlsx.writer, io.excel.xls.writer, andio.excel.xlsm.writer. merge_cells : boolean, default True Write MultiIndex and Hierarchical Rows as merged cells. encoding: string, default None encoding of the resulting excel file. Only necessary for xlwt,other writers support unicode natively. inf_rep : string, default ‘inf’ Representation for infinity (there is no native representation for infinity in Excel) freeze_panes : tuple of integer (length 2), default None Specifies the one-based bottommost row and rightmost column that is to be frozen 数据源： ID NUM-1 NUM-2 NUM-3 0 36901 142 168 661 1 36902 78 521 602 2 36903 144 600 521 3 36904 95 457 468 4 36905 69 596 695 5 36906 165 453 加载数据： basestation =&quot;F://python/data/test.xls&quot; basestation_end =&quot;F://python/data/test_end.xls&quot; data = pd.read_excel(basestation) 1.excel_writer输出路径 data.to_excel(basestation_end) 输出： ID NUM-1 NUM-2 NUM-3 0 36901 142 168 661 1 36902 78 521 602 2 36903 144 600 521 3 36904 95 457 468 4 36905 69 596 695 5 36906 165 453 2.sheet_name将数据存储在excel的那个sheet页面 data.to_excel(basestation_end,sheet_name=&quot;sheet2&quot;) 3.na_rep缺失值填充 data.to_excel(basestation_end,na_rep=&quot;NULL&quot;) 输出： ID NUM-1 NUM-2 NUM-3 0 36901 142 168 661 1 36902 78 521 602 2 36903 144 600 521 3 36904 95 457 468 4 36905 69 596 695 5 36906 165 453 NULL 4.colums选择输出的的列 data.to_excel(basestation_end,columns=[&quot;ID&quot;]) 输出 ID 0 36901 1 36902 2 36903 3 36904 4 36905 5 36906 5.header默认为True,可以用list命名列的名字。header = False 则不输出题头 data.to_excel(basestation_end,header=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]) 输出： a b c d 0 36901 142 168 661 1 36902 78 521 602 2 36903 144 600 521 3 36904 95 457 468 4 36905 69 596 695 5 36906 165 453 data.to_excel(basestation_end,header=False,columns=[&quot;ID&quot;]) header = False 则不输出题头 输出： 0 36901 1 36902 2 36903 3 36904 4 36905 5 36906 6.index默认为True，显示index，当index=False 则不显示行索引（名字） index_label : string or sequence, default None设置索引列的列名 data.to_excel(basestation_end,index=False) 输出： ID NUM-1 NUM-2 NUM-3 36901 142 168 661 36902 78 521 602 36903 144 600 521 36904 95 457 468 36905 69 596 695 36906 165 453 data.to_excel(basestation_end,index_label=[&quot;f&quot;]) 输出： f ID NUM-1 NUM-2 NUM-3 0 36901 142 168 661 1 36902 78 521 602 2 36903 144 600 521 3 36904 95 457 468 4 36905 69 596 695 5 36906 165 453 以上为read_excel,to_excel用法，若是想对已经读出的excel文件有所操作，请转移：https://blog.csdn.net/liufang0001/article/details/77856255]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-tkinter-简单使用介绍]]></title>
    <url>%2F2018%2F05%2F30%2Fpython-tkinter-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[本文主要介绍几个简单的tkinter组件。 说明每个控件最后要加上pack().否则控件是无法显示的. Label说明 标签 举例 from Tkinter import * root = Tk() root.title(&quot;hello world&quot;) root.geometry(&apos;300x200&apos;) l = Label(root, text=&quot;show&quot;, bg=&quot;green&quot;, font=(&quot;Arial&quot;, 12), width=5, height=2) l.pack(side=LEFT) #这里的side可以赋值为LEFT RTGHT TOP BOTTOM root.mainloop() 效果 Frame说明 在屏幕上创建一块矩形区域,多作为容器来布局窗体 举例 from Tkinter import * root = Tk() root.title(&quot;hello world&quot;) root.geometry(&apos;300x200&apos;) Label(root, text=&apos;校训&apos;, font=(&apos;Arial&apos;, 20)).pack() frm = Frame(root) # left frm_L = Frame(frm) Label(frm_L, text=&apos;厚德&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP) Label(frm_L, text=&apos;博学&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP) frm_L.pack(side=LEFT) # right frm_R = Frame(frm) Label(frm_R, text=&apos;敬业&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP) Label(frm_R, text=&apos;乐群&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP) frm_R.pack(side=RIGHT) frm.pack() root.mainloop() 效果 Entry说明 创建单行文本框 用法 创建:lb =Entry(根对象, [属性列表]) 绑定变量 var=StringVar() lb=Entry(根对象, textvariable = var) 获取文本框中的值 var.get() 设置文本框中的值 var.set(item1) 举例 from Tkinter import * root = Tk() root.title(&quot;hello world&quot;) root.geometry() var = StringVar() e = Entry(root, textvariable = var) var.set(&quot;hello&quot;) e.pack() root.mainloop() 效果 Text说明 向该空间内输入文本 用法 t = Text(根对象) 插入:t.insert(mark, 内容) 删除:t.delete(mark1, mark2) 其中,mark可以是行号,或者特殊标识,例如 INSERT:光标的插入点CURRENT:鼠标的当前位置所对应的字符位置 END:这个Textbuffer的最后一个字符 SEL_FIRST:选中文本域的第一个字符，如果没有选中区域则会引发异常 SEL_LAST：选中文本域的最后一个字符，如果没有选中区域则会引发 异常 举例 from Tkinter import * root = Tk() root.title(&quot;hello world&quot;) root.geometry(&apos;300x200&apos;) t = Text(root) t.insert(1.0, &apos;hello\n&apos;) t.insert(END, &apos;hello000000\n&apos;) t.insert(END, &apos;nono&apos;) t.pack() root.mainloop() 效果 Button说明 创建按钮 用法 Button(根对象, [属性列表]) 举例 from Tkinter import * root = Tk() root.title(&quot;hello world&quot;) root.geometry() def printhello(): t.insert(&apos;1.0&apos;, &quot;hello\n&quot;) t = Text() t.pack() Button(root, text=&quot;press&quot;, command = printhello).pack() root.mainloop() 效果 Listbox说明 列表控件,可以含有一个或多个文本想,可单选也可多选 用法 创建:lb = ListBox(根对象, [属性列表]) 绑定变量 var=StringVar() lb=ListBox(根对象, listvariable = var) 得到列表中的所有值 var.get() 设置列表中的所有值 var.set((item1, item2, …..)) 添加:lb.insert(item) 删除:lb.delete(item,…) 绑定事件 lb.bind(‘‘, 函数) 获得所选中的选项 lbl.get(lb.curselection()) 属性 selectmode可以为BROWSE MULTIPL SINGLE 举例 from Tkinter import * root = Tk() root.title(&quot;hello world&quot;) root.geometry() def print_item(event): print(lb.get(lb.curselection())) var = StringVar() lb = Listbox(root, listvariable = var) list_item = [1, 2, 3, 4] #控件的内容为1 2 3 4 for item in list_item: lb.insert(END, item) lb.delete(2, 4) #此时控件的内容为1 3 var.set((&apos;a&apos;, &apos;ab&apos;, &apos;c&apos;, &apos;d&apos;)) #重新设置了，这时控件的内容就编程var的内容了 print var.get() lb.bind(&apos;&lt;ButtonRelease-1&gt;&apos;, print_item) lb.pack() root.mainloop() 效果 Scrollbar说明 在屏幕上创建一块矩形区域,多作为容器来布局窗体 用法 Frame(根对象, [属性列表]), 最长用的用法是和别的控件一起使用. 举例 from Tkinter import * root = Tk() root.title(&quot;hello world&quot;) root.geometry() def print_item(event): print lb.get(lb.curselection()) var = StringVar() lb = Listbox(root, height=5, selectmode=BROWSE, listvariable = var) lb.bind(&apos;&lt;ButtonRelease-1&gt;&apos;, print_item) list_item = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] for item in list_item: lb.insert(END, item) scrl = Scrollbar(root) scrl.pack(side=RIGHT, fill=Y) lb.configure(yscrollcommand = scrl.set) lb.pack(side=LEFT, fill=BOTH) scrl[&apos;command&apos;] = lb.yview root.mainloop() 效果]]></content>
      <categories>
        <category>tkinter</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python tkinter pack布局]]></title>
    <url>%2F2018%2F05%2F24%2Fpython-tkinter-pack%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[一、pack参数： &emsp;&emsp;side:按扭停靠在窗口的哪个位置 left: 左 top: 上 right: 右 botton: 下 fill:填充 x:水平方向填充 y:竖直方向填充 both:水平和竖直方向填充 none:不填充 expand: yes:扩展整个空白区 no:不扩展 anchor: N:北 下 E:东 右 S:南 下 W:西 左 CENTER:中间 padx:x方向的外边距 pady:y方向的外边距 ipadx:x方向的内边距 ipady：y方向的内边距 二、代码示例：12345678910from Tkinter import *root = Tk()Button(root,text=&apos;A&apos;).pack(side=LEFT,expand=YES,fill=Y)Button(root,text=&apos;B&apos;).pack(side=TOP,expand=YES,fill=BOTH)Button(root,text=&apos;C&apos;).pack(side=RIGHT,expand=YES,fill=NONE)Button(root,text=&apos;D&apos;).pack(side=LEFT,expand=NO,fill=Y)Button(root,text=&apos;E&apos;).pack(side=TOP,expand=YES,fill=BOTH)Button(root,text=&apos;F&apos;).pack(side=BOTTOM,expand=YES)Button(root,text=&apos;G&apos;).pack(anchor=SE)root.mainloop()]]></content>
      <categories>
        <category>tkinter</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Properties]]></title>
    <url>%2F2018%2F05%2F23%2FJava-Properties%2F</url>
    <content type="text"><![CDATA[一、Java Properties类 Java中有个比较重要的类Properties（Java.util.Properties），主要用于读取Java的配置文件，各种语言都有自己所支持的配置文件，配置文件中很多变量是经常改变的，这样做也是为了方便用户，让用户能够脱离程序本身去修改相关的变量设置。像Python支持的配置文件是.ini文件，同样，它也有自己读取配置文件的类ConfigParse，方便程序员或用户通过该类的方法来修改.ini配置文件。在Java中，其配置文件常为.properties文件，格式为文本文件，文件的内容的格式是“键=值”的格式，文本注释信息可以用”#”来注释。 二、用法 它提供了几个主要的方法： 1． getProperty ( String key)，用指定的键在此属性列表中搜索属性。也就是通过参数 key ，得到 key 所对应的 value。 2． load ( InputStream inStream)，从输入流中读取属性列表（键和元素对）。通过对指定的文件（比如说上面的 test.properties 文件）进行装载来获取该文件中的所有键 - 值对。以供 getProperty ( String key) 来搜索。 3． setProperty ( String key, String value) ，调用 Hashtable 的方法 put 。他通过调用基类的put方法来设置 键 - 值对。 4． store ( OutputStream out, String comments)，以适合使用 load 方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表（键和元素对）写入输出流。与 load 方法相反，该方法将键 - 值对写入到指定的文件中去。 5．clear () ，清除所有装载的 键 - 值对。该方法在基类中提供。 三、举例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//关于Properties类常用的操作public class TestProperties &#123; //根据Key读取Value public static String GetValueByKey(String filePath, String key) &#123; Properties pps = new Properties(); try &#123; InputStream in = new BufferedInputStream (new FileInputStream(filePath)); pps.load(in); String value = pps.getProperty(key); System.out.println(key + &quot; = &quot; + value); return value; &#125;catch (IOException e) &#123; e.printStackTrace(); return null; &#125; &#125; //读取Properties的全部信息 public static void GetAllProperties(String filePath) throws IOException &#123; Properties pps = new Properties(); InputStream in = new BufferedInputStream(new FileInputStream(filePath)); pps.load(in); Enumeration en = pps.propertyNames(); //得到配置文件的名字 while(en.hasMoreElements()) &#123; String strKey = (String) en.nextElement(); String strValue = pps.getProperty(strKey); System.out.println(strKey + &quot;=&quot; + strValue); &#125; &#125; //写入Properties信息 public static void WriteProperties (String filePath, String pKey, String pValue) throws IOException &#123; Properties pps = new Properties(); InputStream in = new FileInputStream(filePath); //从输入流中读取属性列表（键和元素对） pps.load(in); //调用 Hashtable 的方法 put。使用 getProperty 方法提供并行性。 //强制要求为属性的键和值使用字符串。返回值是 Hashtable 调用 put 的结果。 OutputStream out = new FileOutputStream(filePath); pps.setProperty(pKey, pValue); //以适合使用 load 方法加载到 Properties 表中的格式， //将此 Properties 表中的属性列表（键和元素对）写入输出流 pps.store(out, &quot;Update &quot; + pKey + &quot; name&quot;); &#125; public static void main(String [] args) throws IOException&#123; //String value = GetValueByKey(&quot;Test.properties&quot;, &quot;name&quot;); //System.out.println(value); //GetAllProperties(&quot;Test.properties&quot;); WriteProperties(&quot;Test.properties&quot;,&quot;long&quot;, &quot;212&quot;); &#125;&#125; 具体工程例子：]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java-web-作业]]></title>
    <url>%2F2018%2F05%2F12%2Fjava-web-%E4%BD%9C%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[本文章仅用来记录学校的一次web作业，仅供学习。 大致图如下： 效果图如下： 数据库:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768CREATE DATABASE IF NOT EXISTS `db_student`;USE `db_student`;DROP TABLE IF EXISTS `t_user`;DROP TABLE IF EXISTS `t_score`;DROP TABLE IF EXISTS `t_student`;DROP TABLE IF EXISTS `t_course`;-- TABLE t_userCREATE TABLE `t_user` ( `N_USER_ID` int(11) NOT NULL AUTO_INCREMENT, `VC_LOGIN_NAME` varchar(10) NOT NULL, `VC_PASSWORD` varchar(10) NOT NULL, PRIMARY KEY (`N_USER_ID`), UNIQUE KEY (`VC_LOGIN_NAME`))ENGINE=InnoDB DEFAULT CHARSET=utf8;LOCK TABLES `t_user` WRITE;INSERT INTO `db_student`.`t_user` (`VC_LOGIN_NAME`,`VC_PASSWORD`) VALUES (&apos;admin&apos;,&apos;Abc123#&apos;),(&apos;user1&apos;,&apos;123456#&apos;),(&apos;user2&apos;,&apos;abcdef&apos;);UNLOCK TABLES;-- TABLE t_studentCREATE TABLE `t_student` ( `N_STUDENT_ID` int(11) NOT NULL AUTO_INCREMENT, `VC_STUDENT_CODE` varchar(5) NOT NULL, `VC_STUDENT_NAME` varchar(20) NOT NULL, `N_SEX` int(1) NOT NULL, `N_GRADE` int(4) NOT NULL, `N_MAJOR` int(2) NOT NULL, `VC_DETAIL` varchar(200) DEFAULT NULL, PRIMARY KEY (`N_STUDENT_ID`),UNIQUE KEY (`VC_STUDENT_CODE`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;LOCK TABLES `t_student` WRITE;INSERT INTO `db_student`.`t_student` (`VC_STUDENT_CODE`,`VC_STUDENT_NAME`,`N_SEX`,`N_GRADE`,`N_MAJOR`) VALUES (&apos;00001&apos;,&apos;王亮&apos;,0,2015,1),(&apos;00002&apos;,&apos;李树国&apos;,0,2015,1),(&apos;00003&apos;,&apos;赵欣&apos;,1,2015,2);UNLOCK TABLES;-- TABLE t_courseCREATE TABLE `t_course` ( `N_COURSE_ID` int(11) NOT NULL AUTO_INCREMENT, `VC_COURSE_NAME` varchar(20) NOT NULL, `N_TYPE` int(1) NOT NULL, `F_CREDIT` float NOT NULL, `N_GRADE` int(4) NOT NULL, `N_MAJOR` int(2) NOT NULL, `VC_DETAIL` varchar(200) DEFAULT NULL, PRIMARY KEY (`N_COURSE_ID`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;LOCK TABLES `t_course` WRITE;INSERT INTO `db_student`.`t_course` (`VC_COURSE_NAME`,`N_TYPE`,`F_CREDIT`,`N_GRADE`,`N_MAJOR`) VALUES (&apos;Java程序设计&apos;,4,3,2015,1), (&apos;Web应用程序设计&apos;,5,2,2015,1), (&apos;JSP程序设计&apos;,5,2,2015,2);UNLOCK TABLES;-- TABLE t_scoreCREATE TABLE `db_student`.`t_score` ( `N_STUDENT_ID` INT NOT NULL, `N_COURSE_ID` INT NOT NULL, `F_SCORE` FLOAT NOT NULL, PRIMARY KEY (`N_STUDENT_ID`, `N_COURSE_ID`), FOREIGN KEY (`N_STUDENT_ID`) REFERENCES `db_student`.`t_student` (`N_STUDENT_ID`), FOREIGN KEY (`N_COURSE_ID`) REFERENCES `db_student`.`t_course` (`N_COURSE_ID`));LOCK TABLES `t_score` WRITE;INSERT INTO `db_student`.`t_score` (`N_STUDENT_ID`,`N_COURSE_ID`,`F_SCORE`) VALUES (1,1,85), (1,2,90), (3,3,95);UNLOCK TABLES; 1. src common 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package common;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import com.mysql.jdbc.PreparedStatement;public class DBConnection &#123; private static final String DBDRIVER = &quot;com.mysql.jdbc.Driver&quot;; // 驱动类类名 private static final String DBURL = &quot;jdbc:mysql://localhost:3306/db_student&quot;;// 连接URL private static final String DBUSER = &quot;root&quot;; // 数据库用户名 private static final String DBPASSWORD = &quot;twh233&quot;; // 数据库密码 private static Connection conn = null; // 声明一个连接对象 public static Connection getConnection() &#123; try &#123; Class.forName(DBDRIVER); // 注册驱动 conn = DriverManager.getConnection(DBURL, DBUSER, DBPASSWORD); // 获得连接对象 &#125; catch (ClassNotFoundException e) &#123; // 捕获驱动类无法找到异常 e.printStackTrace(); &#125; catch (SQLException e) &#123; // 捕获SQL异常 e.printStackTrace(); &#125; return conn; &#125; public static void closeConnection() &#123;// 关闭连接对象 if (conn != null) &#123; // 如果conn连接对象不为空 try &#123; conn.close(); // 关闭conn连接对象对象 &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125; // public static void closeConnection(PreparedStatement pstmt) &#123;// 关闭预处理对象 // if (pstmt != null) &#123; // 如果pstmt预处理对象不为空 // try &#123; // pstmt.close(); // 关闭pstmt预处理对象 // &#125; catch (SQLException e) &#123; // e.printStackTrace(); // &#125; // &#125; // &#125; // // public static void closeConnection(ResultSet rs) &#123;// 关闭结果集对象 // if (rs != null) &#123; // 如果rs结果集对象不为null // try &#123; // rs.close(); // 关闭rs结果集对象 // &#125; catch (SQLException e) &#123; // e.printStackTrace(); // &#125; // &#125; // &#125; &#125; 123456789101112131415161718192021222324252627282930313233343536package common;import java.io.UnsupportedEncodingException;public class MyTools &#123; public static String change(String str)&#123; str=str.replace(&quot;&lt;&quot;,&quot;&amp;lt;&quot;); str=str.replace(&quot;&gt;&quot;,&quot;&amp;gt;&quot;); return str; &#125; public static int strToint(String str)&#123; //将String型数据转换为int型数据的方法 if(str==null||str.equals(&quot;&quot;)) str=&quot;0&quot;; int i=0; try&#123; i=Integer.parseInt(str); &#125;catch(NumberFormatException e)&#123; i=0; e.printStackTrace(); &#125; return i; &#125; public static String toChinese(String str)&#123; //进行转码操作的方法 if(str==null) str=&quot;&quot;; try &#123; str=new String(str.getBytes(&quot;ISO-8859-1&quot;),&quot;gb2312&quot;); &#125; catch (UnsupportedEncodingException e) &#123; str=&quot;&quot;; e.printStackTrace(); &#125; return str; &#125;&#125; 2. src course 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136package course;import java.sql.Connection;import java.sql.ResultSet;import java.sql.Statement;import java.util.ArrayList;import com.mysql.jdbc.PreparedStatement;import common.DBConnection;public class CourseDB &#123; private Connection con = null; /* 获取所有课程信息 */ public ArrayList&lt;CourseInfo&gt; getAll() &#123; ResultSet rs=null; Statement sql=null; ArrayList&lt;CourseInfo&gt; studentList=new ArrayList&lt;CourseInfo&gt;(); try &#123; con=DBConnection.getConnection(); sql=con.createStatement(); rs=sql.executeQuery(&quot;SELECT * FROM t_course&quot;); while(rs.next()) &#123; CourseInfo cnt=new CourseInfo(); cnt.setCourseID(rs.getInt(&quot;N_COURSE_ID&quot;)); cnt.setName(rs.getString(&quot;VC_COURSE_NAME&quot;)); cnt.setType(rs.getInt(&quot;N_TYPE&quot;)); cnt.setCredit(rs.getFloat(&quot;F_CREDIT&quot;)); cnt.setGrade(rs.getInt(&quot;N_GRADE&quot;)); cnt.setMajor(rs.getInt(&quot;N_MAJOR&quot;)); cnt.setDetail(rs.getString(&quot;VC_DETAIL&quot;)); studentList.add(cnt); &#125; rs.close(); sql.close(); &#125; catch (Exception e) &#123; System.out.println(&quot;获取所有课程信息失败！&quot;); &#125; finally&#123; DBConnection.closeConnection(); &#125; return studentList; &#125; /* 添加课程信息 */ public int insert(CourseInfo course) &#123; PreparedStatement pStmt=null; int count=0; try &#123; con=DBConnection.getConnection(); pStmt = (PreparedStatement) con.prepareStatement(&quot;INSERT INTO t_course &quot; + &quot;(VC_COURSE_NAME, N_TYPE, F_CREDIT, N_GRADE, N_MAJOR, VC_DETAIL) &quot; + &quot;VALUES (?,?,?,?,?,?)&quot;); pStmt.setString(1, course.getName()); pStmt.setInt(2, course.getType()); pStmt.setFloat(3, course.getCredit()); pStmt.setInt(4, course.getGrade()); pStmt.setInt(5, course.getMajor()); pStmt.setString(6, course.getDetail()); count=pStmt.executeUpdate(); pStmt.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); System.out.println(&quot;添加课程失败！&quot;); &#125; finally&#123; DBConnection.closeConnection(); &#125; return count; &#125; /*通过课程ID查询到课程的全部信息*/ public CourseInfo getCourseByID(int CourseID) &#123; System.out.println(&quot;GetCourseByID:&quot; + CourseID); CourseInfo Course = null; Statement stmt = null; ResultSet rs = null; try &#123; DBConnection connection = new DBConnection(); con = connection.getConnection(); stmt = con.createStatement(); rs = stmt.executeQuery(&quot;SELECT * FROM t_course WHERE N_COURSE_ID=&quot; + CourseID); while (rs.next()) &#123; Course = new CourseInfo(); Course.setCourseID(rs.getInt(&quot;N_COURSE_ID&quot;)); Course.setName(rs.getString(&quot;VC_COURSE_NAME&quot;)); Course.setType(rs.getInt(&quot;N_TYPE&quot;)); Course.setCredit(rs.getFloat(&quot;F_CREDIT&quot;)); Course.setGrade(rs.getInt(&quot;N_GRADE&quot;)); Course.setMajor(rs.getInt(&quot;N_MAJOR&quot;)); Course.setDetail(rs.getString(&quot;VC_DETAIL&quot;)); &#125; rs.close(); stmt.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); System.out.println(&quot;获得指定课程信息失败!&quot;); &#125; finally &#123; DBConnection.closeConnection(); &#125; return Course; &#125; /*通过id更新一条课程信息*/ public void update(CourseInfo course) &#123; PreparedStatement pStmt = null; try &#123; DBConnection connection = new DBConnection(); con = connection.getConnection(); pStmt = (PreparedStatement) con.prepareStatement(&quot;UPDATE t_course SET VC_COURSE_NAME=&apos;&quot;+course.getName()+&quot;&apos;,N_TYPE=&apos;&quot;+course.getType()+&quot;&apos;,F_CREDIT=&apos;&quot;+course.getCredit()+&quot;&apos;,&quot; + &quot;N_GRADE=&apos;&quot;+course.getGrade()+&quot;&apos;,N_MAJOR=&apos;&quot;+course.getMajor()+&quot;&apos;,VC_DETAIL=&apos;&quot;+course.getDetail()+&quot;&apos;&quot; + &quot;WHERE N_COURSE_ID = ?&quot;); pStmt.setInt(1, course.getCourseID()); pStmt.executeUpdate(); pStmt.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); System.out.println(&quot;更新课程失败!&quot;); &#125; finally &#123; DBConnection.closeConnection(); &#125; &#125; /*通过id删除一条课程信息*/ public void deleteOneCourse(int courseID) &#123; System.out.println(&quot;deleteOneCourse ID:&quot; + courseID); PreparedStatement pStmt = null; try &#123; DBConnection connection = new DBConnection(); con = connection.getConnection(); pStmt = (PreparedStatement) con.prepareStatement(&quot;DELETE FROM t_course WHERE N_COURSE_ID = ?&quot;); pStmt.setInt(1, courseID); pStmt.executeUpdate(); pStmt.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); System.out.println(&quot;删除课程失败!&quot;); &#125; finally &#123; DBConnection.closeConnection(); &#125; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package course;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.MyTools;/** * Servlet implementation class CourseEditAcition */@WebServlet(&quot;/CourseEditAcition&quot;)public class CourseEditAcition extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public CourseEditAcition() &#123; super(); // TODO Auto-generated constructor stub &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doPost(request,response); //调用doPost方法 &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; CourseInfo course=new CourseInfo(); int id=(int) request.getSession().getAttribute(&quot;id&quot;); course.setCourseID(id); course.setName(MyTools.toChinese(request.getParameter(&quot;name&quot;))); course.setType(MyTools.strToint(request.getParameter(&quot;type&quot;))); course.setCredit(Float.parseFloat(request.getParameter(&quot;credit&quot;))); course.setMajor(MyTools.strToint(request.getParameter(&quot;major&quot;))); course.setGrade(MyTools.strToint(request.getParameter(&quot;grade&quot;))); course.setDetail(request.getParameter(&quot;detail&quot;)); CourseDB beanDB=new CourseDB(); beanDB.update(course); response.sendRedirect(request.getContextPath() + &quot;/CourseListAction&quot;); &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package course;public class CourseInfo &#123; int courseID; String name; int type; float credit; int grade; int major; String detail; //TODO 增加各个属性的setter和getter方法 public int getCourseID() &#123; return courseID; &#125; public void setCourseID(int courseID) &#123; this.courseID = courseID; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getType() &#123; return type; &#125; public void setType(int type) &#123; this.type = type; &#125; public float getCredit() &#123; return credit; &#125; public void setCredit(float credit) &#123; this.credit = credit; &#125; public int getGrade() &#123; return grade; &#125; public void setGrade(int grade) &#123; this.grade = grade; &#125; public int getMajor() &#123; return major; &#125; public void setMajor(int major) &#123; this.major = major; &#125; public String getDetail() &#123; return detail; &#125; public void setDetail(String detail) &#123; this.detail = detail; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package course;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import common.MyTools;/** * Servlet implementation class CourseInsertAction */@WebServlet(&quot;/CourseInsertAction&quot;)public class CourseInsertAction extends HttpServlet &#123; private static final long serialVersionUID = 1L; public CourseInsertAction() &#123; super(); &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath()); doPost(request, response); &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; //1、获取客户端提交数据 CourseInfo course=new CourseInfo(); course.setName(MyTools.toChinese(request.getParameter(&quot;name&quot;))); //TODO 1 获取新课程的其他信息并保存到course中 course.setType(MyTools.strToint(request.getParameter(&quot;type&quot;))); course.setCredit(Float.parseFloat(request.getParameter(&quot;credit&quot;))); course.setMajor(MyTools.strToint(request.getParameter(&quot;major&quot;))); course.setGrade(MyTools.strToint(request.getParameter(&quot;grade&quot;))); course.setDetail(request.getParameter(&quot;detail&quot;)); //2、处理客户端提交数据 //TODO 2 调用CourseDB插入新对象的方法实现新课程的添加 CourseDB beanDB=new CourseDB(); beanDB.insert(course); //3、向客户端做出响应 //TODO 3 重定向到查询显示课程信息列表的servlet response.sendRedirect(request.getContextPath() + &quot;/CourseListAction&quot;); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334package course;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class CourseListAction */@WebServlet(&quot;/CourseListAction&quot;)public class CourseListAction extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public CourseListAction() &#123; super(); // TODO Auto-generated constructor stub &#125; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; doPost(request,response); //调用doPost方法 &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; CourseDB beanDB=new CourseDB(); request.getSession().setAttribute(&quot;CourseList&quot;,beanDB.getAll()); response.sendRedirect(request.getContextPath()+&quot;/course/course_list.jsp&quot;); &#125;&#125; 3.coursecourse_add.jsp:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=GB18030&quot; pageEncoding=&quot;GB18030&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=GB18030&quot;&gt;&lt;title&gt;课程信息添加页面&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/exp4/css/student.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src = &quot;/exp4/js/datacheck.js&quot;&gt;&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;form name=&quot;frm&quot; method=&quot;post&quot; action=&quot;../CourseInsertAction&quot;&gt; &lt;table border=1&gt; &lt;tr class=&quot;td_header&quot;&gt;&lt;td colspan=&quot;2&quot;&gt; 课程信息录入，&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;为必填项&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&quot; size=&quot;20&quot; maxlength=&quot;20&quot;&gt;&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;20位字符&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;性质&lt;/td&gt;&lt;td&gt;&lt;select name=&quot;type&quot; size=&apos;1&apos; &gt;&lt;option value=&apos;1&apos;&gt;4&lt;/option&gt;&lt;option value=&apos;2&apos;&gt;5&lt;/option&gt;&lt;/select&gt;&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;学分&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;credit&quot; value=&quot;&quot; size=&quot;20&quot; maxlength=&quot;20&quot;&gt;&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;数值&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;开设年级&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;grade&quot; value=&quot;&quot; size=&quot;20&quot; maxlength=&quot;20&quot;&gt;&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;4位数年份&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;开设专业&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;major&quot; value=&quot;1&quot; checked&gt;1&lt;input type=&quot;radio&quot; name=&quot;major&quot; value=&quot;2&quot;&gt;2&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;备注&lt;/td&gt;&lt;td&gt;&lt;TEXTAREA name=&quot;detail&quot; rows=&quot;2&quot; cols=&quot;20&quot; onpropertychange=&quot;if(this.value.length&gt;200) &#123;this.value=value.substr(0,200);alert(&apos;描述最多200个字符!&apos;);&#125;&quot;&gt;&lt;/TEXTAREA&gt;200个字符以内&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot; onclick=&quot;return check();&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;script language=&quot;JavaScript&quot;&gt;function check()&#123; if (frm.name.value.replace(/(^\s*)|(\s*$)/g, &quot;&quot;) == &quot;&quot; || frm.name.value.length &gt; 20 || frm.name.length &lt; 5) &#123; alert(&quot;课程名称不为空且长度是5~20&quot;); frm.name.focus(); return false; &#125; if(frm.grade.value.replace(/(^\s*)|(\s*$)/g, &quot;&quot;) == &quot;&quot; ||frm.grade.value==&quot;&quot;||!IsInt(frm.year.value))&#123; alert(&quot;学分不能为空且为数值!&quot;); frm.grade.focus(); return false; &#125; if(frm.year.value.replace(/(^\s*)|(\s*$)/g, &quot;&quot;) == &quot;&quot; ||frm.year.value.length!=4||!IsInt(frm.year.value))&#123; alert(&quot;请给开设年级输入4位整数的年份!&quot;); frm.year.focus(); return false; &#125; return true;&#125; &lt;/script&gt; &lt;/table&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; course_delete.jsp:123456789101112&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=GB18030&quot; pageEncoding=&quot;GB18030&quot;%&gt;&lt;%@ page import=&quot;java.sql.*&quot; %&gt; &lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%@ page import=&quot;course.*&quot; %&gt; &lt;% String path=request.getContextPath(); int id=Integer.valueOf(request.getParameter(&quot;id&quot;)).intValue(); CourseDB beanDB=new CourseDB(); beanDB.deleteOneCourse(id); response.sendRedirect(path+&quot;/CourseListAction&quot;);%&gt; course_edit.jsp:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=GB18030&quot; pageEncoding=&quot;GB18030&quot;%&gt;&lt;%@ page import=&quot;java.sql.*&quot; %&gt; &lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%@ page import=&quot;course.*&quot; %&gt; &lt;%@ page import=&quot;common.*&quot; %&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=GB18030&quot;&gt;&lt;title&gt;课程信息修改页面&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/exp4/css/student.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src = &quot;/exp4/js/datacheck.js&quot;&gt;&lt;/script&gt;&lt;/head&gt; &lt;body&gt; &lt;form name=&quot;frm&quot; method=&quot;post&quot; action=&quot;../CourseEditAcition&quot;&gt; &lt;% int id=MyTools.strToint(request.getParameter(&quot;id&quot;)); CourseDB beanDB=new CourseDB(); CourseInfo course=beanDB.getCourseByID(id); request.getSession().setAttribute(&quot;id&quot;,id); %&gt; &lt;table border=1&gt; &lt;tr class=&quot;td_header&quot;&gt;&lt;td colspan=&quot;2&quot;&gt; 课程信息修改，&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;为必填项&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&lt;%=course.getName()%&gt;&quot; size=&quot;20&quot; maxlength=&quot;20&quot;&gt;&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;20位字符&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;性质&lt;/td&gt;&lt;td&gt;&lt;select name=&quot;type&quot; size=&apos;1&apos; &gt;&lt;option value=&apos;1&apos;&gt;4&lt;/option&gt;&lt;option value=&apos;2&apos;&gt;5&lt;/option&gt;&lt;/select&gt;&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;学分&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;credit&quot; value=&quot;&lt;%=course.getCredit()%&gt;&quot; size=&quot;20&quot; maxlength=&quot;20&quot;&gt;&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;数值&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;开设年级&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;grade&quot; value=&quot;&lt;%=course.getGrade()%&gt;&quot; size=&quot;20&quot; maxlength=&quot;20&quot;&gt;&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;4位数年份&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;开设专业&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;radio&quot; name=&quot;major&quot; value=&quot;1&quot;&lt;%if(course.getMajor()==1)%&gt;&lt;%=&quot;checked&quot;%&gt;&gt;1&lt;input type=&quot;radio&quot; name=&quot;major&quot; value=&quot;2&quot; &lt;%if(course.getMajor()==2)%&gt;&lt;%=&quot;checked&quot;%&gt;&gt;2&lt;span class=&quot;star&quot;&gt;*&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;备注&lt;/td&gt;&lt;td&gt;&lt;TEXTAREA name=&quot;detail&quot; rows=&quot;2&quot; cols=&quot;20&quot; onpropertychange=&quot;if(this.value.length&gt;200) &#123;this.value=value.substr(0,200);alert(&apos;描述最多200个字符!&apos;);&#125;&quot;&gt;&lt;/TEXTAREA&gt;200个字符以内&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot; onclick=&quot;return check();&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;script language=&quot;JavaScript&quot;&gt;function check()&#123; if (frm.name.value.replace(/(^\s*)|(\s*$)/g, &quot;&quot;) == &quot;&quot; || frm.name.value.length &gt; 20 || frm.name.length &lt; 5) &#123; alert(&quot;课程名称不为空且长度是5~20&quot;); frm.name.focus(); return false; &#125; if(frm.grade.value.replace(/(^\s*)|(\s*$)/g, &quot;&quot;) == &quot;&quot; ||frm.grade.value==&quot;&quot;||!IsInt(frm.year.value))&#123; alert(&quot;学分不能为空且为数值!&quot;); frm.grade.focus(); return false; &#125; if(frm.year.value.replace(/(^\s*)|(\s*$)/g, &quot;&quot;) == &quot;&quot; ||frm.year.value.length!=4||!IsInt(frm.year.value))&#123; alert(&quot;请给开设年级输入4位整数的年份!&quot;); frm.year.focus(); return false; &#125; return true;&#125; &lt;/script&gt; &lt;/table&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; course_list.jsp:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=GB18030&quot; pageEncoding=&quot;GB18030&quot;%&gt;&lt;%@ page import=&quot;java.sql.*&quot; %&gt; &lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%@ page import=&quot;course.*&quot; %&gt; &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;&lt;% String path=request.getContextPath(); ArrayList&lt;CourseInfo&gt; dist=(ArrayList&lt;CourseInfo&gt;)request.getSession().getAttribute(&quot;CourseList&quot;); if(dist==null)&#123; dist=new ArrayList &lt;CourseInfo&gt;(); &#125;%&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=GB18030&quot;&gt;&lt;title&gt;课程信息列表页面&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/exp4/css/student.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;table width=&quot;100%&quot; height=&quot;100&quot; border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td height=&quot;25&quot; colspan=&quot;7&quot; class=&quot;tb_showall&quot; align=&quot;center&quot;&gt; 课程信息列表 &lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;td_header&quot;&gt; &lt;td&gt;名称&lt;/td&gt; &lt;td&gt;性质&lt;/td&gt; &lt;td&gt;学分&lt;/td&gt; &lt;td&gt;开设年级&lt;/td&gt; &lt;td&gt;开设专业&lt;/td&gt; &lt;td&gt;备注&lt;/td&gt; &lt;/tr&gt;&lt;% int count=dist.size(); for(int i=0;i&lt;count;i++)&#123; CourseInfo course=dist.get(i);%&gt; &lt;tr class=&quot;td_&lt;%=course.getCourseID()%&gt;&quot;&gt;&lt;% out.print(&quot;&lt;td&gt;&quot;+course.getName()+&quot;&lt;/td&gt;&quot;); out.print(&quot;&lt;td&gt;&quot;+course.getType()+&quot;&lt;/td&gt;&quot;); out.print(&quot;&lt;td&gt;&quot;+course.getCredit()+&quot;&lt;/td&gt;&quot;); out.print(&quot;&lt;td&gt;&quot;+course.getGrade()+&quot;&lt;/td&gt;&quot;); out.print(&quot;&lt;td&gt;&quot;+course.getMajor()+&quot;&lt;/td&gt;&quot;); out.print(&quot;&lt;td&gt;&quot;+course.getDetail()+&quot;&lt;/td&gt;&quot;);%&gt; &lt;td&gt; &lt;a href=&quot;course_edit.jsp?id=&lt;%=course.getCourseID()%&gt;&quot;&gt;编辑&lt;/a&gt; &lt;a href=&quot;course_delete.jsp?id=&lt;%=course.getCourseID()%&gt;&quot;&gt;删除&lt;/a&gt; &lt;/td&gt;&lt;% out.print(&quot;&lt;/tr&gt;&quot;); &#125;%&gt; &lt;tr&gt;&lt;td colspan=&quot;4&quot;&gt;&lt;a href=&quot;/exp4/course/course_add.jsp&quot;&gt;添加&lt;/a&gt; &lt;td colspan=&quot;4&quot;&gt;&lt;a href=&quot;/exp4/course/course_list.jsp&quot;&gt;刷新数据列表&lt;/a&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; 4.cssstudent.css:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162.td8 &#123; BACKGROUND-COLOR: #f1fbf1; BORDER-BOTTOM: #a1a1a1 1pt solid&#125;BODY &#123; COLOR: #000000; FONT-FAMILY: 宋体; FONT-SIZE: 9pt&#125;TD &#123; FONT-FAMILY: 宋体; FONT-SIZE: 9pt; LINE-HEIGHT: 15pt&#125;INPUT &#123; FONT-FAMILY: 宋体; FONT-SIZE: 9pt&#125;.nav &#123; COLOR: #e51585; FONT-FAMILY: 宋体; FONT-SIZE: 9pt&#125;A:link &#123; COLOR: #5b2222; TEXT-DECORATION: none&#125;A:visited &#123; COLOR: #5b2222; TEXT-DECORATION: none&#125;A:active &#123; TEXT-DECORATION: underline&#125;A:hover &#123; TEXT-DECORATION: underline&#125;.p6 &#123; FONT-SIZE: 18px; FONT-WEIGHT: bolder; LETTER-SPACING: 6pt&#125;.td1 &#123; BACKGROUND-COLOR: #e6e6e6&#125;.td_header &#123; BACKGROUND-COLOR: #e6e6e6; COLOR: #000000&#125;.td_1 &#123; BACKGROUND-COLOR: #f8fbfb; COLOR: #000000&#125;.td_2 &#123; BACKGROUND-COLOR: #deecec; COLOR: #000000&#125;.td3 &#123; BACKGROUND-COLOR: #a3d1d2; COLOR: black&#125;.underline &#123; BORDER-BOTTOM: #c4c4c4 1pt solid; BORDER-LEFT: #c4c4c4; BORDER-RIGHT: #c4c4c4; BORDER-TOP: #c4c4c4&#125;.button &#123; border:1px solid black; background-color:white; cursor:hand;&#125;.star &#123; COLOR: red&#125;.tb_showall&#123;background:#0078B7; font-size: 18px;font-weight: bold;&#125; 5.jsdatacheck.js:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305/*==================================================================�ַ�������Trim(string):ȥ���ַ������ߵĿո�==================================================================*//*==================================================================LTrim(string):ȥ����ߵĿո�==================================================================*/function LTrim(str)&#123; var whitespace = new String(&quot; \t\n\r&quot;); var s = new String(str); if (whitespace.indexOf(s.charAt(0)) != -1) &#123; var j=0, i = s.length; while (j &lt; i &amp;&amp; whitespace.indexOf(s.charAt(j)) != -1) &#123; j++; &#125; s = s.substring(j, i); &#125; return s;&#125;/*==================================================================RTrim(string):ȥ���ұߵĿո�==================================================================*/function RTrim(str)&#123; var whitespace = new String(&quot; \t\n\r&quot;); var s = new String(str); if (whitespace.indexOf(s.charAt(s.length-1)) != -1) &#123; var i = s.length - 1; while (i &gt;= 0 &amp;&amp; whitespace.indexOf(s.charAt(i)) != -1) &#123; i--; &#125; s = s.substring(0, i+1); &#125; return s;&#125;/*==================================================================Trim(string):ȥ��ǰ��ո�==================================================================*/function Trim(str)&#123; return RTrim(LTrim(str));&#125;/*IsInt(string,string,int or string):(�����ַ���,+ or - or empty,empty or 0)���ܣ��ж��Ƿ�Ϊ����������������������������+0��������+0*/function IsInt(objStr,sign,zero)&#123; var reg; var bolzero; if(Trim(objStr)==&quot;&quot;) &#123; return false; &#125; else &#123; objStr=objStr.toString(); &#125; if((sign==null)||(Trim(sign)==&quot;&quot;)) &#123; sign=&quot;+-&quot;; &#125; if((zero==null)||(Trim(zero)==&quot;&quot;)) &#123; bolzero=false; &#125; else &#123; zero=zero.toString(); if(zero==&quot;0&quot;) &#123; bolzero=true; &#125; else &#123; alert(&quot;����Ƿ����0������ֻ��Ϊ(�ա�0)&quot;); &#125; &#125; switch(sign) &#123; case &quot;+-&quot;: //���� reg=/(^-?|^\+?)\d+$/; break; case &quot;+&quot;: if(!bolzero) &#123; //������ reg=/^\+?[0-9]*[1-9][0-9]*$/; &#125; else &#123; //������+0 //reg=/^\+?\d+$/; reg=/^\+?[0-9]*[0-9][0-9]*$/; &#125; break; case &quot;-&quot;: if(!bolzero) &#123; //������ reg=/^-[0-9]*[1-9][0-9]*$/; &#125; else &#123; //������+0 //reg=/^-\d+$/; reg=/^-[0-9]*[0-9][0-9]*$/; &#125; break; default: alert(&quot;�����Ų�����ֻ��Ϊ(�ա�+��-)&quot;); return false; break; &#125; var r=objStr.match(reg); if(r==null) &#123; return false; &#125; else &#123; return true; &#125;&#125; 6.libweb.xml:123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:web=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&gt; &lt;display-name&gt;exp4&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt;&lt;/web-app&gt; 7.index.jsp123&lt;%@ page contentType=&quot;text/html; charset=GB2312&quot;%&gt;&lt;% String path = request.getContextPath(); response.sendRedirect(path+&quot;/CourseListAction&quot;);%&gt;]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql数据库作业练习]]></title>
    <url>%2F2018%2F05%2F10%2Fsql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[1.找出CS系中的所有女生 2．找出所有考试不及格的学生学号3．查找所有姓刘的学生的学号、姓名、系科、性别4．以系科和年龄从大到小的顺序查询学生表中的全部记录5．找出IS系中所有小于20岁的学生和MA系中所有的男生的详细资料6．找出所有学生的详细资料，按学号的降序排列7．按照课程进行汇总，输出课程号、平均分和选修人数8．查找选修了课程的学生的姓名、学号、系科9．查找有学生选修的课程的课程名和学分10．用存在量词Exists查找没有选修课程的学生姓名、学号、系科11．查找课程1的选修情况，要求显示选修学生的姓名、学号、成绩、系科、性别12．查找每门课程的后续课程名称、学分13．查找每位学生选课课程的总学分14．查询至少有2名男生的系科名称15．按照系科统计平均分在60~70的学生人数16．查询成绩比该课程平均成绩低的同学的成绩表（学号、姓名、课程名称、成绩）17．查找所有平均分高于80的学生的学号、姓名、性别、系科]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12306查票订票]]></title>
    <url>%2F2018%2F04%2F16%2F12306%E6%9F%A5%E7%A5%A8%E8%AE%A2%E7%A5%A8%2F</url>
    <content type="text"><![CDATA[参考链接：https://blog.csdn.net/lzqwebsoft/article/details/18674635https://www.lanindex.com/12306%E8%B4%AD%E7%A5%A8%E6%B5%81%E7%A8%8B%E5%85%A8%E8%A7%A3%E6%9E%90/ 模拟查票订票操作如下：1.首先12306是一个需要登录操作的网站，然而12306的登录验证大家都知道需要验证码。另外12306的验证码很坑~，需要人工选择对应的物品，这个用代码识别网上我也没找到好的教程，于是… 于是只能人工识别啦。。2.登录之后我们需要输入起始地，目的地，时间等信息，然后查询3.此时我们可以查询到车次信息了，根据自己的时间然后订合适时间和合适座位的票4.选择乘坐人5.建立好订单6.付款，订票成功 显然我们做到第5步已经达到我们用爬虫的目的。1.登录操作请参考：http://www.cnblogs.com/fangtaoa/p/8321449.html2.查票操作请参考：http://www.cnblogs.com/fangtaoa/p/8360460.html3.下面补充订票操作:按照置顶的参考链接里的步骤获取url和data数据，具体可以看代码类buy确实没什么地方需要多说的，有前驱者已经铺好路了，只需按照步骤一步一步理解就可以了下面补充操作方式： 每一步都有相应的步骤名称，如果哪一步出错了只需在代码中寻找具体是哪个函数没对即可。下面给出代码：1.login.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172import requestsimport chardetimport userimport settingsfrom coordinate import coorfrom lxml import etreeclass Login: def __init__(self): self.headers = settings.headers self.session = settings.session self.id = user.id self.psw = user.psw def down_captcha(self): # &apos;&apos;&apos; # 下载验证码 # &apos;&apos;&apos; response = self.session.get(&apos;https://kyfw.12306.cn/passport/captcha/captcha-image?login_site=E&amp;module=login&amp;rand=sjrand&amp;0.7067378301290344&apos;) codeImg = response.content fp = open(&apos;code.png&apos;, &apos;wb&apos;) fp.write(codeImg) fp.close() def get_pos(self): # &apos;&apos;&apos; # 输入验证码坐标 # &apos;&apos;&apos; coordinate = coor() return coordinate def captcha_check(self): # &apos;&apos;&apos; # 验证码初验证 # &apos;&apos;&apos; check_flag = False data = &#123; &apos;answer&apos;: self.get_pos(), &apos;login_site&apos;:&apos;E&apos;, &apos;rand&apos;: &apos;sjrand&apos; &#125; url = &apos;https://kyfw.12306.cn/passport/captcha/captcha-check&apos; response = self.session.post(url, data=data, headers=self.headers) result = response.json() if result[&apos;result_code&apos;] == &apos;4&apos;: print(&apos;验证码通过!&apos;) check_flag = True else: print(&apos;验证码验证失败!&apos;) return check_flag def login(self, check_flag): # &apos;&apos;&apos; # 进行第一步登录 # &apos;&apos;&apos; if not check_flag: print(&apos;login() error: check_flag为False.&apos;) return False login_flag=False login_data = &#123; &apos;username&apos;: self.id, &apos;password&apos;: self.psw, &apos;appid&apos;: &apos;otn&apos; &#125; login_url = &apos;https://kyfw.12306.cn/passport/web/login&apos; login_response = self.session.post(login_url, data=login_data, headers=self.headers) #设置网页编码 if chardet.detect(login_response.content).get(&apos;encoding&apos;) != &apos;UTF-8&apos;: login_response.encoding = &apos;UTF-8&apos; if login_response.status_code == 200 and &apos;error&apos; not in login_response.url: print(&apos;登录成功！&apos;) login_flag = True else: print(&apos;登录失败！&apos;) return login_flag def auth_uamtk(self,login_flag): # &apos;&apos;&apos; # 进行登录的验证 # &apos;&apos;&apos; data = &#123; &apos;appid&apos;: &apos;otn&apos;, &#125; url = &apos;https://kyfw.12306.cn/passport/web/auth/uamtk&apos; resp = self.session.post(url, data=data, headers=self.headers) if resp.status_code == 200: result = dict(resp.json()) print(&apos;auth_uamtk():&apos;, result[&apos;result_message&apos;]) if result.get(&apos;result_code&apos;) == 0:## return result.get(&apos;newapptk&apos;) else: return None else: print(&apos;登录验证失败！&apos;) return None def uamatuth_client(self, newapptk): # &apos;&apos;&apos; # 确认是否真正的登录成功 # :param newapptk: # :return: # &apos;&apos;&apos; if newapptk is None: print(&apos;并没有真正的登录成功！&apos;) return None data = &#123; &apos;tk&apos;: newapptk, &#125; url = &apos;https://kyfw.12306.cn/otn/uamauthclient&apos; resp = self.session.post(url, data=data, headers=self.headers) if resp.status_code == 200: result = dict(resp.json()) print(&apos;uamatuth_client()&apos;, result.get(&apos;result_message&apos;)) if result.get(&apos;result_code&apos;) == 0: username = result.get(&apos;username&apos;) print(&apos;&#123;&#125;初始化登录成功!&apos;.format(username)) return username else: print(&apos;uamatuth_client() error! status_code:&#123;&#125;, url:&#123;&#125;&apos; .format(resp.status_code, resp.url)) def init_my_12306(self, username): if username is None: print(&apos;init_my_12306() error: username 为None!&apos;) return url = &apos;https://kyfw.12306.cn/otn/index/initMy12306&apos; resp = self.session.get(url, headers=self.headers) if resp.status_code == 200: content = etree.HTML(resp.content) #先用etree转化 name = content.xpath(&apos;//*[@id=&quot;login_user&quot;]/span/text()&apos;) print(&apos;init_my_12306(): name&apos;, name) if name == username: print(&apos;init_my_12306():你已经登录成功了!&apos;) else: print(&apos;init_my_12306() error! status_code:&#123;&#125;, url:&#123;&#125;&apos;. format(resp.status_code, resp.url))def main(): login = Login() login.down_captcha() check_flag = login.captcha_check() login_flag = login.login(check_flag) if login_flag: newapptk = login.auth_uamtk(login_flag) username = login.uamatuth_client(newapptk) login.init_my_12306(username) else: print(&apos;main():login_flag为Flase&apos;)if __name__ == &apos;__main__&apos;: main() 2.user.py此处根据自己账户和名称写出id 和 psw 即可 id = ‘1111111’#账户名psw = ‘222222’#密码 3.settings.py 123456789101112131415import randomimport requests#随机选择一个有效的UA来请求头信息User_Agent = [ &apos;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&apos;, &apos;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&apos;, &apos;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0&apos;, &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&apos;, &apos;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11&apos;, &apos;Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&apos;, &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&apos;,]session = requests.Session()headers = &#123;&apos;user-agent&apos;: random.choice(User_Agent)&#125; 4.stations.pyfrom login import Loginimport osimport jsonimport timefrom collections import deque, OrderedDictclass Station: &quot;&quot;&quot; 查询车票信息 &quot;&quot;&quot; def __init__(self): # 使用登录时候的session,这样好一些! self.headers = Login().headers self.session = Login().session self.station_info = deque() def station_name_code(self): &quot;&quot;&quot; 功能:获取每个站点的名字和对应的代码,并保存到本地 :return: 无 &quot;&quot;&quot; filename = &apos;station_name.txt&apos; url = &apos;https://kyfw.12306.cn/otn/resources/js/framework/station_name.js&apos; resp = self.session.get(url, headers=self.headers) if resp.status_code == 200: print(&apos;station_name_code():获取站点信息成功!&apos;) with open(filename, &apos;w&apos;) as f: for each in resp.text.split(&apos;=&apos;)[1].split(&apos;@&apos;): if each != &quot;&apos;&quot;: f.write(each) f.write(&apos;\n&apos;) else: print(&apos;station_name_code() error! status_code:&#123;&#125;, url: &#123;&#125;&apos; .format(resp.status_code, resp.url)) def save_station_code(self, filename): &quot;&quot;&quot; 功能:从站点文件中提取站点与其对应的代码,并保存到文件中 :return: &quot;&quot;&quot; if not os.path.exists(filename): print(&apos;save_station_code():&apos;, filename, &apos;不存在,正在下载!&apos;) self.station_name_code() file = &apos;name_code.json&apos; name_code_dict = &#123;&#125; with open(filename, &apos;r&apos;) as f: for line in f: # 对读取的行都进行split操作,然后提取站点名和其代码 name = line.split(&apos;|&apos;)[1] # 站点名字 code = line.split(&apos;|&apos;)[2] # 每个站点对应的代码 # 每个站点肯定都是唯一的 name_code_dict[name] = code # 把name,code保存到本地文件中,方便以后使用 with open(file, &apos;w&apos;) as f: # 不以ascii码编码的方式保存 json.dump(name_code_dict, f, ensure_ascii=False) def query_ticket(self): &quot;&quot;&quot; 功能:查票操作 :return: 返回查询到的所有车次信息 &quot;&quot;&quot; data = self._query_prompt() if not data: print(&apos;query_ticket() error: &#123;&#125;&apos;.format(data)) _, from_station, to_station = data.keys() train_date = data.get(&apos;train_date&apos;) from_station_code = data.get(from_station) to_station_code = data.get(to_station) query_param = &apos;leftTicketDTO.train_date=&#123;&#125;&amp;&apos; \ &apos;leftTicketDTO.from_station=&#123;&#125;&amp;&apos; \ &apos;leftTicketDTO.to_station=&#123;&#125;&amp;&apos; \ &apos;purpose_codes=ADULT&apos;\ .format(train_date, from_station_code, to_station_code) url = &apos;https://kyfw.12306.cn/otn/leftTicket/query?&apos; full_url = url + query_param resp = self.session.get(full_url, headers=self.headers) if resp.status_code == 200 and resp.url == full_url: print(&apos;query_ticket() 成功!然后进行车票清理工作!&apos;) self._get_train_info(resp.json(), from_station, to_station) else: print(&apos;query_ticket() error! status_code:&#123;&#125;, url:&#123;&#125;\norigin_url:&#123;&#125;&apos; .format(resp.status_code, resp.url, full_url)) return self.station_info, train_date, from_station_code, to_station_code def _get_train_info(self, text, from_station, to_station): &quot;&quot;&quot; 功能:提取出查询到的列车信息 :param text: 包含所有从起点站到终点站的车次信息 :return: 返回所有车次信息 &quot;&quot;&quot; if not text: print(&apos;_query_train_info() error: text为:&apos;, text) # 把json文件转变成字典形式 result = dict(text) # 判断有无车次的标志 if result.get(&apos;data&apos;).get(&apos;map&apos;): train_info = result.get(&apos;data&apos;).get(&apos;result&apos;) train_list = deque() for item in train_info: split_item = item.split(&apos;|&apos;) item_dict = &#123;&#125; # for index, item in enumerate(split_item,0): # print(&apos;&#123;&#125;:\t&#123;&#125;&apos;.format(index, item)) if split_item[11] == &apos;Y&apos;: # 已经开始卖票了 item_dict[&apos;train_id&apos;] = split_item[0] item_dict[&apos;train_name&apos;] = split_item[3] # 车次名 item_dict[&apos;depart_time&apos;] = split_item[8] # 出发时间 item_dict[&apos;arrive_time&apos;] = split_item[9] # 到站时间 item_dict[&apos;spend_time&apos;] = split_item[10] # 经历时长 item_dict[&apos;wz&apos;] = split_item[29] # 无座 item_dict[&apos;yz&apos;] = split_item[28] # 硬座 item_dict[&apos;yw&apos;] = split_item[26] # 硬卧 item_dict[&apos;rw&apos;] = split_item[23] # 软卧 item_dict[&apos;td&apos;] = split_item[32] # 特等座 item_dict[&apos;yd&apos;] = split_item[31] # 一等座 item_dict[&apos;ed&apos;] = split_item[30] # 二等座 item_dict[&apos;dw&apos;] = split_item[33] # 动卧 train_list.append(item_dict) self.station_info.append(item_dict) # 无法买票的车次,有可能是已卖光,也有可能是还不开卖 elif split_item[0] == &apos;&apos;: print(&apos;_query_train_info():车次&#123;&#125;的票暂时不能购买!&apos; .format(split_item[3])) else: print(&apos;_query_train_info():车次&#123;&#125;还未开始卖票,起售时间为:&#123;&#125;&apos; .format(split_item[3], split_item[1])) # 调用方法来打印列车结果 self._print_train(train_list, from_station, to_station) else: print(&apos;_get_train_info() error: 从&#123;&#125;站到&#123;&#125;站有没列车!&apos; .format(from_station, to_station)) def _print_train(self, train_info, from_station, to_station): &quot;&quot;&quot; 功能:打印查询到的车次信息 :param train_info: 提取出来的车次信息 :return: &quot;&quot;&quot; if not train_info: print(&apos;_print_train() error: train_info是None!&apos;) return print(&apos;从&#123;&#125;到&#123;&#125;还有余票的列车有:&apos;.format(from_station, to_station)) for item in train_info: if &apos;G&apos; in item[&apos;train_name&apos;]: # 高铁 self._print_high_train_info(item) elif &apos;D&apos; in item[&apos;train_name&apos;]: # 动车 self._print_dong_train_info(item) else: self._print_train_info(item) def _print_high_train_info(self, item): &quot;&quot;&quot; 功能:打印高铁车次信息 :param item: 所有高铁车次 :return: &quot;&quot;&quot; print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t&apos; &apos;经历时长:&#123;:4s&#125;\t特等座:&#123;:4s&#125;\t一等座:&#123;:4s&#125;\t二等座:&#123;:4s&#125;&apos; .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;],item[&apos;arrive_time&apos;], item[&apos;spend_time&apos;],item[&apos;td&apos;], item[&apos;yd&apos;], item[&apos;ed&apos;])) def _print_dong_train_info(self, item): &quot;&quot;&quot; 功能:打印动车的车票信息 :param item: 所有动车车次 :return: &quot;&quot;&quot; print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t&apos; &apos;经历时长:&#123;:4s&#125;\t一等座:&#123;:4s&#125;\t二等座:&#123;:4s&#125;\t软卧:&#123;:4s&#125;\t动卧:&#123;:4s&#125;&apos; .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;], item[&apos;arrive_time&apos;], item[&apos;spend_time&apos;],item[&apos;yd&apos;],item[&apos;ed&apos;], item[&apos;rw&apos;], item[&apos;dw&apos;])) def _print_train_info(self,item): &quot;&quot;&quot; 功能:打印普通列出的车次信息 :param item: 所有普通车次 :return: &quot;&quot;&quot; print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t经历时长:&#123;:4s&#125;\t&apos; &apos;软卧:&#123;:4s&#125;\t硬卧:&#123;:4s&#125;\t硬座:&#123;:4s&#125;\t无座:&#123;:4s&#125;&apos; .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;], item[&apos;arrive_time&apos;], item[&apos;spend_time&apos;],item[&apos;rw&apos;], item[&apos;yw&apos;], item[&apos;yz&apos;], item[&apos;wz&apos;])) def _query_prompt(self): &quot;&quot;&quot; 功能: 与用户交互,让用户输入:出发日期,起始站和终点站并判断其正确性 :return: 返回正确的日期,起始站和终点站 &quot;&quot;&quot; time_flag, train_date = self._check_date() if not time_flag: print(&apos;_query_prompt() error:&apos;, &apos;乘车日期不合理,请检查!!&apos;) return # 创建有序字典,方便取值 query_data = OrderedDict() from_station = input(&apos;请输入起始站:&apos;) to_station = input(&apos;请输入终点站:&apos;) station_flag = True filename = &apos;name_code.json&apos; with open(filename, &apos;r&apos;) as f: data = dict(json.load(f)) stations = data.keys() if from_station not in stations or to_station not in stations: station_flag = False print(&apos;query_prompt() error: &#123;&#125;或&#123;&#125;不在站点列表中!!&apos; .format(from_station, to_station)) # 获取起始站和终点站的代码 from_station_code = data.get(from_station) to_station_code = data.get(to_station) query_data[&apos;train_date&apos;] = train_date query_data[from_station] = from_station_code query_data[to_station] = to_station_code if time_flag and station_flag: return query_data else: print(&apos;query_prompt() error! time_flag:&#123;&#125;, station_flag:&#123;&#125;&apos; .format(time_flag, station_flag)) def _check_date(self): &quot;&quot;&quot; 功能:检测乘车日期的正确性 :return: 返回时间是否为标准的形式的标志 &quot;&quot;&quot; # 获取当前时间的时间戳 local_time = time.localtime() local_date = &apos;&#123;&#125;-&#123;&#125;-&#123;&#125;&apos;.\ format(local_time.tm_year, local_time.tm_mon, local_time.tm_mday) curr_time_array = time.strptime(local_date, &apos;%Y-%m-%d&apos;) curr_time_stamp = time.mktime(curr_time_array) # 获取当前时间 curr_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(curr_time_stamp)) # 计算出预售时长的时间戳 delta_time_stamp = &apos;2505600&apos; # 算出预售票的截止日期时间戳 dead_time_stamp = int(curr_time_stamp) + int(delta_time_stamp) dead_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(dead_time_stamp)) print(&apos;合理的乘车日期范围是:(&#123;&#125;)~(&#123;&#125;)&apos;.format(curr_time, dead_time)) train_date = input(&apos;请输入乘坐日期(year-month-day):&apos;) # 把乘车日期转换成时间戳来比较 # 先生成一个时间数组 time_array = time.strptime(train_date, &apos;%Y-%m-%d&apos;) # 把时间数组转化成时间戳 train_date_stamp = time.mktime(time_array) # 获取标准的乘车日期 train_date_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(train_date_stamp)) # 做上面几步主要是把用户输入的时间格式转变成标准的格式 # 如用户输入:2018-2-22,那么形成的查票URL就不是正确的 # 只有是: 2018-02-22,组合的URL才是正确的! # 通过时间戳来比较时间的正确性 if int(train_date_stamp) &gt;= int(curr_time_stamp) and \ int(train_date_stamp) &lt;= dead_time_stamp: return True, train_date_time else: print(&apos;_check_date() error: 乘车日期:&#123;&#125;, 当前系统时间:&#123;&#125;, 预售时长为:&#123;&#125;&apos; .format(train_date_time, curr_time, dead_time)) return False, Nonedef main(): filename = &apos;station_name.txt&apos; station = Station() station.station_name_code() station.save_station_code(filename) station.query_ticket()if __name__ == &apos;__main__&apos;: main() 5.coordinate.py(验证码坐标 1234567891011121314def coor(): arr = [[],[&apos;45&apos;,&apos;45&apos;],[&apos;110&apos;,&apos;45&apos;],[&apos;175&apos;,&apos;45&apos;],[&apos;240&apos;,&apos;45&apos;], [&apos;45&apos;,&apos;110&apos;],[&apos;110&apos;,&apos;110&apos;],[&apos;175&apos;,&apos;110&apos;],[&apos;240&apos;,&apos;110&apos;]] cnt = input(&apos;请输入验证码坐标，以,隔开\n&apos;) Str = [] for i in cnt: if i == &apos;,&apos;: continue else: Str = Str + arr[int(i)] return &apos;,&apos;.join(Str) 6.buy.pyimport requestsimport chardetimport urllib.parseimport settingsfrom login import Loginfrom stations import Stationimport reimport timeimport datetimeimport stationsclass Buy: def __init__(self): # 使用登录时候的session,这样好一些! self.headers = settings.headers self.session = settings.session def checkUser(self): &quot;&quot;&quot; 功能:验证登录 :return: 无 &quot;&quot;&quot; url = &apos;https://kyfw.12306.cn/otn/login/checkUser&apos; data = &#123; &apos;_json_att&apos;: &apos;&apos;, &#125; resp = self.session.post(url, data=data, headers=self.headers) result = resp.json() checkUser_flag = result[&apos;status&apos;] if checkUser_flag == True: print(&apos;验证登录成功！&apos;) def get_secretStr(self, station_info): &quot;&quot;&quot; 功能:返回高铁车次信息 :param item: 单车次信息 :return: &quot;&quot;&quot; val = str(input(&apos;请输入订票的车次:&apos;)) for item in station_info: if item[&apos;train_name&apos;] == val: return item[&apos;train_id&apos;] def submitOrderRequest(self, station_info): url = &apos;https://kyfw.12306.cn/otn/leftTicket/submitOrderRequest&apos; cnt = self.get_secretStr(station_info) Str = urllib.parse.unquote(cnt) # 获取当前时间的时间戳 local_time = time.localtime() local_date = &apos;&#123;&#125;-&#123;&#125;-&#123;&#125;&apos;.\ format(local_time.tm_year, local_time.tm_mon, local_time.tm_mday) curr_time_array = time.strptime(local_date, &apos;%Y-%m-%d&apos;) curr_time_stamp = time.mktime(curr_time_array) # 获取当前时间 curr_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(curr_time_stamp)) train_date = input(&apos;请再次确认乘坐日期(year-month-day):&apos;) query_from_station_name = input(&apos;请再次输入起始站:&apos;) query_to_station_name = input(&apos;请再次输入终点站:&apos;) data = &#123; &apos;secretStr&apos;: Str, &apos;train_date&apos;: train_date, &apos;back_train_date&apos;: curr_time, &apos;tour_flag&apos;: &apos;dc&apos;, &apos;purpose_codes&apos;: &apos;ADULT&apos;, &apos;query_from_station_name&apos;: query_from_station_name, &apos;query_to_station_name&apos;: query_to_station_name, &apos;undefined&apos;: &apos;&apos;, &#125; resp = self.session.post(url, data=data, headers=self.headers) if resp.status_code == 200: print(&apos;submitOrderRequest成功！&apos;) else: print(&apos;submitOrderRequest() error! status_code:&#123;&#125;, url:&#123;&#125;&apos;. format(resp.status_code, resp.url)) def initDc(self): &quot;&quot;&quot; 功能:请求提交购票人信息和选择购票坐票或者卧铺类型页面 :return: 无 &quot;&quot;&quot; url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/initDc&apos; data = &#123; &apos;_json_att&apos;: &apos;&apos;, &#125; resp = self.session.post(url, data=data, headers=self.headers) #设置网页编码 if chardet.detect(resp.content).get(&apos;encoding&apos;) != &apos;UTF-8&apos;: resp.encoding = &apos;UTF-8&apos; match = re.search(&quot;var globalRepeatSubmitToken = &apos;(.*?)&apos;;&quot;, resp.text) ticketToken = match.group(1) people_url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/getPassengerDTOs&apos; people_resp = self.session.post(people_url, data=&#123;&quot;REPEAT_SUBMIT_TOKEN&quot;:ticketToken,&quot;_json_att&quot;:&quot;&quot;&#125;, headers=self.headers) people_json = people_resp.json() result = dict(people_json) info = result[&apos;data&apos;][&apos;normal_passengers&apos;][1] train_no = re.search(&quot;&apos;train_no&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1) leftTicket = re.search(&quot;&apos;ypInfoDetail&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1) purpose_codes = re.search(&quot;&apos;purpose_codes&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1) station_train_code = re.search(&quot;&apos;station_train_code&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1) to_station_telecode = re.search(&quot;&apos;to_station_telecode&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1) train_location = re.search(&quot;&apos;train_location&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1) key_check_isChange = re.search(&quot;&apos;key_check_isChange&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1) return info, ticketToken, train_no, leftTicket, purpose_codes, station_train_code, to_station_telecode, train_location, key_check_isChange def checkOrderInfo(self, info, ticketToken): url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/checkOrderInfo&apos; passengerTicketStr = &apos;O,0,1,&apos; + info[&apos;passenger_name&apos;] + &apos;,1,&apos; + info[&apos;passenger_id_no&apos;] + &apos;,&apos; + info[&apos;mobile_no&apos;] + &apos;,N&apos; oldPassengerStr = info[&apos;passenger_name&apos;] + &apos;,1,&apos; + info[&apos;passenger_id_no&apos;] + &apos;,1_&apos; data = &#123; &apos;cancel_flag&apos;: &apos;2&apos;, &apos;bed_level_order_num&apos;: &apos;000000000000000000000000000000&apos;, &apos;passengerTicketStr&apos;: passengerTicketStr, &apos;oldPassengerStr&apos;: oldPassengerStr,# &apos;tour_flag&apos;: &apos;dc&apos;, &apos;randCode&apos;: &apos;&apos;, &apos;whatsSelect&apos;: &apos;1&apos;, &apos;_json_att&apos;: &apos;&apos;, &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,# &#125; resp = self.session.post(url, data=data, headers=self.headers) result = dict(resp.json()) if result[&apos;data&apos;][&apos;submitStatus&apos;] == True: print(&apos;checkOrderInfo成功！&apos;) else: print(&apos;checkOrderInfo失败！&apos;) return passengerTicketStr, oldPassengerStr def getQueueCount(self, trainDate, train_no, leftTicket, ticketToken, station_train_code, fromStationTelecode, to_station_telecode, purpose_codes, train_location, passengerTicketStr, oldPassengerStr, key_check_isChange): url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/getQueueCount&apos; data = &#123; &apos;train_date&apos;: datetime.datetime.fromtimestamp(time.mktime(time.strptime(trainDate, &apos;%Y-%m-%d&apos;))).strftime(&apos;%a %b %d %Y %H:%M:%S GMT+0800&apos;), &apos;train_no&apos;: train_no, &apos;stationTrainCode&apos;: station_train_code, &apos;seatType&apos;: &apos;O&apos;, &apos;fromStationTelecode&apos;: fromStationTelecode, &apos;toStationTelecode&apos;: to_station_telecode, &apos;leftTicket&apos;: leftTicket, &apos;purpose_codes&apos;: purpose_codes, &apos;train_location&apos;: train_location, &apos;_json_att&apos;: &apos;&apos;, &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken, &#125; resp = self.session.post(url, data=data, headers=self.headers) queueCountJson = resp.json() if queueCountJson.get(&quot;status&quot;) == False or queueCountJson.get(&quot;httpstatus&quot;) != 200: raise Exception(&quot;获取队列错误&quot;) url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/confirmSingleForQueue&apos; data = &#123; &apos;passengerTicketStr&apos;: passengerTicketStr, &apos;oldPassengerStr&apos;: oldPassengerStr, &apos;randCode&apos;: &apos;&apos;, &apos;purpose_codes&apos;: purpose_codes, &apos;key_check_isChange&apos;: key_check_isChange, &apos;leftTicketStr&apos;: leftTicket, &apos;train_location&apos;: train_location, &apos;choose_seats&apos;: &apos;&apos;, &apos;seatDetailType&apos;: &apos;000&apos;, &apos;whatsSelect&apos;: &apos;1&apos;, &apos;roomType&apos;: &apos;00&apos;, &apos;dwAll&apos;: &apos;N&apos;, &apos;_json_att&apos;: &apos;&apos;, &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken, &#125; singleForQueueReq = self.session.post(url, data=data, headers=self.headers) singleForQueueJson = singleForQueueReq.json() print(singleForQueueJson) def queryOrderWaitTime(self, ticketToken): url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/queryOrderWaitTime&apos; data = &#123; &apos;random&apos;: time.time(), &apos;tourFlag&apos;: &apos;dc&apos;, &apos;_json_att&apos;: &apos;&apos;, &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken, &#125; resp = self.session.post(url, data=data, headers=self.headers) orderWaitJson = resp.json() orderId = orderWaitJson.get(&quot;data&quot;).get(&quot;orderId&quot;)#此处有问题 print(orderWaitJson) print(orderId) url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/resultOrderForDcQueue&apos; data = &#123; &apos;orderSequence_no&apos;: orderId, &apos;_json_att&apos;: &apos;&apos;, &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken, &#125; dcQueueReq = self.session.post(url, data=data, headers=self.headers) dcQueueJson = dcQueueReq.json() if dcQueueJson.get(&quot;status&quot;) and dcQueueJson.get(&quot;httpstatus&quot;) == 200 and dcQueueJson.get( &quot;data&quot;) is not None and dcQueueJson.get(&quot;data&quot;).get(&quot;submitStatus&quot;): print(&quot;订票成功&quot;) else: print(dcQueueJson) print(&quot;订票失败&quot;)def start(): login = Login() login.down_captcha() check_flag = login.captcha_check() login_flag = login.login(check_flag) if login_flag: newapptk = login.auth_uamtk(login_flag) username = login.uamatuth_client(newapptk) login.init_my_12306(username) else: print(&apos;main():login_flag为Flase&apos;)def query(): filename = &apos;station_name.txt&apos; station = Station() station.station_name_code() station.save_station_code(filename) station_info, train_date, from_station_code, to_station_code = station.query_ticket() return station_info, train_date, from_station_code, to_station_codedef shop(station_info, trainDate, fromStationTelecode, to_station_telecode): buy = Buy() buy.checkUser() buy.submitOrderRequest(station_info) info, ticketToken, train_no, leftTicket, purpose_codes, station_train_code, to_station_telecode, train_location, key_check_isChange = buy.initDc() passengerTicketStr, oldPassengerStr = buy.checkOrderInfo(info, ticketToken) buy.getQueueCount(trainDate, train_no, leftTicket, ticketToken, station_train_code, fromStationTelecode, to_station_telecode, purpose_codes, train_location, passengerTicketStr, oldPassengerStr, key_check_isChange) buy.queryOrderWaitTime(ticketToken)def main(): start() station_info, train_date, from_station_code, to_station_code = query() shop(station_info, train_date, from_station_code, to_station_code)if __name__ == &apos;__main__&apos;: main()]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初学爬虫]]></title>
    <url>%2F2018%2F04%2F16%2F%E5%88%9D%E5%AD%A6%E7%88%AC%E8%99%AB%2F</url>
    <content type="text"><![CDATA[今天作为例子的网站：http://www.xiaohua100.cn/daxue/啊哈，这个也是无意间找的网站，不是故意找的（大雾）（作为例子来说还是挺好的例子…个人理解的爬虫分为以下几步：1.获取网站url2.搞清楚是get请求还是post请求3.request或者session访问后，注意编码格式4.正则表达式或者用匹配出信息5.是否要从访问之后的返回信息得出data以及下个网站url 那么今天的例子：1.首先我们很清楚url = ‘http://www.xiaohua100.cn/daxue/&#39;2.这个网站由get请求访问3.我们今天的目的是寻找这些图片并进行下载，那么我们要做的是找到图片的url4.然后通过正则表达式储存这些url到一个列表里面5.通过requests.content 二进制下载这些图片即可 代码如下：123456789101112131415161718192021import requestsimport reurl = &apos;http://www.xiaohua100.cn/daxue/&apos;response = requests.get(url)response.encoding = &apos;utf-8&apos;html = response.textmain_url = &apos;http://www.xiaohua100.cn&apos;img_urls = re.findall(r&apos;/uploads/allimg/\d+/\d-\w+-\w+.jpg&apos;, html)for i in range(len(img_urls)): img_urls[i] = main_url + img_urls[i]index = 0for img_url in img_urls: img_data = requests.get(img_url).content filename = str(index) + &apos;.jpg&apos; with open(filename, &apos;wb&apos;) as f: f.write(img_data) print(img_url) index += 1]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬UbuntuPaste代码]]></title>
    <url>%2F2018%2F04%2F16%2F%E7%88%ACUbuntuPaste%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[直接贴代码啦。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# -*- coding:utf-8 -*-import urllib.requestimport reimport osclass UbtSpider: def __init__(self) : self.pageIndex = 25317600 self.user_agent = &apos;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&apos; def getPage(self,pageIndex): url = &apos;http://paste.ubuntu.com/&apos; + str(pageIndex) headers = &#123;&apos;User-Agent&apos;: self.user_agent, &apos;Referer&apos;: url&#125; request = urllib.request.Request(url, headers=headers) with urllib.request.urlopen(request) as response: html = response.read() content = html.decode(&apos;utf-8&apos;) patten = re.compile(&apos;&lt;div class=&quot;paste&quot;&gt;&lt;pre&gt;(.*?)&lt;/pre&gt;&lt;/div&gt;&apos;, re.S) # re.S (.*?）表示分组 items = patten.findall(content) for item in items: #替换 item = item.replace(&apos;&amp;nbsp;&apos;, &apos; &apos;) item = item.replace(&apos;&amp;gt;&apos;, &apos;&gt;&apos;) item = item.replace(&apos;&amp;lt;&apos;, &apos;&lt;&apos;) item = item.replace(&apos;&amp;quot;&apos;, &apos;&quot;&apos;) item = item.replace(&apos;&amp;amp;&apos;, &apos;&amp;&apos;) item = item.replace(&apos;&amp;#39;&apos;, &apos;\&apos;&apos;) item = re.sub(&apos;&lt;span.*?&gt;&apos;,&apos;&apos;,item) item = re.sub(&apos;&lt;/span&gt;&apos;, &apos;&apos;, item) # print(item) patten2 = re.compile(&quot;.*include&quot;, re.S) if (patten2.match(item)): fileName = str(pageIndex) + &apos;.txt&apos; print( u&quot;正在写入: &gt;&gt;&gt; &quot; + str(pageIndex)) isSuccess = True with open(fileName,&apos;w&apos;) as f: try: f.write(item) except UnicodeError as e: if hasattr(e,&quot;reason&quot;): print (str(pageIndex)+u&quot; 写入失败,原因: &quot; + e.reason) isSuccess = False f.close() try:os.remove(fileName) except Exception as ose: print(str(pageIndex)+u&quot; 删除失败&quot; ) if isSuccess: print(str(pageIndex) + u&quot; 写入成功!&quot; ) f.close() def start(self): start = 25545700 end = 25545692 start = input(&quot;请输入起始页码: &quot;) end = input(&quot;请输入结束页码: &quot;) print(u&quot;开始爬取 UbuntuPaste 代码 ........&quot;) for pageIndex in range(int(start),int(end)): # 起始范围 self.getPage(pageIndex)spider = UbtSpider()spider.start()]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
