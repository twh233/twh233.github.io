<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>查找与排序-KMP算法栈队列</title>
      <link href="/2020/09/12/%E6%9F%A5%E6%89%BE%E4%B8%8E%E6%8E%92%E5%BA%8F-KMP%E7%AE%97%E6%B3%95%E6%A0%88%E9%98%9F%E5%88%97/"/>
      <url>/2020/09/12/%E6%9F%A5%E6%89%BE%E4%B8%8E%E6%8E%92%E5%BA%8F-KMP%E7%AE%97%E6%B3%95%E6%A0%88%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><p>稳定性：不稳定</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><p>例子：拿扑克牌排序</p><p>Input: {4, 3, 8, 5, 2, 6, 1, 7}。</p><p>首先拿起第一张牌, 手上有 {4}。</p><p>拿起第二张牌 3, 把 3insert 到手上的牌 {4}, 得到 {3 ，4}。</p><p>拿起第三张牌 8, 把 8 insert 到手上的牌 {3，4 }, 得到 {3 ，4，8}。</p><p>以此类推。</p><p>稳定性：稳定</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>分治做法，先分组，把自己组内的先排好序，再合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void shell_sort(int *data, int length) &#123;</span><br><span class="line">    int gap = 0;</span><br><span class="line">    int i = 0, j = 0;</span><br><span class="line"></span><br><span class="line">    for (gap = length / 2; gap &gt;= 1; gap /= 2) &#123; // 第一层是分组</span><br><span class="line">        for (i = gap; i &lt; length; i++) &#123; // 第二层是先保证前面有序，再遍历后面</span><br><span class="line">            int temp = data[i];</span><br><span class="line">            for (j = i - gap; j &gt;= 0 &amp;&amp; temp &lt; data[j]; j -= gap) &#123; //把大的挪到后面</span><br><span class="line">                data[j + gap] = data[j];</span><br><span class="line">            &#125;</span><br><span class="line">            data[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平均O(1.3n)</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>分治，把一个集合分成两部分，第一部分再分成两部分，第二部分再分成两部分，直到分到最后一层是两块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void sort(int *data, int *temp, int start, int mid, int end) &#123;</span><br><span class="line">    int i = start, j = mid + 1, k = start;</span><br><span class="line">    while (i &lt;= mid &amp;&amp; j &lt;= end) &#123;</span><br><span class="line">        if (data[i] &lt; data[j]) &#123;</span><br><span class="line">            temp[k++] = data[i++];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            temp[k++] = data[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while (i &lt;= mid) &#123;</span><br><span class="line">        temp[k++] = data[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    while (j &lt;= end) &#123;</span><br><span class="line">        temp[k++] = data[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    for (i = start; i &lt;= end; i++) &#123;</span><br><span class="line">        data[i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void merge_sort(int *data, int *temp, int start, int end) &#123;</span><br><span class="line">    if (start &lt; end) &#123;</span><br><span class="line">        int mid = start + (end - start) / 2;</span><br><span class="line">        merge_sort(data, temp, start, mid);</span><br><span class="line">        merge_sort(data, temp, mid + 1, end);</span><br><span class="line">        sort(data, temp, start, mid, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最差和最好都是 O(nlogn) 稳定</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>第一个值作为哨兵位，从最左端到最右端，如果满足条件，右端–，左端++，直到左端等于右端，那么就确定了哨兵位的位置，赋值即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">void sort(int *data, int left, int right) &#123;</span><br><span class="line"></span><br><span class="line">if (left &gt;= right) return ;</span><br><span class="line"></span><br><span class="line">int i = left;</span><br><span class="line">int j = right;</span><br><span class="line">int key = data[left];</span><br><span class="line"></span><br><span class="line">while (i &lt; j) &#123;</span><br><span class="line"></span><br><span class="line">while (i &lt; j &amp;&amp; key &lt;= data[j]) &#123;</span><br><span class="line">j --;</span><br><span class="line">&#125;</span><br><span class="line">data[i] = data[j];</span><br><span class="line"></span><br><span class="line">while (i &lt; j &amp;&amp; key &gt;= data[i]) &#123;</span><br><span class="line">i ++;</span><br><span class="line">&#125;</span><br><span class="line">data[j] = data[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[i] = key;</span><br><span class="line"></span><br><span class="line">sort(data, left, i - 1);</span><br><span class="line">sort(data, i + 1, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int quick_sort(int *data, int length) &#123;</span><br><span class="line"></span><br><span class="line">sort(data, 0, length-1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>text = “abababababacsdkfasdf”<br>ptn = “abab” 回溯多少。<br>取决于共同前缀与后缀，有多少。<br>abc -&gt; a/ab(前缀) c/bc（后缀）0<br>aba -&gt; a/ab a/ba 1<br>abcabc -&gt; a/ab/abc/abca/abcab<br>          c/bc/abc/cabc/bcabc  3  </p><pre><code>void make_next(const char *pattern, int *next) {    int q, k;    int m = strlen(pattern);    next[0] = 0;    for (q = 1,k = 0;q &lt; m; q ++) {        while (k &gt; 0 &amp;&amp; pattern[q] != pattern[k])            k = next[k-1];        if (pattern[q] == pattern[k]) {            k ++;        }        next[q] = k;    }    // next[0] = 0;    // q=1, k=0, pattern[q]:pattern[k] = b:a, next[1] = 0;    // q=2, k=0, pattern[q]:pattern[k] = c:a, next[2] = 0;    // q=3, k=0, pattern[q]:pattern[k] = a:a, k++, next[3] = 1;    // q=4, k=1, pattern[q]:pattern[k] = b:b, k++, next[4] = 2;    // q=5, k=2, pattern[q]:pattern[k] = c:c, k++, next[5] = 3;    // q=6, k=3, pattern[q]:pattern[k] = d:a, k=next[k-1] -&gt; k=0; next[6] = 0;}int kmp(const char *text, const char *pattern, int *next) {    int n = strlen(text);    int m = strlen(pattern);    make_next(pattern, next);    int i, q;    for (i = 0, q = 0;i &lt; n;i ++) {        while (q &gt; 0 &amp;&amp; pattern[q] != text[i]) {            q = next[q-1];        }        if (pattern[q] == text[i]) {            q ++;        }        if (q == m) {            //printf(&quot;Pattern occurs with shift: %d\n&quot;, (i-m+1));            break;        }    }    return i-q+1;}</code></pre>]]></content>
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实习笔记6</title>
      <link href="/2019/07/15/%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AE%B06/"/>
      <url>/2019/07/15/%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AE%B06/</url>
      <content type="html"><![CDATA[<h2 id="1-连接服务器"><a href="#1-连接服务器" class="headerlink" title="1. 连接服务器"></a>1. 连接服务器</h2><p>证书连接服务器<br><img src="/2019/07/15/实习笔记6/1.jpg"></p><img src="/2019/07/15/实习笔记6/2.jpg"><h2 id="2-gojsonq-一个用来查询JSON数据的简单Go包"><a href="#2-gojsonq-一个用来查询JSON数据的简单Go包" class="headerlink" title="2. gojsonq 一个用来查询JSON数据的简单Go包"></a>2. gojsonq 一个用来查询JSON数据的简单Go包</h2><p><a href="https://php.ctolib.com/thedevsaddam-gojsonq.html" target="_blank" rel="noopener">https://php.ctolib.com/thedevsaddam-gojsonq.html</a></p><img src="/2019/07/15/实习笔记6/gojson.png"><h2 id="3-golang-调用lua-插件"><a href="#3-golang-调用lua-插件" class="headerlink" title="3. golang 调用lua 插件"></a>3. golang 调用lua 插件</h2><p><a href="https://github.com/yuin/gopher-lua" target="_blank" rel="noopener">https://github.com/yuin/gopher-lua</a></p><h2 id="4-golang-exec"><a href="#4-golang-exec" class="headerlink" title="4. golang exec"></a>4. golang exec</h2><img src="/2019/07/15/实习笔记6/exec.png"><h2 id="5-常见lua-报错"><a href="#5-常见lua-报错" class="headerlink" title="5. 常见lua 报错"></a>5. 常见lua 报错</h2><p><a href="https://blog.csdn.net/yuanfengyun/article/details/78001988" target="_blank" rel="noopener">https://blog.csdn.net/yuanfengyun/article/details/78001988</a></p><h2 id="6-golang-解析-json"><a href="#6-golang-解析-json" class="headerlink" title="6. golang 解析 json"></a>6. golang 解析 json</h2><img src="/2019/07/15/实习笔记6/3.png"> ]]></content>
      
      <categories>
          
          <category> 实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>idea-maven工程配置</title>
      <link href="/2018/08/04/idea-maven%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/04/idea-maven%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="解决idea创建maven工程后无java-resouces文件问题"><a href="#解决idea创建maven工程后无java-resouces文件问题" class="headerlink" title="解决idea创建maven工程后无java,resouces文件问题"></a>解决idea创建maven工程后无java,resouces文件问题</h1><img src="/2018/08/04/idea-maven工程配置/1.png"><ul><li>Project Structure</li></ul><img src="/2018/08/04/idea-maven工程配置/2.png"><ul><li>Modules-Sources</li></ul><img src="/2018/08/04/idea-maven工程配置/3.png"><ul><li>New Folder</li></ul><img src="/2018/08/04/idea-maven工程配置/4.png"><img src="/2018/08/04/idea-maven工程配置/5.png"><h1 id="解决创建properties文件问题"><a href="#解决创建properties文件问题" class="headerlink" title="解决创建properties文件问题"></a>解决创建properties文件问题</h1><img src="/2018/08/04/idea-maven工程配置/6.png"><h1 id="解决idea-application-context-not-configured-for-this-file问题"><a href="#解决idea-application-context-not-configured-for-this-file问题" class="headerlink" title="解决idea application context not configured for this file问题"></a>解决idea application context not configured for this file问题</h1><p>spring配置文件中时常会出现这个提示，翻译过来大概意思就是没有配置该文件到项目中</p><p>于是进入到file-Project Structure中查看</p><p>可以很明显的看到下面有个感叹号，大概意思是下面的文件没有匹配</p><p>知道原因就很好解决问题了，只需要加到项目中去就可以了</p><img src="/2018/08/04/idea-maven工程配置/7.png"><h1 id="解决idea无法创建jsp文件问题"><a href="#解决idea无法创建jsp文件问题" class="headerlink" title="解决idea无法创建jsp文件问题"></a>解决idea无法创建jsp文件问题</h1><p>File-&gt;Project Struction -&gt;modules 按加号 新增web,双击web resource directory 修改路径 web resource directory path </p><p>为 当前项目目录/src/webapp -&gt;WEB-INF-&gt;JSP</p><img src="/2018/08/04/idea-maven工程配置/8.png">]]></content>
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 关于excel</title>
      <link href="/2018/06/12/Python-%E5%85%B3%E4%BA%8Eexcel/"/>
      <url>/2018/06/12/Python-%E5%85%B3%E4%BA%8Eexcel/</url>
      <content type="html"><![CDATA[<h1 id="read-excel"><a href="#read-excel" class="headerlink" title="read_excel()"></a>read_excel()</h1><p>加载函数为read_excel(),其具体参数如下。</p><p>read_excel(io, sheetname=0, header=0, skiprows=None, skip_footer=0, index_col=None,names=None, parse_cols=None, parse_dates=False,date_parser=None,na_values=None,thousands=None, convert_float=True, has_index_names=None, converters=None,dtype=None, true_values=None, false_values=None, engine=None, squeeze=False, **kwds)</p><p>常用参数解析：</p><ul><li>io : string, path object ; excel 路径。</li><li>sheetname : string, int, mixed list of strings/ints, or None, default 0 返回多表使用sheetname=[0,1],若sheetname=None是返回全表 注意：int/string 返回的是dataframe，而none和list返回的是dict of dataframe</li><li>header : int, list of ints, default 0 指定列名行，默认0，即取第一行，数据为列名行以下的数据 若数据不含列名，则设定 header = None</li><li>skiprows : list-like,Rows to skip at the beginning，省略指定行数的数据</li><li>skip_footer : int,default 0, 省略从尾部数的int行数据</li><li>index_col : int, list of ints, default None指定列为索引列，也可以使用u”strings”</li><li>names : array-like, default None, 指定列的名字。</li></ul><a id="more"></a><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><pre><code>sheet1:ID  NUM-1   NUM-2   NUM-336901   142 168 66136902   78  521 60236903   144 600 52136904   95  457 46836905   69  596 695sheet2：ID  NUM-1   NUM-2   NUM-336906   190 527 69136907   101 403 470</code></pre><h4 id="1-io"><a href="#1-io" class="headerlink" title="1.io"></a>1.io</h4><pre><code>basestation =&quot;F://pythonBook_PyPDAM/data/test.xls&quot;data = pd.read_excel(basestation)print data</code></pre><p>此时输出：</p><pre><code>  ID  NUM-1  NUM-2  NUM-30  36901 142 168 6611  36902 78    521    6022  36903 144 600 5213  36904 95 457 4684  36905 69 596 695</code></pre><h4 id="2-sheetname"><a href="#2-sheetname" class="headerlink" title="2.sheetname"></a>2.sheetname</h4><p>返回多表使用sheetname=[0,1],若sheetname=None是返回全表 注意：int/string 返回的是dataframe，而none和list返回的是dict of dataframe</p><pre><code>data_1 = pd.read_excel(basestation,sheetname=[0,1])print data_1print type(data_1)</code></pre><p>此时输出：</p><pre><code>OrderedDict([(0,       ID  NUM-1  NUM-2  NUM-30  36901    142    168    6611  36902     78    521    6022  36903    144    600    5213  36904     95    457    4684  36905     69    596    695), (1,       ID  NUM-1  NUM-2  NUM-30  36906    190    527    6911  36907    101    403    470)])</code></pre><h4 id="3-header"><a href="#3-header" class="headerlink" title="3.header"></a>3.header</h4><p>指定列名行，默认0，即取第一行，数据为列名行以下的数据 若数据不含列名，则设定 header = None ，注意这里还有列名的一行。</p><pre><code>data = pd.read_excel(basestation,header=None)print data输出：       0      1      2      30     ID  NUM-1  NUM-2  NUM-31  36901    142    168    6612  36902     78    521    6023  36903    144    600    5214  36904     95    457    4685  36905     69    596    695data = pd.read_excel(basestation,header=[3])print data输出：   36903  144    600    521  0  36904     95    457    4681  36905     69    596    695</code></pre><h4 id="4-skiprows"><a href="#4-skiprows" class="headerlink" title="4.skiprows"></a>4.skiprows</h4><p>省略指定行数的数据</p><pre><code>data = pd.read_excel(basestation,skiprows = [1])print data输出:      ID  NUM-1  NUM-2  NUM-30  36902     78    521    6021  36903    144    600    5212  36904     95    457    4683  36905     69    596    695</code></pre><h4 id="5-skip-footer"><a href="#5-skip-footer" class="headerlink" title="5.skip_footer"></a>5.skip_footer</h4><p>省略从尾部数的int行的数据</p><pre><code>data = pd.read_excel(basestation, skip_footer=3)print data输出：      ID  NUM-1  NUM-2  NUM-30  36901    142    168    6611  36902     78    521    602</code></pre><h4 id="6-index-col"><a href="#6-index-col" class="headerlink" title="6.index_col"></a>6.index_col</h4><p>指定列为索引列，也可以使用u”strings”</p><pre><code>data = pd.read_excel(basestation, index_col=&quot;NUM-3&quot;)print data输出：          ID  NUM-1  NUM-2NUM-3                     661    36901    142    168602    36902     78    521521    36903    144    600468    36904     95    457695    36905     69    596</code></pre><h4 id="7-names"><a href="#7-names" class="headerlink" title="7.names"></a>7.names</h4><p>指定列的名字</p><pre><code>data = pd.read_excel(basestation,names=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;e&quot;])print data       a    b    c    e0  36901  142  168  6611  36902   78  521  6022  36903  144  600  5213  36904   95  457  4684  36905   69  596  695</code></pre><h1 id="to-excel"><a href="#to-excel" class="headerlink" title="to_excel()"></a>to_excel()</h1><p>存储函数为pd.DataFrame.to_excel()</p><p>to_excel(self, excel_writer, sheet_name=’Sheet1’, na_rep=’’, float_format=None,columns=None, header=True, index=True, index_label=None,startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None,<br>inf_rep=’inf’, verbose=True, freeze_panes=None)</p><ul><li>excel_writer : 目标路径 </li><li>sheet_name : 填充excel的第几页 </li><li>na_rep : excel中缺失值的填充 </li><li>float_format : string, default None Format string for floating point numbers </li><li>columns : sequence, optional，Columns to write 选择输出的的列。 </li><li>header : boolean or list of string, default True Write out column names. If a list of string is given it is assumed to be aliases for the column names </li><li>index : boolean, default True，Write row names (index) </li><li>index_label : string or sequence, default None， Column label for index column(s) if desired. If None is given, andheader and index are True, then the index names are used. A sequence should be given if the DataFrame uses MultiIndex. </li><li>startrow :upper left cell row to dump data frame </li><li>startcol :upper left cell column to dump data frame </li><li>engine : string, default None ，write engine to use - you can also set this via the options，io.excel.xlsx.writer, io.excel.xls.writer, andio.excel.xlsm.writer. </li><li>merge_cells : boolean, default True Write MultiIndex and Hierarchical Rows as merged cells. </li><li>encoding: string, default None encoding of the resulting excel file. Only necessary for xlwt,other writers support unicode natively. </li><li>inf_rep : string, default ‘inf’ Representation for infinity (there is no native representation for infinity in Excel) </li><li>freeze_panes : tuple of integer (length 2), default None Specifies the one-based bottommost row and rightmost column that is to be frozen</li></ul><p>数据源：</p><pre><code>ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 加载数据：basestation =&quot;F://python/data/test.xls&quot;basestation_end =&quot;F://python/data/test_end.xls&quot;data = pd.read_excel(basestation)</code></pre><h4 id="1-excel-writer"><a href="#1-excel-writer" class="headerlink" title="1.excel_writer"></a>1.excel_writer</h4><p>输出路径</p><pre><code>data.to_excel(basestation_end)输出：    ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453</code></pre><h4 id="2-sheet-name"><a href="#2-sheet-name" class="headerlink" title="2.sheet_name"></a>2.sheet_name</h4><p>将数据存储在excel的那个sheet页面</p><pre><code>data.to_excel(basestation_end,sheet_name=&quot;sheet2&quot;)</code></pre><h4 id="3-na-rep"><a href="#3-na-rep" class="headerlink" title="3.na_rep"></a>3.na_rep</h4><p>缺失值填充</p><pre><code>data.to_excel(basestation_end,na_rep=&quot;NULL&quot;)输出：    ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 NULL</code></pre><h4 id="4-colums"><a href="#4-colums" class="headerlink" title="4.colums"></a>4.colums</h4><p>选择输出的的列</p><pre><code>data.to_excel(basestation_end,columns=[&quot;ID&quot;])输出    ID0   369011   369022   369033   369044   369055   36906</code></pre><h4 id="5-header"><a href="#5-header" class="headerlink" title="5.header"></a>5.header</h4><p>默认为True,可以用list命名列的名字。header = False 则不输出题头</p><pre><code>data.to_excel(basestation_end,header=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;])输出：    a   b   c   d0   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 data.to_excel(basestation_end,header=False,columns=[&quot;ID&quot;])header = False 则不输出题头输出：0   369011   369022   369033   369044   369055   36906</code></pre><h4 id="6-index"><a href="#6-index" class="headerlink" title="6.index"></a>6.index</h4><p>默认为True，显示index，当index=False 则不显示行索引（名字）</p><p>index_label : string or sequence, default None<br>设置索引列的列名</p><pre><code>data.to_excel(basestation_end,index=False)输出：ID  NUM-1   NUM-2   NUM-336901   142 168 66136902   78  521 60236903   144 600 52136904   95  457 46836905   69  596 69536906   165 453 data.to_excel(basestation_end,index_label=[&quot;f&quot;])输出：f   ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 </code></pre><p>以上为read_excel,to_excel用法，<br>若是想对已经读出的excel文件有所操作，请转移：<br><a href="https://blog.csdn.net/liufang0001/article/details/77856255" title="此处" target="_blank" rel="noopener">https://blog.csdn.net/liufang0001/article/details/77856255</a></p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python-tkinter-简单使用介绍</title>
      <link href="/2018/05/30/python-tkinter-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/05/30/python-tkinter-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>本文主要介绍几个简单的tkinter组件。</p><p>说明每个控件最后要加上pack().否则控件是无法显示的.</p><a id="more"></a><h2 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h2><p>说明</p><p>　　标签</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry(&apos;300x200&apos;)l = Label(root, text=&quot;show&quot;, bg=&quot;green&quot;, font=(&quot;Arial&quot;, 12), width=5, height=2)l.pack(side=LEFT)  #这里的side可以赋值为LEFT  RTGHT TOP  BOTTOMroot.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/1.jpg"></p><h2 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h2><p>说明</p><p>　　在屏幕上创建一块矩形区域,多作为容器来布局窗体</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry(&apos;300x200&apos;)Label(root, text=&apos;校训&apos;, font=(&apos;Arial&apos;, 20)).pack()frm = Frame(root)# leftfrm_L = Frame(frm)Label(frm_L, text=&apos;厚德&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)Label(frm_L, text=&apos;博学&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)frm_L.pack(side=LEFT)# rightfrm_R = Frame(frm)Label(frm_R, text=&apos;敬业&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)Label(frm_R, text=&apos;乐群&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)frm_R.pack(side=RIGHT)frm.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/2.jpg"></p><h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p>说明</p><p>　　创建单行文本框</p><p>用法</p><p>　　创建:lb =Entry(根对象, [属性列表])</p><p>　　绑定变量 var=StringVar()    lb=Entry(根对象, textvariable = var)</p><p>　　获取文本框中的值   var.get()</p><p>　　设置文本框中的值   var.set(item1)</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()var = StringVar()e = Entry(root, textvariable = var)var.set(&quot;hello&quot;)e.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/3.jpg"></p><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p>说明</p><p>　　向该空间内输入文本</p><p>用法</p><p>　　t = Text(根对象)</p><p>　　插入:t.insert(mark, 内容)</p><p>　　删除:t.delete(mark1, mark2)</p><p>　　其中,mark可以是行号,或者特殊标识,例如</p><blockquote><p>INSERT:光标的插入点CURRENT:鼠标的当前位置所对应的字符位置</p><p>END:这个Textbuffer的最后一个字符</p><p>SEL_FIRST:选中文本域的第一个字符，如果没有选中区域则会引发异常</p><p>SEL_LAST：选中文本域的最后一个字符，如果没有选中区域则会引发 异常</p></blockquote><p>举例 </p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry(&apos;300x200&apos;)t = Text(root)t.insert(1.0, &apos;hello\n&apos;)t.insert(END, &apos;hello000000\n&apos;)t.insert(END, &apos;nono&apos;)t.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/4.jpg"></p><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p>说明</p><p>　　创建按钮</p><p>用法</p><p>　　Button(根对象, [属性列表])</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()def printhello():    t.insert(&apos;1.0&apos;, &quot;hello\n&quot;)t = Text()t.pack()Button(root, text=&quot;press&quot;, command = printhello).pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/5.jpg"></p><h2 id="Listbox"><a href="#Listbox" class="headerlink" title="Listbox"></a>Listbox</h2><p>说明</p><p>　　列表控件,可以含有一个或多个文本想,可单选也可多选</p><p>用法</p><p>　　创建:lb = ListBox(根对象, [属性列表])</p><p>　　绑定变量 var=StringVar()    lb=ListBox(根对象, listvariable = var)</p><p>　　得到列表中的所有值   var.get()</p><p>　　设置列表中的所有值   var.set((item1, item2, …..))</p><p>　　添加:lb.insert(item)</p><p>　　删除:lb.delete(item,…)</p><p>　　绑定事件 lb.bind(‘<buttonrelease-1>‘, 函数)</buttonrelease-1></p><p>　　获得所选中的选项 lbl.get(lb.curselection())</p><p>属性</p><p>　　selectmode可以为BROWSE MULTIPL SINGLE</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()def print_item(event):    print(lb.get(lb.curselection()))var = StringVar()lb = Listbox(root,  listvariable = var)list_item = [1, 2, 3, 4]         #控件的内容为1 2 3 4for item in list_item:    lb.insert(END, item)lb.delete(2, 4)                  #此时控件的内容为1 3var.set((&apos;a&apos;, &apos;ab&apos;, &apos;c&apos;, &apos;d&apos;))   #重新设置了，这时控件的内容就编程var的内容了print var.get()lb.bind(&apos;&lt;ButtonRelease-1&gt;&apos;, print_item)lb.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/6.jpg"></p><h2 id="Scrollbar"><a href="#Scrollbar" class="headerlink" title="Scrollbar"></a>Scrollbar</h2><p>说明</p><p>　　在屏幕上创建一块矩形区域,多作为容器来布局窗体</p><p>用法</p><p>　　Frame(根对象, [属性列表]), 最长用的用法是和别的控件一起使用.</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()def print_item(event):    print lb.get(lb.curselection())var = StringVar()lb = Listbox(root, height=5, selectmode=BROWSE, listvariable = var)lb.bind(&apos;&lt;ButtonRelease-1&gt;&apos;, print_item)list_item = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]for item in list_item:    lb.insert(END, item)scrl = Scrollbar(root)scrl.pack(side=RIGHT, fill=Y)lb.configure(yscrollcommand = scrl.set)lb.pack(side=LEFT, fill=BOTH)scrl[&apos;command&apos;] = lb.yviewroot.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/7.jpg"></p>]]></content>
      
      <categories>
          
          <category> tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python tkinter pack布局</title>
      <link href="/2018/05/24/python-tkinter-pack%E5%B8%83%E5%B1%80/"/>
      <url>/2018/05/24/python-tkinter-pack%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>一、pack参数：</p><p>   &emsp;&emsp;side:按扭停靠在窗口的哪个位置</p><p>　　　　left: 左</p><p>　　　　top: 上</p><p>　　　　right: 右</p><p>　　　　botton: 下</p><p>　　fill:填充</p><p>　　　　x:水平方向填充</p><p>　　　　y:竖直方向填充</p><p>　　　　both:水平和竖直方向填充</p><p>　　　　none:不填充</p><p>　　expand:</p><p>　　　　yes:扩展整个空白区</p><p>　　　　no:不扩展</p><p>　　anchor:</p><p>　　　　N:北  下</p><p>　　　　E:东  右</p><p>　　　　S:南 下</p><p>　　　　W:西 左</p><p>　　　　CENTER:中间</p><p>　　padx:x方向的外边距</p><p>　　pady:y方向的外边距</p><p>　　ipadx:x方向的内边距</p><p>　　ipady：y方向的内边距</p><p>二、代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from Tkinter import *</span><br><span class="line">root = Tk()</span><br><span class="line">Button(root,text=&apos;A&apos;).pack(side=LEFT,expand=YES,fill=Y)</span><br><span class="line">Button(root,text=&apos;B&apos;).pack(side=TOP,expand=YES,fill=BOTH)</span><br><span class="line">Button(root,text=&apos;C&apos;).pack(side=RIGHT,expand=YES,fill=NONE)</span><br><span class="line">Button(root,text=&apos;D&apos;).pack(side=LEFT,expand=NO,fill=Y)</span><br><span class="line">Button(root,text=&apos;E&apos;).pack(side=TOP,expand=YES,fill=BOTH)</span><br><span class="line">Button(root,text=&apos;F&apos;).pack(side=BOTTOM,expand=YES)</span><br><span class="line">Button(root,text=&apos;G&apos;).pack(anchor=SE)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><img src="/2018/05/24/python-tkinter-pack布局/1.png">]]></content>
      
      <categories>
          
          <category> tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>12306查票订票</title>
      <link href="/2018/04/16/12306%E6%9F%A5%E7%A5%A8%E8%AE%A2%E7%A5%A8/"/>
      <url>/2018/04/16/12306%E6%9F%A5%E7%A5%A8%E8%AE%A2%E7%A5%A8/</url>
      <content type="html"><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/lzqwebsoft/article/details/18674635" target="_blank" rel="noopener">https://blog.csdn.net/lzqwebsoft/article/details/18674635</a><br><a href="https://www.lanindex.com/12306%E8%B4%AD%E7%A5%A8%E6%B5%81%E7%A8%8B%E5%85%A8%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">https://www.lanindex.com/12306%E8%B4%AD%E7%A5%A8%E6%B5%81%E7%A8%8B%E5%85%A8%E8%A7%A3%E6%9E%90/</a></p><p>模拟查票订票操作如下：<br>1.首先12306是一个需要登录操作的网站，然而12306的登录验证大家都知道需要验证码。另外12306的验证码很坑~，需要人工选择对应的物品，这个用代码识别网上我也没找到好的教程，于是… 于是只能人工识别啦。。<br>2.登录之后我们需要输入起始地，目的地，时间等信息，然后查询<br>3.此时我们可以查询到车次信息了，根据自己的时间然后订合适时间和合适座位的票<br>4.选择乘坐人<br>5.建立好订单<br>6.付款，订票成功</p><p>显然我们做到第5步已经达到我们用爬虫的目的。<br><a id="more"></a><br>1.登录操作请参考：<a href="http://www.cnblogs.com/fangtaoa/p/8321449.html" target="_blank" rel="noopener">http://www.cnblogs.com/fangtaoa/p/8321449.html</a><br>2.查票操作请参考：<a href="http://www.cnblogs.com/fangtaoa/p/8360460.html" target="_blank" rel="noopener">http://www.cnblogs.com/fangtaoa/p/8360460.html</a><br>3.下面补充订票操作:<br>按照置顶的参考链接里的步骤获取url和data数据，具体可以看代码类buy<br>确实没什么地方需要多说的，有前驱者已经铺好路了，只需按照步骤一步一步理解就可以了<br>下面补充操作方式：<br></p><p>每一步都有相应的步骤名称，如果哪一步出错了只需在代码中寻找具体是哪个函数没对即可。<br>下面给出代码：<br>1.login.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import chardet</span><br><span class="line">import user</span><br><span class="line">import settings</span><br><span class="line">from coordinate import coor</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Login:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.headers = settings.headers</span><br><span class="line">        self.session = settings.session</span><br><span class="line">        self.id = user.id</span><br><span class="line">        self.psw = user.psw</span><br><span class="line"></span><br><span class="line">    def down_captcha(self):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 下载验证码</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">        response = self.session.get(&apos;https://kyfw.12306.cn/passport/captcha/captcha-image?login_site=E&amp;module=login&amp;rand=sjrand&amp;0.7067378301290344&apos;)</span><br><span class="line">        codeImg = response.content</span><br><span class="line">        fp = open(&apos;code.png&apos;, &apos;wb&apos;)</span><br><span class="line">        fp.write(codeImg)</span><br><span class="line">        fp.close()</span><br><span class="line"></span><br><span class="line">    def get_pos(self):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 输入验证码坐标</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">        coordinate = coor()</span><br><span class="line">        return coordinate</span><br><span class="line"></span><br><span class="line">    def captcha_check(self):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 验证码初验证</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        check_flag = False</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;answer&apos;: self.get_pos(),</span><br><span class="line">            &apos;login_site&apos;:&apos;E&apos;,</span><br><span class="line">            &apos;rand&apos;: &apos;sjrand&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/passport/captcha/captcha-check&apos;</span><br><span class="line">        response = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        result = response.json()</span><br><span class="line">        if result[&apos;result_code&apos;] == &apos;4&apos;:</span><br><span class="line">            print(&apos;验证码通过!&apos;)</span><br><span class="line">            check_flag = True</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;验证码验证失败!&apos;)</span><br><span class="line">        return check_flag</span><br><span class="line"></span><br><span class="line">    def login(self, check_flag):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 进行第一步登录</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        if not check_flag:</span><br><span class="line">            print(&apos;login() error: check_flag为False.&apos;)</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">        login_flag=False</span><br><span class="line">        login_data = &#123;</span><br><span class="line">            &apos;username&apos;: self.id,</span><br><span class="line">            &apos;password&apos;: self.psw,</span><br><span class="line">            &apos;appid&apos;: &apos;otn&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        login_url = &apos;https://kyfw.12306.cn/passport/web/login&apos;</span><br><span class="line">        login_response = self.session.post(login_url, data=login_data, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        #设置网页编码</span><br><span class="line">        if chardet.detect(login_response.content).get(&apos;encoding&apos;) != &apos;UTF-8&apos;:</span><br><span class="line">            login_response.encoding = &apos;UTF-8&apos;</span><br><span class="line"></span><br><span class="line">        if login_response.status_code == 200 and &apos;error&apos; not in login_response.url:</span><br><span class="line">            print(&apos;登录成功！&apos;)</span><br><span class="line">            login_flag = True</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;登录失败！&apos;)</span><br><span class="line"></span><br><span class="line">        return login_flag</span><br><span class="line"></span><br><span class="line">    def auth_uamtk(self,login_flag):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 进行登录的验证</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;appid&apos;: &apos;otn&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/passport/web/auth/uamtk&apos;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            result = dict(resp.json())</span><br><span class="line">            print(&apos;auth_uamtk():&apos;, result[&apos;result_message&apos;])</span><br><span class="line">            if result.get(&apos;result_code&apos;) == 0:##</span><br><span class="line">                return result.get(&apos;newapptk&apos;)</span><br><span class="line">            else:</span><br><span class="line">                return None</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;登录验证失败！&apos;)</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">    def uamatuth_client(self, newapptk):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 确认是否真正的登录成功</span><br><span class="line">        # :param newapptk:</span><br><span class="line">        # :return:</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        if newapptk is None:</span><br><span class="line">            print(&apos;并没有真正的登录成功！&apos;)</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;tk&apos;: newapptk,</span><br><span class="line">        &#125;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/uamauthclient&apos;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            result = dict(resp.json())</span><br><span class="line">            print(&apos;uamatuth_client()&apos;, result.get(&apos;result_message&apos;))</span><br><span class="line">            if result.get(&apos;result_code&apos;) == 0:</span><br><span class="line">                username = result.get(&apos;username&apos;)</span><br><span class="line">                print(&apos;&#123;&#125;初始化登录成功!&apos;.format(username))</span><br><span class="line">                return username</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;uamatuth_client() error! status_code:&#123;&#125;, url:&#123;&#125;&apos;</span><br><span class="line">                  .format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">    def init_my_12306(self, username):</span><br><span class="line"></span><br><span class="line">        if username is None:</span><br><span class="line">            print(&apos;init_my_12306() error: username 为None!&apos;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/index/initMy12306&apos;</span><br><span class="line">        resp = self.session.get(url, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            content = etree.HTML(resp.content)</span><br><span class="line">            #先用etree转化</span><br><span class="line">            name = content.xpath(&apos;//*[@id=&quot;login_user&quot;]/span/text()&apos;)</span><br><span class="line">            print(&apos;init_my_12306(): name&apos;, name)</span><br><span class="line">            if name == username:</span><br><span class="line">                print(&apos;init_my_12306():你已经登录成功了!&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;init_my_12306() error! status_code:&#123;&#125;, url:&#123;&#125;&apos;.</span><br><span class="line">                  format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    login = Login()</span><br><span class="line">    login.down_captcha()</span><br><span class="line">    check_flag = login.captcha_check()</span><br><span class="line">    login_flag = login.login(check_flag)</span><br><span class="line">    if login_flag:</span><br><span class="line">        newapptk = login.auth_uamtk(login_flag)</span><br><span class="line">        username = login.uamatuth_client(newapptk)</span><br><span class="line">        login.init_my_12306(username)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;main():login_flag为Flase&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>2.user.py<br>此处根据自己账户和名称写出id 和 psw 即可</p><p>id = ‘1111111’#账户名<br>psw = ‘222222’#密码</p><p>3.settings.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import requests</span><br><span class="line">#随机选择一个有效的UA来请求头信息</span><br><span class="line">User_Agent = [</span><br><span class="line">    &apos;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&apos;,</span><br><span class="line">    &apos;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11&apos;,</span><br><span class="line">    &apos;Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&apos;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line">headers = &#123;&apos;user-agent&apos;: random.choice(User_Agent)&#125;</span><br></pre></td></tr></table></figure><p>4.stations.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line">from login import Login</span><br><span class="line">import os</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">from collections import deque, OrderedDict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Station:</span><br><span class="line">    &quot;&quot;&quot; 查询车票信息 &quot;&quot;&quot;</span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 使用登录时候的session,这样好一些!</span><br><span class="line">        self.headers = Login().headers</span><br><span class="line">        self.session = Login().session</span><br><span class="line">        self.station_info = deque()</span><br><span class="line"></span><br><span class="line">    def station_name_code(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:获取每个站点的名字和对应的代码,并保存到本地</span><br><span class="line">        :return: 无</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        filename = &apos;station_name.txt&apos;</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/resources/js/framework/station_name.js&apos;</span><br><span class="line">        resp = self.session.get(url, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            print(&apos;station_name_code():获取站点信息成功!&apos;)</span><br><span class="line">            with open(filename, &apos;w&apos;) as f:</span><br><span class="line">                for each in resp.text.split(&apos;=&apos;)[1].split(&apos;@&apos;):</span><br><span class="line">                    if each != &quot;&apos;&quot;:</span><br><span class="line">                        f.write(each)</span><br><span class="line">                        f.write(&apos;\n&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;station_name_code() error! status_code:&#123;&#125;, url: &#123;&#125;&apos;</span><br><span class="line">                  .format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">    def save_station_code(self, filename):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:从站点文件中提取站点与其对应的代码,并保存到文件中</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        if not os.path.exists(filename):</span><br><span class="line">            print(&apos;save_station_code():&apos;, filename, &apos;不存在,正在下载!&apos;)</span><br><span class="line">            self.station_name_code()</span><br><span class="line"></span><br><span class="line">        file = &apos;name_code.json&apos;</span><br><span class="line">        name_code_dict = &#123;&#125;</span><br><span class="line">        with open(filename, &apos;r&apos;) as f:</span><br><span class="line">            for line in f:</span><br><span class="line">                # 对读取的行都进行split操作,然后提取站点名和其代码</span><br><span class="line">                name = line.split(&apos;|&apos;)[1] # 站点名字</span><br><span class="line">                code = line.split(&apos;|&apos;)[2] # 每个站点对应的代码</span><br><span class="line">                # 每个站点肯定都是唯一的</span><br><span class="line">                name_code_dict[name] = code</span><br><span class="line"></span><br><span class="line">        # 把name,code保存到本地文件中,方便以后使用</span><br><span class="line">        with open(file, &apos;w&apos;) as f:</span><br><span class="line">            # 不以ascii码编码的方式保存</span><br><span class="line">            json.dump(name_code_dict, f, ensure_ascii=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def query_ticket(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:查票操作</span><br><span class="line">        :return: 返回查询到的所有车次信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        data = self._query_prompt()</span><br><span class="line">        if not data:</span><br><span class="line">            print(&apos;query_ticket() error: &#123;&#125;&apos;.format(data))</span><br><span class="line">        _, from_station, to_station = data.keys()</span><br><span class="line">        train_date = data.get(&apos;train_date&apos;)</span><br><span class="line">        from_station_code = data.get(from_station)</span><br><span class="line">        to_station_code = data.get(to_station)</span><br><span class="line"></span><br><span class="line">        query_param = &apos;leftTicketDTO.train_date=&#123;&#125;&amp;&apos; \</span><br><span class="line">                      &apos;leftTicketDTO.from_station=&#123;&#125;&amp;&apos; \</span><br><span class="line">                      &apos;leftTicketDTO.to_station=&#123;&#125;&amp;&apos; \</span><br><span class="line">                      &apos;purpose_codes=ADULT&apos;\</span><br><span class="line">            .format(train_date, from_station_code, to_station_code)</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/leftTicket/query?&apos;</span><br><span class="line">        full_url = url + query_param</span><br><span class="line">        resp = self.session.get(full_url, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200 and resp.url == full_url:</span><br><span class="line">            print(&apos;query_ticket() 成功!然后进行车票清理工作!&apos;)</span><br><span class="line">            self._get_train_info(resp.json(), from_station, to_station)</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            print(&apos;query_ticket() error! status_code:&#123;&#125;, url:&#123;&#125;\norigin_url:&#123;&#125;&apos;</span><br><span class="line">                  .format(resp.status_code, resp.url, full_url))</span><br><span class="line"></span><br><span class="line">        return self.station_info, train_date, from_station_code, to_station_code</span><br><span class="line"></span><br><span class="line">    def _get_train_info(self, text, from_station, to_station):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:提取出查询到的列车信息</span><br><span class="line">        :param text: 包含所有从起点站到终点站的车次信息</span><br><span class="line">        :return: 返回所有车次信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not text:</span><br><span class="line">            print(&apos;_query_train_info() error: text为:&apos;, text)</span><br><span class="line">        # 把json文件转变成字典形式</span><br><span class="line">        result = dict(text)</span><br><span class="line">        # 判断有无车次的标志</span><br><span class="line">        if result.get(&apos;data&apos;).get(&apos;map&apos;):</span><br><span class="line">            train_info = result.get(&apos;data&apos;).get(&apos;result&apos;)</span><br><span class="line">            train_list = deque()</span><br><span class="line">            for item in train_info:</span><br><span class="line">                split_item = item.split(&apos;|&apos;)</span><br><span class="line">                item_dict = &#123;&#125;</span><br><span class="line">                # for index, item in enumerate(split_item,0):</span><br><span class="line">                #     print(&apos;&#123;&#125;:\t&#123;&#125;&apos;.format(index, item))</span><br><span class="line">                if split_item[11] == &apos;Y&apos;: # 已经开始卖票了</span><br><span class="line">                    item_dict[&apos;train_id&apos;] = split_item[0]</span><br><span class="line">                    item_dict[&apos;train_name&apos;] = split_item[3] # 车次名</span><br><span class="line">                    item_dict[&apos;depart_time&apos;] = split_item[8] # 出发时间</span><br><span class="line">                    item_dict[&apos;arrive_time&apos;] = split_item[9] # 到站时间</span><br><span class="line">                    item_dict[&apos;spend_time&apos;] = split_item[10] # 经历时长</span><br><span class="line">                    item_dict[&apos;wz&apos;] = split_item[29] # 无座</span><br><span class="line">                    item_dict[&apos;yz&apos;] = split_item[28] # 硬座</span><br><span class="line">                    item_dict[&apos;yw&apos;] = split_item[26] # 硬卧</span><br><span class="line">                    item_dict[&apos;rw&apos;] = split_item[23] # 软卧</span><br><span class="line">                    item_dict[&apos;td&apos;] = split_item[32] # 特等座</span><br><span class="line">                    item_dict[&apos;yd&apos;] = split_item[31] # 一等座</span><br><span class="line">                    item_dict[&apos;ed&apos;] = split_item[30] # 二等座</span><br><span class="line">                    item_dict[&apos;dw&apos;] = split_item[33] # 动卧</span><br><span class="line">                    train_list.append(item_dict)</span><br><span class="line">                    self.station_info.append(item_dict)</span><br><span class="line">                # 无法买票的车次,有可能是已卖光,也有可能是还不开卖</span><br><span class="line">                elif split_item[0] == &apos;&apos;:</span><br><span class="line">                    print(&apos;_query_train_info():车次&#123;&#125;的票暂时不能购买!&apos;</span><br><span class="line">                          .format(split_item[3]))</span><br><span class="line">                else:</span><br><span class="line">                    print(&apos;_query_train_info():车次&#123;&#125;还未开始卖票,起售时间为:&#123;&#125;&apos;</span><br><span class="line">                          .format(split_item[3], split_item[1]))</span><br><span class="line">            # 调用方法来打印列车结果</span><br><span class="line">            self._print_train(train_list, from_station, to_station)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;_get_train_info() error: 从&#123;&#125;站到&#123;&#125;站有没列车!&apos;</span><br><span class="line">                  .format(from_station, to_station))</span><br><span class="line"></span><br><span class="line">    def _print_train(self, train_info, from_station, to_station):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印查询到的车次信息</span><br><span class="line">        :param train_info: 提取出来的车次信息</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        if not train_info:</span><br><span class="line">            print(&apos;_print_train() error: train_info是None!&apos;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        print(&apos;从&#123;&#125;到&#123;&#125;还有余票的列车有:&apos;.format(from_station, to_station))</span><br><span class="line">        for item in train_info:</span><br><span class="line">            if &apos;G&apos; in item[&apos;train_name&apos;]: # 高铁</span><br><span class="line">                self._print_high_train_info(item)</span><br><span class="line">            elif &apos;D&apos; in item[&apos;train_name&apos;]: # 动车</span><br><span class="line">                self._print_dong_train_info(item)</span><br><span class="line">            else:</span><br><span class="line">                self._print_train_info(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def _print_high_train_info(self, item):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印高铁车次信息</span><br><span class="line">        :param item: 所有高铁车次</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t&apos;</span><br><span class="line">              &apos;经历时长:&#123;:4s&#125;\t特等座:&#123;:4s&#125;\t一等座:&#123;:4s&#125;\t二等座:&#123;:4s&#125;&apos;</span><br><span class="line">              .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;],item[&apos;arrive_time&apos;],</span><br><span class="line">                      item[&apos;spend_time&apos;],item[&apos;td&apos;], item[&apos;yd&apos;], item[&apos;ed&apos;]))</span><br><span class="line"></span><br><span class="line">    def _print_dong_train_info(self, item):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印动车的车票信息</span><br><span class="line">        :param item: 所有动车车次</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t&apos;</span><br><span class="line">              &apos;经历时长:&#123;:4s&#125;\t一等座:&#123;:4s&#125;\t二等座:&#123;:4s&#125;\t软卧:&#123;:4s&#125;\t动卧:&#123;:4s&#125;&apos;</span><br><span class="line">              .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;], item[&apos;arrive_time&apos;],</span><br><span class="line">                      item[&apos;spend_time&apos;],item[&apos;yd&apos;],item[&apos;ed&apos;], item[&apos;rw&apos;], item[&apos;dw&apos;]))</span><br><span class="line">    def _print_train_info(self,item):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印普通列出的车次信息</span><br><span class="line">        :param item: 所有普通车次</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t经历时长:&#123;:4s&#125;\t&apos;</span><br><span class="line">              &apos;软卧:&#123;:4s&#125;\t硬卧:&#123;:4s&#125;\t硬座:&#123;:4s&#125;\t无座:&#123;:4s&#125;&apos;</span><br><span class="line">              .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;], item[&apos;arrive_time&apos;],</span><br><span class="line">                      item[&apos;spend_time&apos;],item[&apos;rw&apos;], item[&apos;yw&apos;], item[&apos;yz&apos;], item[&apos;wz&apos;]))</span><br><span class="line">    def _query_prompt(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能: 与用户交互,让用户输入:出发日期,起始站和终点站并判断其正确性</span><br><span class="line">        :return: 返回正确的日期,起始站和终点站</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        time_flag, train_date = self._check_date()</span><br><span class="line">        if not time_flag:</span><br><span class="line">            print(&apos;_query_prompt() error:&apos;, &apos;乘车日期不合理,请检查!!&apos;)</span><br><span class="line">            return</span><br><span class="line">        # 创建有序字典,方便取值</span><br><span class="line">        query_data = OrderedDict()</span><br><span class="line">        from_station = input(&apos;请输入起始站:&apos;)</span><br><span class="line">        to_station = input(&apos;请输入终点站:&apos;)</span><br><span class="line"></span><br><span class="line">        station_flag = True</span><br><span class="line">        filename = &apos;name_code.json&apos;</span><br><span class="line">        with open(filename, &apos;r&apos;) as f:</span><br><span class="line">            data = dict(json.load(f))</span><br><span class="line">            stations = data.keys()</span><br><span class="line">            if from_station not in stations or to_station not in stations:</span><br><span class="line">                station_flag = False</span><br><span class="line">                print(&apos;query_prompt() error: &#123;&#125;或&#123;&#125;不在站点列表中!!&apos;</span><br><span class="line">                    .format(from_station, to_station))</span><br><span class="line">            # 获取起始站和终点站的代码</span><br><span class="line">            from_station_code = data.get(from_station)</span><br><span class="line">            to_station_code = data.get(to_station)</span><br><span class="line">        query_data[&apos;train_date&apos;] = train_date</span><br><span class="line">        query_data[from_station] = from_station_code</span><br><span class="line">        query_data[to_station] = to_station_code</span><br><span class="line"></span><br><span class="line">        if time_flag and  station_flag:</span><br><span class="line">            return query_data</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;query_prompt() error! time_flag:&#123;&#125;, station_flag:&#123;&#125;&apos;</span><br><span class="line">                  .format(time_flag, station_flag))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def _check_date(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:检测乘车日期的正确性</span><br><span class="line">        :return: 返回时间是否为标准的形式的标志</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        # 获取当前时间的时间戳</span><br><span class="line">        local_time = time.localtime()</span><br><span class="line">        local_date = &apos;&#123;&#125;-&#123;&#125;-&#123;&#125;&apos;.\</span><br><span class="line">            format(local_time.tm_year, local_time.tm_mon, local_time.tm_mday)</span><br><span class="line">        curr_time_array = time.strptime(local_date, &apos;%Y-%m-%d&apos;)</span><br><span class="line">        curr_time_stamp = time.mktime(curr_time_array)</span><br><span class="line">        # 获取当前时间</span><br><span class="line">        curr_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(curr_time_stamp))</span><br><span class="line"></span><br><span class="line">        # 计算出预售时长的时间戳</span><br><span class="line">        delta_time_stamp = &apos;2505600&apos;</span><br><span class="line">        # 算出预售票的截止日期时间戳</span><br><span class="line">        dead_time_stamp = int(curr_time_stamp) + int(delta_time_stamp)</span><br><span class="line">        dead_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(dead_time_stamp))</span><br><span class="line">        print(&apos;合理的乘车日期范围是:(&#123;&#125;)~(&#123;&#125;)&apos;.format(curr_time, dead_time))</span><br><span class="line"></span><br><span class="line">        train_date = input(&apos;请输入乘坐日期(year-month-day):&apos;)</span><br><span class="line">        # 把乘车日期转换成时间戳来比较</span><br><span class="line">        # 先生成一个时间数组</span><br><span class="line">        time_array = time.strptime(train_date, &apos;%Y-%m-%d&apos;)</span><br><span class="line">        # 把时间数组转化成时间戳</span><br><span class="line">        train_date_stamp = time.mktime(time_array)</span><br><span class="line">        # 获取标准的乘车日期</span><br><span class="line">        train_date_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(train_date_stamp))</span><br><span class="line">        # 做上面几步主要是把用户输入的时间格式转变成标准的格式</span><br><span class="line">        # 如用户输入:2018-2-22,那么形成的查票URL就不是正确的</span><br><span class="line">        # 只有是:    2018-02-22,组合的URL才是正确的!</span><br><span class="line">        # 通过时间戳来比较时间的正确性</span><br><span class="line">        if int(train_date_stamp) &gt;= int(curr_time_stamp) and \</span><br><span class="line">            int(train_date_stamp) &lt;= dead_time_stamp:</span><br><span class="line">            return True, train_date_time</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;_check_date() error: 乘车日期:&#123;&#125;, 当前系统时间:&#123;&#125;, 预售时长为:&#123;&#125;&apos;</span><br><span class="line">                  .format(train_date_time, curr_time, dead_time))</span><br><span class="line">            return False, None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    filename = &apos;station_name.txt&apos;</span><br><span class="line">    station = Station()</span><br><span class="line">    station.station_name_code()</span><br><span class="line">    station.save_station_code(filename)</span><br><span class="line">    station.query_ticket()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>5.coordinate.py(验证码坐标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def coor():</span><br><span class="line">    arr = [[],[&apos;45&apos;,&apos;45&apos;],[&apos;110&apos;,&apos;45&apos;],[&apos;175&apos;,&apos;45&apos;],[&apos;240&apos;,&apos;45&apos;],</span><br><span class="line">              [&apos;45&apos;,&apos;110&apos;],[&apos;110&apos;,&apos;110&apos;],[&apos;175&apos;,&apos;110&apos;],[&apos;240&apos;,&apos;110&apos;]]</span><br><span class="line">    cnt = input(&apos;请输入验证码坐标，以,隔开\n&apos;)</span><br><span class="line">    Str = []</span><br><span class="line">    for i in cnt:</span><br><span class="line">        if i == &apos;,&apos;:</span><br><span class="line">            continue</span><br><span class="line">        else:</span><br><span class="line">            Str = Str + arr[int(i)]</span><br><span class="line">    return &apos;,&apos;.join(Str)</span><br></pre></td></tr></table></figure><p>6.buy.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import chardet</span><br><span class="line">import urllib.parse</span><br><span class="line">import settings</span><br><span class="line">from login import Login</span><br><span class="line">from stations import Station</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line">import stations</span><br><span class="line"></span><br><span class="line">class Buy:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 使用登录时候的session,这样好一些!</span><br><span class="line">        self.headers = settings.headers</span><br><span class="line">        self.session = settings.session</span><br><span class="line">    def checkUser(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:验证登录</span><br><span class="line">        :return: 无</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/login/checkUser&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        result = resp.json()</span><br><span class="line">        checkUser_flag = result[&apos;status&apos;]</span><br><span class="line">        if checkUser_flag == True:</span><br><span class="line">            print(&apos;验证登录成功！&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def get_secretStr(self, station_info):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:返回高铁车次信息</span><br><span class="line">        :param item: 单车次信息</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        val = str(input(&apos;请输入订票的车次:&apos;))</span><br><span class="line">        for item in station_info:</span><br><span class="line">            if item[&apos;train_name&apos;] == val:</span><br><span class="line">                return item[&apos;train_id&apos;]</span><br><span class="line">    def submitOrderRequest(self, station_info):</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/leftTicket/submitOrderRequest&apos;</span><br><span class="line">        cnt = self.get_secretStr(station_info)</span><br><span class="line">        Str = urllib.parse.unquote(cnt)</span><br><span class="line">        # 获取当前时间的时间戳</span><br><span class="line">        local_time = time.localtime()</span><br><span class="line">        local_date = &apos;&#123;&#125;-&#123;&#125;-&#123;&#125;&apos;.\</span><br><span class="line">            format(local_time.tm_year, local_time.tm_mon, local_time.tm_mday)</span><br><span class="line">        curr_time_array = time.strptime(local_date, &apos;%Y-%m-%d&apos;)</span><br><span class="line">        curr_time_stamp = time.mktime(curr_time_array)</span><br><span class="line">        # 获取当前时间</span><br><span class="line">        curr_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(curr_time_stamp))</span><br><span class="line">        train_date = input(&apos;请再次确认乘坐日期(year-month-day):&apos;)</span><br><span class="line">        query_from_station_name = input(&apos;请再次输入起始站:&apos;)</span><br><span class="line">        query_to_station_name = input(&apos;请再次输入终点站:&apos;)</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;secretStr&apos;: Str,</span><br><span class="line">            &apos;train_date&apos;: train_date,</span><br><span class="line">            &apos;back_train_date&apos;: curr_time,</span><br><span class="line">            &apos;tour_flag&apos;: &apos;dc&apos;,</span><br><span class="line">            &apos;purpose_codes&apos;: &apos;ADULT&apos;,</span><br><span class="line">            &apos;query_from_station_name&apos;: query_from_station_name,</span><br><span class="line">            &apos;query_to_station_name&apos;: query_to_station_name,</span><br><span class="line">            &apos;undefined&apos;: &apos;&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            print(&apos;submitOrderRequest成功！&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;submitOrderRequest() error! status_code:&#123;&#125;, url:&#123;&#125;&apos;.</span><br><span class="line">                  format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">    def initDc(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:请求提交购票人信息和选择购票坐票或者卧铺类型页面</span><br><span class="line">        :return: 无</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/initDc&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        #设置网页编码</span><br><span class="line">        if chardet.detect(resp.content).get(&apos;encoding&apos;) != &apos;UTF-8&apos;:</span><br><span class="line">            resp.encoding = &apos;UTF-8&apos;</span><br><span class="line">        match = re.search(&quot;var globalRepeatSubmitToken = &apos;(.*?)&apos;;&quot;, resp.text)</span><br><span class="line">        ticketToken = match.group(1)</span><br><span class="line">        people_url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/getPassengerDTOs&apos;</span><br><span class="line">        people_resp = self.session.post(people_url, data=&#123;&quot;REPEAT_SUBMIT_TOKEN&quot;:ticketToken,&quot;_json_att&quot;:&quot;&quot;&#125;, headers=self.headers)</span><br><span class="line">        people_json = people_resp.json()</span><br><span class="line">        result = dict(people_json)</span><br><span class="line">        info = result[&apos;data&apos;][&apos;normal_passengers&apos;][1]</span><br><span class="line">        train_no = re.search(&quot;&apos;train_no&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        leftTicket = re.search(&quot;&apos;ypInfoDetail&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        purpose_codes = re.search(&quot;&apos;purpose_codes&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        station_train_code = re.search(&quot;&apos;station_train_code&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        to_station_telecode = re.search(&quot;&apos;to_station_telecode&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        train_location = re.search(&quot;&apos;train_location&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        key_check_isChange = re.search(&quot;&apos;key_check_isChange&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        return info, ticketToken, train_no, leftTicket, purpose_codes, station_train_code, to_station_telecode, train_location, key_check_isChange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def checkOrderInfo(self, info, ticketToken):</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/checkOrderInfo&apos;</span><br><span class="line">        passengerTicketStr = &apos;O,0,1,&apos; + info[&apos;passenger_name&apos;] + &apos;,1,&apos; + info[&apos;passenger_id_no&apos;] + &apos;,&apos; + info[&apos;mobile_no&apos;] + &apos;,N&apos;</span><br><span class="line">        oldPassengerStr = info[&apos;passenger_name&apos;] + &apos;,1,&apos; + info[&apos;passenger_id_no&apos;] + &apos;,1_&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">                   &apos;cancel_flag&apos;: &apos;2&apos;,</span><br><span class="line">                   &apos;bed_level_order_num&apos;: &apos;000000000000000000000000000000&apos;,</span><br><span class="line">                   &apos;passengerTicketStr&apos;: passengerTicketStr,</span><br><span class="line">                   &apos;oldPassengerStr&apos;: oldPassengerStr,#</span><br><span class="line">                   &apos;tour_flag&apos;: &apos;dc&apos;,</span><br><span class="line">                   &apos;randCode&apos;: &apos;&apos;,</span><br><span class="line">                   &apos;whatsSelect&apos;: &apos;1&apos;,</span><br><span class="line">                    &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">                    &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,#</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        result = dict(resp.json())</span><br><span class="line">        if result[&apos;data&apos;][&apos;submitStatus&apos;] == True:</span><br><span class="line">            print(&apos;checkOrderInfo成功！&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;checkOrderInfo失败！&apos;)</span><br><span class="line">        return passengerTicketStr, oldPassengerStr</span><br><span class="line">    def getQueueCount(self, trainDate, train_no, leftTicket, ticketToken, station_train_code, fromStationTelecode, to_station_telecode,</span><br><span class="line">                      purpose_codes, train_location, passengerTicketStr, oldPassengerStr, key_check_isChange):</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/getQueueCount&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;train_date&apos;: datetime.datetime.fromtimestamp(time.mktime(time.strptime(trainDate, &apos;%Y-%m-%d&apos;))).strftime(&apos;%a %b %d %Y %H:%M:%S GMT+0800&apos;),</span><br><span class="line">            &apos;train_no&apos;: train_no,</span><br><span class="line">            &apos;stationTrainCode&apos;: station_train_code,</span><br><span class="line">            &apos;seatType&apos;: &apos;O&apos;,</span><br><span class="line">            &apos;fromStationTelecode&apos;: fromStationTelecode,</span><br><span class="line">            &apos;toStationTelecode&apos;: to_station_telecode,</span><br><span class="line">            &apos;leftTicket&apos;: leftTicket,</span><br><span class="line">            &apos;purpose_codes&apos;: purpose_codes,</span><br><span class="line">            &apos;train_location&apos;: train_location,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        queueCountJson = resp.json()</span><br><span class="line">        if queueCountJson.get(&quot;status&quot;) == False or queueCountJson.get(&quot;httpstatus&quot;) != 200:</span><br><span class="line">            raise Exception(&quot;获取队列错误&quot;)</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/confirmSingleForQueue&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;passengerTicketStr&apos;: passengerTicketStr,</span><br><span class="line">            &apos;oldPassengerStr&apos;: oldPassengerStr,</span><br><span class="line">            &apos;randCode&apos;: &apos;&apos;,</span><br><span class="line">            &apos;purpose_codes&apos;: purpose_codes,</span><br><span class="line">            &apos;key_check_isChange&apos;: key_check_isChange,</span><br><span class="line">            &apos;leftTicketStr&apos;: leftTicket,</span><br><span class="line">            &apos;train_location&apos;: train_location,</span><br><span class="line">            &apos;choose_seats&apos;: &apos;&apos;,</span><br><span class="line">            &apos;seatDetailType&apos;: &apos;000&apos;,</span><br><span class="line">            &apos;whatsSelect&apos;: &apos;1&apos;,</span><br><span class="line">            &apos;roomType&apos;: &apos;00&apos;,</span><br><span class="line">            &apos;dwAll&apos;: &apos;N&apos;,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        singleForQueueReq = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        singleForQueueJson = singleForQueueReq.json()</span><br><span class="line">        print(singleForQueueJson)</span><br><span class="line"></span><br><span class="line">    def queryOrderWaitTime(self, ticketToken):</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/queryOrderWaitTime&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;random&apos;: time.time(),</span><br><span class="line">            &apos;tourFlag&apos;: &apos;dc&apos;,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        orderWaitJson = resp.json()</span><br><span class="line">        orderId = orderWaitJson.get(&quot;data&quot;).get(&quot;orderId&quot;)#此处有问题</span><br><span class="line">        print(orderWaitJson)</span><br><span class="line">        print(orderId)</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/resultOrderForDcQueue&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;orderSequence_no&apos;: orderId,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        dcQueueReq = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        dcQueueJson = dcQueueReq.json()</span><br><span class="line">        if dcQueueJson.get(&quot;status&quot;) and dcQueueJson.get(&quot;httpstatus&quot;) == 200 and dcQueueJson.get(</span><br><span class="line">                &quot;data&quot;) is not None and dcQueueJson.get(&quot;data&quot;).get(&quot;submitStatus&quot;):</span><br><span class="line">            print(&quot;订票成功&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(dcQueueJson)</span><br><span class="line">            print(&quot;订票失败&quot;)</span><br><span class="line"></span><br><span class="line">def start():</span><br><span class="line">    login = Login()</span><br><span class="line">    login.down_captcha()</span><br><span class="line">    check_flag = login.captcha_check()</span><br><span class="line">    login_flag = login.login(check_flag)</span><br><span class="line">    if login_flag:</span><br><span class="line">        newapptk = login.auth_uamtk(login_flag)</span><br><span class="line">        username = login.uamatuth_client(newapptk)</span><br><span class="line">        login.init_my_12306(username)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;main():login_flag为Flase&apos;)</span><br><span class="line"></span><br><span class="line">def query():</span><br><span class="line">    filename = &apos;station_name.txt&apos;</span><br><span class="line">    station = Station()</span><br><span class="line">    station.station_name_code()</span><br><span class="line">    station.save_station_code(filename)</span><br><span class="line">    station_info, train_date, from_station_code, to_station_code = station.query_ticket()</span><br><span class="line">    return station_info, train_date, from_station_code, to_station_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def shop(station_info, trainDate, fromStationTelecode, to_station_telecode):</span><br><span class="line">    buy = Buy()</span><br><span class="line">    buy.checkUser()</span><br><span class="line">    buy.submitOrderRequest(station_info)</span><br><span class="line">    info, ticketToken, train_no, leftTicket, purpose_codes, station_train_code, to_station_telecode, train_location, key_check_isChange = buy.initDc()</span><br><span class="line">    passengerTicketStr, oldPassengerStr = buy.checkOrderInfo(info, ticketToken)</span><br><span class="line">    buy.getQueueCount(trainDate, train_no, leftTicket, ticketToken, station_train_code, fromStationTelecode, to_station_telecode,</span><br><span class="line">                      purpose_codes, train_location, passengerTicketStr, oldPassengerStr, key_check_isChange)</span><br><span class="line">    buy.queryOrderWaitTime(ticketToken)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    start()</span><br><span class="line">    station_info, train_date, from_station_code, to_station_code = query()</span><br><span class="line">    shop(station_info, train_date, from_station_code, to_station_code)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初学爬虫</title>
      <link href="/2018/04/16/%E5%88%9D%E5%AD%A6%E7%88%AC%E8%99%AB/"/>
      <url>/2018/04/16/%E5%88%9D%E5%AD%A6%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<p>今天作为例子的网站：<a href="http://www.xiaohua100.cn/daxue/" target="_blank" rel="noopener">http://www.xiaohua100.cn/daxue/</a><br>啊哈，这个也是无意间找的网站，不是故意找的（大雾）（作为例子来说还是挺好的例子…<br>个人理解的爬虫分为以下几步：<br>1.<strong>获取网站url</strong><br>2.<strong>搞清楚是get请求还是post请求</strong><br>3.<strong>request或者session访问后，注意编码格式</strong><br>4.<strong>正则表达式或者用匹配出信息</strong><br>5.<strong>是否要从访问之后的返回信息得出data以及下个网站url</strong></p><a id="more"></a><p><tr></tr></p><p><tr></tr></p><p><tr></tr><br>那么今天的例子：<br>1.首先我们很清楚url = ‘<a href="http://www.xiaohua100.cn/daxue/&#39;" target="_blank" rel="noopener">http://www.xiaohua100.cn/daxue/&#39;</a><br>2.这个网站由get请求访问<br>3.我们今天的目的是寻找这些图片并进行下载，那么我们要做的是找到图片的url<br>4.然后通过正则表达式储存这些url到一个列表里面<br>5.通过requests.content 二进制下载这些图片即可</p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">url = &apos;http://www.xiaohua100.cn/daxue/&apos;</span><br><span class="line">response = requests.get(url)</span><br><span class="line">response.encoding = &apos;utf-8&apos;</span><br><span class="line">html = response.text</span><br><span class="line"></span><br><span class="line">main_url = &apos;http://www.xiaohua100.cn&apos;</span><br><span class="line">img_urls = re.findall(r&apos;/uploads/allimg/\d+/\d-\w+-\w+.jpg&apos;, html)</span><br><span class="line">for i in range(len(img_urls)):</span><br><span class="line">    img_urls[i] = main_url + img_urls[i]</span><br><span class="line"></span><br><span class="line">index = 0</span><br><span class="line">for img_url in img_urls:</span><br><span class="line">    img_data = requests.get(img_url).content</span><br><span class="line">    filename = str(index) + &apos;.jpg&apos;</span><br><span class="line">    with open(filename, &apos;wb&apos;) as f:</span><br><span class="line">        f.write(img_data)</span><br><span class="line">    print(img_url)</span><br><span class="line">    index += 1</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>爬UbuntuPaste代码</title>
      <link href="/2018/04/16/%E7%88%ACUbuntuPaste%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/04/16/%E7%88%ACUbuntuPaste%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>直接贴代码啦。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import urllib.request</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">class UbtSpider:</span><br><span class="line">    def __init__(self) :</span><br><span class="line">        self.pageIndex = 25317600</span><br><span class="line">        self.user_agent = &apos;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&apos;</span><br><span class="line">    def getPage(self,pageIndex):</span><br><span class="line">        url = &apos;http://paste.ubuntu.com/&apos; + str(pageIndex)</span><br><span class="line">        headers = &#123;&apos;User-Agent&apos;: self.user_agent, &apos;Referer&apos;: url&#125;</span><br><span class="line">        request = urllib.request.Request(url, headers=headers)</span><br><span class="line">        with urllib.request.urlopen(request) as response:</span><br><span class="line">            html = response.read()</span><br><span class="line">            content = html.decode(&apos;utf-8&apos;)</span><br><span class="line">            patten = re.compile(&apos;&lt;div class=&quot;paste&quot;&gt;&lt;pre&gt;(.*?)&lt;/pre&gt;&lt;/div&gt;&apos;, re.S)  # re.S  (.*?）表示分组</span><br><span class="line">            items = patten.findall(content)</span><br><span class="line"></span><br><span class="line">            for item in items:</span><br><span class="line">                #替换</span><br><span class="line">                item = item.replace(&apos;&amp;nbsp;&apos;, &apos; &apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;gt;&apos;, &apos;&gt;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;lt;&apos;, &apos;&lt;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;quot;&apos;, &apos;&quot;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;amp;&apos;, &apos;&amp;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;#39;&apos;, &apos;\&apos;&apos;)</span><br><span class="line">                item = re.sub(&apos;&lt;span.*?&gt;&apos;,&apos;&apos;,item)</span><br><span class="line">                item = re.sub(&apos;&lt;/span&gt;&apos;, &apos;&apos;, item)</span><br><span class="line">                # print(item)</span><br><span class="line">                patten2 = re.compile(&quot;.*include&quot;, re.S)</span><br><span class="line">                if (patten2.match(item)):</span><br><span class="line">                    fileName = str(pageIndex) + &apos;.txt&apos;</span><br><span class="line">                    print( u&quot;正在写入: &gt;&gt;&gt; &quot; + str(pageIndex))</span><br><span class="line">                    isSuccess = True</span><br><span class="line">                    with open(fileName,&apos;w&apos;) as f:</span><br><span class="line">                        try:</span><br><span class="line">                            f.write(item)</span><br><span class="line">                        except UnicodeError as e:</span><br><span class="line">                            if hasattr(e,&quot;reason&quot;):</span><br><span class="line">                                print (str(pageIndex)+u&quot; 写入失败,原因: &quot; + e.reason)</span><br><span class="line">                                isSuccess = False</span><br><span class="line">                            f.close()</span><br><span class="line">                            try:os.remove(fileName)</span><br><span class="line">                            except Exception as ose:</span><br><span class="line">                                print(str(pageIndex)+u&quot; 删除失败&quot; )</span><br><span class="line">                        if isSuccess:</span><br><span class="line">                            print(str(pageIndex) + u&quot; 写入成功!&quot; )</span><br><span class="line">                            f.close()</span><br><span class="line">    def start(self):</span><br><span class="line">        start = 25545700</span><br><span class="line">        end = 25545692</span><br><span class="line">        start = input(&quot;请输入起始页码: &quot;)</span><br><span class="line">        end = input(&quot;请输入结束页码: &quot;)</span><br><span class="line">        print(u&quot;开始爬取 UbuntuPaste 代码 ........&quot;)</span><br><span class="line">        for pageIndex in range(int(start),int(end)): # 起始范围</span><br><span class="line">            self.getPage(pageIndex)</span><br><span class="line"></span><br><span class="line">spider = UbtSpider()</span><br><span class="line">spider.start()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
