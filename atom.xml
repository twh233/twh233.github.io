<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Twh233&#39;s Blog</title>
  
  <subtitle>Love Coding,Enjoy Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://twh233.github.io/"/>
  <updated>2020-09-13T09:51:43.121Z</updated>
  <id>http://twh233.github.io/</id>
  
  <author>
    <name>Twh233</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="http://twh233.github.io/2020/09/13/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://twh233.github.io/2020/09/13/布隆过滤器/</id>
    <published>2020-09-13T09:44:45.000Z</published>
    <updated>2020-09-13T09:51:43.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>一个空的布隆过滤器是一串被置为0的bit数组（假设由m位）。同时，应该声明k个不同的散列函数生成一个统一随机分布，每一个散列函数都将元素映射到m个bit中的一个（k是一个小于m的常数，与加入过滤器中的元素个数成比例）。k与相应的m的选择由误判率决定。</p><p>向过滤器中添加元素时，通过k个散列函数得到该元素对应的k个位置，并将这些位置置为1.</p><p>查询某个元素/测试是否与已有元素重复时，依旧通过k个散列函数得到对应的k个位置，判断这些位置是否为1（若全为1则在集合内/重复）</p><p>可以看如下图所示的一个例子，其中，{x,y,z}为集合，w为进行比对的元素，m=18，k=3，不同颜色的箭头表示散列映射关系。可以看出，w并不在{x,y,z}这个集合中。 </p><img src="/2020/09/13/布隆过滤器/1.png"><h2 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h2><p>是用一个数组中的每个数据的每个二进制位表示一个数是否存在。1表示存在，0表示不存在。</p><p>相当于把数组分成很多块的空间，每一块是32个比特位。</p><p>原来32个比特位放一个数据，相当于现在一个位就可以放一个数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;布隆过滤器&quot;&gt;&lt;a href=&quot;#布隆过滤器&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器&quot;&gt;&lt;/a&gt;布隆过滤器&lt;/h2&gt;&lt;p&gt;一个空的布隆过滤器是一串被置为0的bit数组（假设由m位）。同时，应该声明k个不同的散列函数生成一个统一随机分布，每
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="布隆过滤器" scheme="http://twh233.github.io/tags/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>B树与B+树</title>
    <link href="http://twh233.github.io/2020/09/13/B%E6%A0%91%E4%B8%8EB-%E6%A0%91/"/>
    <id>http://twh233.github.io/2020/09/13/B树与B-树/</id>
    <published>2020-09-13T06:27:49.000Z</published>
    <updated>2020-09-13T06:44:37.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="B树性质"><a href="#B树性质" class="headerlink" title="B树性质"></a>B树性质</h2><p>一颗M阶B树T，满足以下条件  </p><ol><li>每个结点至多拥有M课子树  </li><li>根结点至少拥有两颗子树  </li><li>除了根结点以外，其余每个分支结点至少拥有M/2课子树  </li><li>所有的叶结点都在同一层上  </li><li>有k课子树的分支结点则存在k-1个关键字，关键字按照递增顺序进行排序  </li><li>关键字数量满足ceil(M/2)-1 &lt;= n &lt;= M-1  </li></ol><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>通过对B树进行遍历，找出要插入的结点以及结点位置，如果找到的key值在B树当中已经存在，则说明插入失败，否则，就可以进行插入操作。这里可以先不管是否超出M阶树的上限要求，因为我们在定义的时候会故意留下一个位置，可以存放多余的一个元素，插入之后，通过判断是否达到M阶树上限要求，再进行递归的分裂操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">*  @description    插入实现元素的插入</span><br><span class="line">*  @return         成功返回OK,如果存在则返回FALSE，否则返回ERROR</span><br><span class="line">*  @notice</span><br><span class="line">***/</span><br><span class="line">Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">&#123;</span><br><span class="line">    BTree p;</span><br><span class="line">    int index, temp;</span><br><span class="line">    Status find_flag;</span><br><span class="line">    if (NULL == T)//考虑B树为空树的情况</span><br><span class="line">    &#123;</span><br><span class="line">        T = (BTree)malloc(BTLEN);</span><br><span class="line">        if (NULL == T) return OVERFLOW;</span><br><span class="line">        T-&gt;keynum = 1;</span><br><span class="line">        T-&gt;parent = NULL;</span><br><span class="line">        for (index = 0;index &lt;= m; ++index)</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;ptr[index] = NULL;</span><br><span class="line">            T-&gt;key[index] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        T-&gt;key[1] = e.key;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    find_flag = findBTree(T, p, temp, e.key);//寻找插入节点</span><br><span class="line">    if (find_flag == TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    if (find_flag == FALSE)</span><br><span class="line">    &#123;                                //不管怎样先直接插入</span><br><span class="line">        p-&gt;keynum++;</span><br><span class="line">        for (index = p-&gt;keynum;index &gt; temp;--index)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;key[index] = p-&gt;key[index - 1];</span><br><span class="line">            p-&gt;ptr[index] = p-&gt;ptr[index - 1];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;ptr[temp] = NULL;</span><br><span class="line">        p-&gt;key[temp] = e.key;</span><br><span class="line">        if (p-&gt;keynum == m)      //这种情况得分裂</span><br><span class="line">        &#123;</span><br><span class="line">            splitBTree(p);</span><br><span class="line">        &#125;</span><br><span class="line">        renewParent(T);</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    return ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分裂"><a href="#分裂" class="headerlink" title="分裂"></a>分裂</h3><p>分裂操作是插入操作过程中一个最重要的操作，因为这是处理“冲突”（即结点中的数据元素大于B树规则中要求的最大个数）的一个通用的处理方式，这种方式必须要对所有的情况都适用，而分裂是解决这一问题一个方法。当然这种方法只是考虑到效率，没有对兄弟可否借数据进行判断，但是另外一种方式比较麻烦，这里先不做讨论。</p><p>分裂的思路是让父亲结点先腾出一个位置（包括key和ptr）出来，然后在需要分裂的结点里面取中间的元素并且移动中间的元素key到父亲结点已经腾出来的key位置那里，然后把分裂出来的右部分接到腾出来的ptr那里。注意整个过程对左部分和右部分的都要改变元素的个数以及清空一些没用的空间。在往上分裂之后可能会造成一种情况，就是父亲结点也可能达到分裂的最大个数，所以，检查父亲结点是否需要分裂，需要的话，递归之。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           status splitBTree(BTree T)</span><br><span class="line">*  @description    递归实现分裂节点操作</span><br><span class="line">*  @return         成功返回OK,否则返回ERROR</span><br><span class="line">*  @notice</span><br><span class="line">***/</span><br><span class="line">Status splitBTree(BTree T) //此时分裂的节点一定会是超出最大值的。</span><br><span class="line">&#123;</span><br><span class="line">    BTree t1, t2;</span><br><span class="line">    int index, index_1;</span><br><span class="line">    if (T-&gt;parent == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        t1 = (BTree)malloc(BTLEN);</span><br><span class="line">        if (NULL == t1) return OVERFLOW;</span><br><span class="line">        t2 = (BTree)malloc(BTLEN);</span><br><span class="line">        if (NULL == t2) return OVERFLOW;</span><br><span class="line"></span><br><span class="line">        t1-&gt;keynum = m / 2;</span><br><span class="line">        t2-&gt;keynum = m - (m / 2) - 1;</span><br><span class="line">        t1-&gt;parent = T;</span><br><span class="line">        t2-&gt;parent = T;</span><br><span class="line">        for (index = 0;index &lt;= m; ++index)  //先全部初始化</span><br><span class="line">        &#123;</span><br><span class="line">            t1-&gt;ptr[index] = NULL;</span><br><span class="line">            t1-&gt;key[index] = 0;</span><br><span class="line">            t2-&gt;ptr[index] = NULL;</span><br><span class="line">            t2-&gt;key[index] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        for (index = 0;index &lt;= m / 2; ++index)  //初始化t1</span><br><span class="line">        &#123;</span><br><span class="line">            t1-&gt;ptr[index] = T-&gt;ptr[index];</span><br><span class="line">            t1-&gt;key[index] = T-&gt;key[index];</span><br><span class="line">        &#125;</span><br><span class="line">        t2-&gt;ptr[0] = T-&gt;ptr[(m / 2) + 1];</span><br><span class="line">        for (index = (m / 2) + 2;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">        &#123;</span><br><span class="line">            t2-&gt;ptr[index - ((m / 2) + 1)] = T-&gt;ptr[index];</span><br><span class="line">            t2-&gt;key[index - ((m / 2) + 1)] = T-&gt;key[index];</span><br><span class="line">        &#125;</span><br><span class="line">        T-&gt;keynum = 1;</span><br><span class="line">        T-&gt;ptr[0] = t1;</span><br><span class="line">        T-&gt;ptr[1] = t2;</span><br><span class="line">        T-&gt;key[1] = T-&gt;key[m / 2 + 1];</span><br><span class="line">        for (index = 2;index &lt;= m; ++index)  //初始化T</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;ptr[index] = NULL;</span><br><span class="line">            T-&gt;key[index] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>B树元素的删除操作与插入操作类似，但是却要麻烦，因为得分两种情况处理。（1）寻找到存在这个元素，而且这个元素所在是叶子节点（即它的孩子为空），直接对其进行删除，之后再判断是否小于B树规则中要求的最小的子树个数。如果小于，那就调用合并函数。（2）如果寻找到的这个元素是非叶子节点的元素，通过寻找比该元素小的最大元素（该元素肯定为叶子节点），把该元素直接赋值给要删除的元素，再在叶子节点处进行（1）中的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">*  @description    实现B树元素的删除</span><br><span class="line">*  @return         成功返回OK,否则返回ERROR</span><br><span class="line">*  @notice</span><br><span class="line">***/</span><br><span class="line">Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">&#123;</span><br><span class="line">    BTree p, q;</span><br><span class="line">    int num, temp, index;</span><br><span class="line">    Status find_flag;</span><br><span class="line">    if (T == NULL)</span><br><span class="line">        return ERROR;</span><br><span class="line">    find_flag = findBTree(T, p, temp, e.key);</span><br><span class="line">    if (find_flag == FALSE)</span><br><span class="line">    &#123;</span><br><span class="line">        return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    if (find_flag == TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        //deleteBTreeBNode(p,temp);</span><br><span class="line">        if (p-&gt;ptr[temp] == NULL)                //如果是叶子节点的话</span><br><span class="line">        &#123;</span><br><span class="line">            for (index = temp;index &lt;= p-&gt;keynum;++index)</span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;key[index] = p-&gt;key[index + 1];</span><br><span class="line">                p-&gt;ptr[index] = p-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;keynum--;</span><br><span class="line">            if (p-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">            &#123;</span><br><span class="line">                //调用借兄弟的函数</span><br><span class="line">                if (borrowBNode(p) == EMPTY) T = NULL;</span><br><span class="line">                else renewParent(T);</span><br><span class="line">            &#125;</span><br><span class="line">            return OK;</span><br><span class="line">        &#125;</span><br><span class="line">        else                                    //不是叶子结点的话</span><br><span class="line">        &#123;</span><br><span class="line">            //遍历</span><br><span class="line">            findMax(p-&gt;ptr[temp - 1], q, num);//返回的q一定会是叶子节点</span><br><span class="line">            p-&gt;key[temp] = q-&gt;key[num];</span><br><span class="line">            q-&gt;key[num] = 0;</span><br><span class="line">            q-&gt;keynum--;</span><br><span class="line">            if (q-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">            &#123;</span><br><span class="line">                //调用借兄弟的函数</span><br><span class="line">                if (borrowBNode(q) == EMPTY) T = NULL;</span><br><span class="line">                else renewParent(T);</span><br><span class="line">            &#125;</span><br><span class="line">            return OK;</span><br><span class="line">        &#125;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    return ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>首先先向兄弟结点借元素，如果兄弟能够借给你元素的话（即借了你之后并不会小于最少的分支），那么直接从兄弟那里取元素，否则，和兄弟合并。<br>合并其实是分裂反过来的情况，从父亲结点那里取出一个key值介于要合并的两个结点之间的元素，插入左部分最末尾处，同时右部分插到左部分后面，然后父亲结点元素依次往前挪。从而实现合并操作。之后，也必须对父亲结点进行判断是否小于最小的分支数，如果也小于，对父亲节点进行递归操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           Status borrowBNode(BTree &amp;T)</span><br><span class="line">*  @description    递归实现，向兄弟借元素，否则和兄弟合并</span><br><span class="line">*  @return         成功返回OK,否则返回ERROR</span><br><span class="line">*  @notice         这种情况应该是T为单元素结点</span><br><span class="line">***/</span><br><span class="line">Status borrowBNode(BTree T)</span><br><span class="line">&#123;</span><br><span class="line">    int mynum, bronum, index;</span><br><span class="line">    BTree b = NULL, f = NULL;</span><br><span class="line">    if (T == NULL) return ERROR;</span><br><span class="line">    f = T-&gt;parent;</span><br><span class="line">    if (f == NULL)//考虑父亲结点不存在的情况</span><br><span class="line">    &#123;</span><br><span class="line">        if (T-&gt;keynum == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            f = T-&gt;ptr[0];</span><br><span class="line">            if (f == NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                free(T);</span><br><span class="line">                return EMPTY;</span><br><span class="line">            &#125;</span><br><span class="line">            for (index = 0;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                T-&gt;key[index] = f-&gt;key[index];</span><br><span class="line">                T-&gt;ptr[index] = f-&gt;ptr[index];</span><br><span class="line">            &#125;</span><br><span class="line">            T-&gt;keynum = f-&gt;keynum;</span><br><span class="line">            free(f);</span><br><span class="line">            renewParent(T);</span><br><span class="line">        &#125;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    mynum = whichSon(T);</span><br><span class="line">    if (mynum == 0)</span><br><span class="line">        bronum = 1;</span><br><span class="line">    else</span><br><span class="line">        bronum = mynum - 1;</span><br><span class="line">    b = f-&gt;ptr[bronum];</span><br><span class="line">    if (b-&gt;keynum == (m + 1) / 2 - 1) //如果兄弟帮不了你了</span><br><span class="line">    &#123;</span><br><span class="line">        //那么就和这个兄弟合体</span><br><span class="line">        if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">        &#123;</span><br><span class="line">            b-&gt;keynum++;</span><br><span class="line">            b-&gt;key[b-&gt;keynum] = f-&gt;key[mynum];</span><br><span class="line">            b-&gt;ptr[b-&gt;keynum] = T-&gt;ptr[0];</span><br><span class="line">            for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                b-&gt;key[index + b-&gt;keynum] = T-&gt;key[index];</span><br><span class="line">                b-&gt;ptr[index + b-&gt;keynum] = T-&gt;ptr[index];</span><br><span class="line">                b-&gt;keynum++;</span><br><span class="line">            &#125;</span><br><span class="line">            free(T);</span><br><span class="line">            for (index = mynum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">                f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            f-&gt;keynum--;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;keynum++;</span><br><span class="line">            T-&gt;key[T-&gt;keynum] = f-&gt;key[bronum];</span><br><span class="line">            T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">            for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                T-&gt;key[index + T-&gt;keynum] = b-&gt;key[index];</span><br><span class="line">                T-&gt;ptr[index + T-&gt;keynum] = b-&gt;ptr[index];</span><br><span class="line">                T-&gt;keynum++;</span><br><span class="line">            &#125;</span><br><span class="line">            free(b);</span><br><span class="line">            for (index = bronum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">                f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            f-&gt;keynum--;</span><br><span class="line">        &#125;</span><br><span class="line">        renewParent(f);</span><br><span class="line">        if (f-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">        &#123;</span><br><span class="line">            //调用借兄弟的函数</span><br><span class="line">            return borrowBNode(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else//如果兄弟能够帮你</span><br><span class="line">    &#123;</span><br><span class="line">        if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">        &#123;</span><br><span class="line">            for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                T-&gt;key[index + 1] = T-&gt;key[index];</span><br><span class="line">                T-&gt;ptr[index + 1] = T-&gt;ptr[index];</span><br><span class="line">            &#125;</span><br><span class="line">            T-&gt;ptr[1] = T-&gt;ptr[0];</span><br><span class="line">            T-&gt;key[1] = f-&gt;key[mynum];</span><br><span class="line">            T-&gt;ptr[0] = b-&gt;ptr[b-&gt;keynum];</span><br><span class="line">            T-&gt;keynum++;</span><br><span class="line">            f-&gt;key[mynum] = b-&gt;key[b-&gt;keynum];</span><br><span class="line">            b-&gt;key[b-&gt;keynum] = 0;</span><br><span class="line">            b-&gt;ptr[b-&gt;keynum] = NULL;</span><br><span class="line">            b-&gt;keynum--;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        else                                    //如果我是第一个</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;keynum++;</span><br><span class="line">            T-&gt;key[T-&gt;keynum] = f-&gt;key[1];</span><br><span class="line">            T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">            f-&gt;key[1] = b-&gt;key[1];</span><br><span class="line">            b-&gt;ptr[0] = b-&gt;ptr[1];</span><br><span class="line">            for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                b-&gt;key[index] = b-&gt;key[index + 1];</span><br><span class="line">                b-&gt;ptr[index] = b-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            b-&gt;keynum--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br></pre></td><td class="code"><pre><span class="line">1 #define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">2 #include&lt;stdio.h&gt;         </span><br><span class="line">3 #include&lt;stdlib.h&gt;</span><br><span class="line">4 #include&lt;time.h&gt;  </span><br><span class="line">5 #define BTREELENGTH 50</span><br><span class="line">6 #define BTLEN (sizeof(BTNode))</span><br><span class="line">7 #define MAXINT 100  </span><br><span class="line">8 typedef enum status</span><br><span class="line">9 &#123;</span><br><span class="line"> 10     TRUE,</span><br><span class="line"> 11     FALSE,</span><br><span class="line"> 12     OK,</span><br><span class="line"> 13     ERROR,</span><br><span class="line"> 14     OVERFLOW,</span><br><span class="line"> 15     EMPTY</span><br><span class="line"> 16 &#125;Status;</span><br><span class="line"> 17 typedef int KeyType;</span><br><span class="line"> 18 </span><br><span class="line"> 19 //**********************************B树****************************************</span><br><span class="line"> 20 #define  m  3   // B树的阶，此设为4</span><br><span class="line"> 21 typedef struct </span><br><span class="line"> 22 &#123;</span><br><span class="line"> 23     KeyType  key;</span><br><span class="line"> 24     char     data;</span><br><span class="line"> 25 &#125; Record;</span><br><span class="line"> 26 typedef struct BTNode </span><br><span class="line"> 27 &#123;</span><br><span class="line"> 28     int             keynum;        // 结点中关键字个数，即结点的大小</span><br><span class="line"> 29     struct BTNode  *parent;        // 指向双亲结点</span><br><span class="line"> 30     KeyType         key[m + 1];      // 关键字向量，0号单元未用</span><br><span class="line"> 31     struct BTNode  *ptr[m + 1];      // 子树指针向量</span><br><span class="line"> 32 //  Record         *recptr[m + 1];   // 记录指针向量，0号单元未用</span><br><span class="line"> 33                                      //在此添加其他自定义数据</span><br><span class="line"> 34 &#125; BTNode, *BTree;                // B树结点和B树的类型</span><br><span class="line"> 35 typedef struct </span><br><span class="line"> 36 &#123;</span><br><span class="line"> 37     BTNode  *pt;      // 指向找到的结点</span><br><span class="line"> 38     int      i;       // 1..m，在结点中的关键字序号</span><br><span class="line"> 39     int      tag;     // 1:查找成功，0:查找失败</span><br><span class="line"> 40 &#125; Result;           // 在B树的查找结果类型   </span><br><span class="line"> 41 //**********************************B树****************************************</span><br><span class="line"> 42 </span><br><span class="line"> 43 //**********************************队列***************************************</span><br><span class="line"> 44 typedef struct LNode &#123;</span><br><span class="line"> 45     BTree data;     // 数据域</span><br><span class="line"> 46     struct LNode *next;     // 指针域</span><br><span class="line"> 47 &#125; LNode, *LinkList;</span><br><span class="line"> 48 //**********************************队列***************************************</span><br><span class="line"> 49 </span><br><span class="line"> 50 /***</span><br><span class="line"> 51 *  @name           Status InitQueue_L(LinkList &amp;L)</span><br><span class="line"> 52 *  @description    初始化队列</span><br><span class="line"> 53 *  @return         成功返回OK，开辟空间失败返回OVERFLOW</span><br><span class="line"> 54 *  @notice</span><br><span class="line"> 55 ***/</span><br><span class="line"> 56 Status InitQueue_L(LinkList &amp;L)</span><br><span class="line"> 57 &#123; // 初始化一个只含头结点的空单链表L</span><br><span class="line"> 58     if (NULL == (L = (LNode*)malloc(sizeof(LNode)))) // 生成新结点</span><br><span class="line"> 59         return OVERFLOW;</span><br><span class="line"> 60     L-&gt;next = NULL;</span><br><span class="line"> 61     return OK;</span><br><span class="line"> 62 &#125;</span><br><span class="line"> 63 /***</span><br><span class="line"> 64 *  @name           LNode* MakeNode_L(BTree e)</span><br><span class="line"> 65 *  @description    构造队列结点</span><br><span class="line"> 66 *  @return         返回结点地址</span><br><span class="line"> 67 *  @notice</span><br><span class="line"> 68 ***/</span><br><span class="line"> 69 LNode* MakeNode_L(BTree e)</span><br><span class="line"> 70 &#123; // 构造数据域为e的单链表结点</span><br><span class="line"> 71     LNode *p;</span><br><span class="line"> 72     p = (LNode*)malloc(sizeof(LNode)); // 分配结点空间</span><br><span class="line"> 73     if (p != NULL)</span><br><span class="line"> 74     &#123;</span><br><span class="line"> 75         p-&gt;data = e;</span><br><span class="line"> 76         p-&gt;next = NULL;</span><br><span class="line"> 77     &#125;</span><br><span class="line"> 78     return p;</span><br><span class="line"> 79 &#125;</span><br><span class="line"> 80 /***</span><br><span class="line"> 81 *  @name           Status Enqueue_L(LNode *p, BTree e)</span><br><span class="line"> 82 *  @description    队列的入队</span><br><span class="line"> 83 *  @return         成功返回OK，否则返回ERROR</span><br><span class="line"> 84 *  @notice</span><br><span class="line"> 85 ***/</span><br><span class="line"> 86 Status Enqueue_L(LNode *p, BTree e)</span><br><span class="line"> 87 &#123; //在p结点之后插入q结点</span><br><span class="line"> 88     if (NULL == p) return ERROR; // 参数不合理</span><br><span class="line"> 89     while (p-&gt;next != NULL)</span><br><span class="line"> 90         p = p-&gt;next;</span><br><span class="line"> 91     p-&gt;next = MakeNode_L(e);         // 对应图4.11（b）的②，修改p结点的指针域</span><br><span class="line"> 92     return OK;</span><br><span class="line"> 93 &#125;</span><br><span class="line"> 94 </span><br><span class="line"> 95 /***</span><br><span class="line"> 96 *  @name           Status Dequeue_L(LNode *p, BTree &amp;e)</span><br><span class="line"> 97 *  @description    队列的出队</span><br><span class="line"> 98 *  @return         成功返回OK，否则返回ERROR</span><br><span class="line"> 99 *  @notice</span><br><span class="line">100 ***/</span><br><span class="line">101 Status Dequeue_L(LNode *p, BTree &amp;e)</span><br><span class="line">102 &#123;</span><br><span class="line">103     // 删除p结点的直接后继结点并用参数e返回被删结点的值</span><br><span class="line">104     LNode *q;</span><br><span class="line">105     if (NULL == p || NULL == p-&gt;next) return ERROR; // 删除位置不合理 </span><br><span class="line">106     q = p-&gt;next;</span><br><span class="line">107     p-&gt;next = q-&gt;next; // 修改被删结点q的指针域</span><br><span class="line">108     e = q-&gt;data;</span><br><span class="line">109     free(q); // 释放结点q</span><br><span class="line">110     return OK;</span><br><span class="line">111 &#125;</span><br><span class="line">112 </span><br><span class="line">113 /***</span><br><span class="line">114 *  @name           void DestroyQueue(LinkList L)</span><br><span class="line">115 *  @description    队列的销毁</span><br><span class="line">116 *  @return         无返回</span><br><span class="line">117 *  @notice</span><br><span class="line">118 ***/</span><br><span class="line">119 void DestroyQueue(LinkList L)</span><br><span class="line">120 &#123;</span><br><span class="line">121     // 销毁整个链表</span><br><span class="line">122     LinkList p;</span><br><span class="line">123     if (L != NULL)</span><br><span class="line">124     &#123;</span><br><span class="line">125         p = L;</span><br><span class="line">126         L = L-&gt;next;</span><br><span class="line">127         free(p);</span><br><span class="line">128         DestroyQueue(L);</span><br><span class="line">129     &#125;</span><br><span class="line">130 &#125;</span><br><span class="line">131 /***</span><br><span class="line">132 *  @name           Status  IfEmpty(LinkList L)</span><br><span class="line">133 *  @description    判断队列是否为空</span><br><span class="line">134 *  @return         空返回TRUE，不空返回FALSE，否则返回ERROR</span><br><span class="line">135 *  @notice         </span><br><span class="line">136 ***/</span><br><span class="line">137 Status  IfEmpty(LinkList L)</span><br><span class="line">138 &#123;</span><br><span class="line">139     if (L == NULL) return ERROR;</span><br><span class="line">140     if (L-&gt;next == NULL) return TRUE;</span><br><span class="line">141     return FALSE;</span><br><span class="line">142 &#125;</span><br><span class="line">143 /***</span><br><span class="line">144 *  @name           Status ergodic(BTree T, LinkList L, int newline, int sum)</span><br><span class="line">145 *  @description    print需要用到的递归遍历程序</span><br><span class="line">146 *  @return         成功返回OK</span><br><span class="line">147 *  @notice         此处用到队列</span><br><span class="line">148 ***/</span><br><span class="line">149 Status ergodic(BTree T, LinkList L, int newline, int sum)</span><br><span class="line">150 &#123;</span><br><span class="line">151     int index;</span><br><span class="line">152     BTree p;</span><br><span class="line">153     if (T != NULL)</span><br><span class="line">154     &#123;</span><br><span class="line">155         printf(&quot;[ &quot;);</span><br><span class="line">156         Enqueue_L(L, T-&gt;ptr[0]);</span><br><span class="line">157         for (index = 1;index &lt;= T-&gt;keynum; index++)</span><br><span class="line">158         &#123;</span><br><span class="line">159             printf(&quot;%d &quot;, T-&gt;key[index]);</span><br><span class="line">160             Enqueue_L(L, T-&gt;ptr[index]);</span><br><span class="line">161         &#125;</span><br><span class="line">162         sum += T-&gt;keynum + 1;</span><br><span class="line">163         printf(&quot;]&quot;);</span><br><span class="line">164         if (newline == 0)</span><br><span class="line">165         &#123;</span><br><span class="line">166             printf(&quot;\n&quot;);</span><br><span class="line">167             newline = sum - 1;</span><br><span class="line">168             sum = 0;</span><br><span class="line">169         &#125;</span><br><span class="line">170         else</span><br><span class="line">171         &#123;</span><br><span class="line">172             --newline;</span><br><span class="line">173         &#125;</span><br><span class="line">174     &#125;</span><br><span class="line">175     if (IfEmpty(L) == FALSE)</span><br><span class="line">176     &#123;</span><br><span class="line">177         Dequeue_L(L, p);</span><br><span class="line">178         ergodic(p, L, newline, sum);</span><br><span class="line">179     &#125;</span><br><span class="line">180     return OK;</span><br><span class="line">181 &#125;</span><br><span class="line">182 /***</span><br><span class="line">183 *  @name           Status print(BTree T)</span><br><span class="line">184 *  @description    层次遍历并分层输出B树</span><br><span class="line">185 *  @return         成功返回OK</span><br><span class="line">186 *  @notice</span><br><span class="line">187 ***/</span><br><span class="line">188 Status print(BTree T)</span><br><span class="line">189 &#123;</span><br><span class="line">190     LinkList L;</span><br><span class="line">191     if (T == NULL)</span><br><span class="line">192     &#123;</span><br><span class="line">193         printf(&quot;[ ]\n&quot;);</span><br><span class="line">194         return OK;</span><br><span class="line">195     &#125;</span><br><span class="line">196     InitQueue_L(L);</span><br><span class="line">197     ergodic(T, L, 0, 0);</span><br><span class="line">198     DestroyQueue(L);</span><br><span class="line">199     return OK;</span><br><span class="line">200 &#125;</span><br><span class="line">201 </span><br><span class="line">202 /***</span><br><span class="line">203 *  @name           Status findMax(BTree T, BTree &amp;p,int ans)</span><br><span class="line">204 *  @description    寻找最大关键字的结点,T为要寻找的树，p为返回的节点,ans为第几个</span><br><span class="line">205 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">206 *  @notice</span><br><span class="line">207 ***/</span><br><span class="line">208 Status findMax(BTree T, BTree &amp;p, int &amp;ans)</span><br><span class="line">209 &#123;</span><br><span class="line">210     if (T == NULL)</span><br><span class="line">211         return ERROR;</span><br><span class="line">212     p = T;</span><br><span class="line">213     while (p-&gt;ptr[p-&gt;keynum] != NULL)</span><br><span class="line">214     &#123;</span><br><span class="line">215         p = p-&gt;ptr[p-&gt;keynum];</span><br><span class="line">216     &#125;</span><br><span class="line">217     ans = p-&gt;keynum;</span><br><span class="line">218     return OK;</span><br><span class="line">219 &#125;</span><br><span class="line">220 /***</span><br><span class="line">221 *  @name           Status findMin(BTree T, BTree &amp;p,int ans)</span><br><span class="line">222 *  @description    寻找最小关键字的结点,T为要寻找的树，p为返回的节点,ans为第几个</span><br><span class="line">223 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">224 *  @notice</span><br><span class="line">225 ***/</span><br><span class="line">226 /***</span><br><span class="line">227 *  @name           Status findBTree(BTree T, BTree &amp;p, int &amp;ans, KeyType k)</span><br><span class="line">228 *  @description    寻找 ,T为要寻找的树，p为返回的节点，ans为第几个元素，k为要找的值</span><br><span class="line">229 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">230 *  @notice</span><br><span class="line">231 ***/</span><br><span class="line">232 Status findBTree(BTree T, BTree &amp;p, int &amp;ans, KeyType k)</span><br><span class="line">233 &#123;</span><br><span class="line">234     BTree q;</span><br><span class="line">235     int index = 1;</span><br><span class="line">236     KeyType  keynow;</span><br><span class="line">237     if (T == NULL)</span><br><span class="line">238         return ERROR;</span><br><span class="line">239     q = T;</span><br><span class="line">240     keynow = T-&gt;key[1];</span><br><span class="line">241     while (q != NULL)                 //深度的遍历</span><br><span class="line">242     &#123;</span><br><span class="line">243         index = 1;</span><br><span class="line">244         keynow = q-&gt;key[index];</span><br><span class="line">245         while (index &lt;= q-&gt;keynum) //节点内对各真值进行遍历</span><br><span class="line">246         &#123;</span><br><span class="line">247             if (k == keynow)           //找到元素</span><br><span class="line">248             &#123;</span><br><span class="line">249                 p = q;</span><br><span class="line">250                 ans = index;</span><br><span class="line">251                 return TRUE;</span><br><span class="line">252             &#125;</span><br><span class="line">253             if (k &gt; keynow)</span><br><span class="line">254             &#123;</span><br><span class="line">255                 if (index == q-&gt;keynum)</span><br><span class="line">256                 &#123;</span><br><span class="line">257                     if (q-&gt;ptr[index] == NULL)</span><br><span class="line">258                     &#123;</span><br><span class="line">259                         p = q;</span><br><span class="line">260                         ans = q-&gt;keynum + 1;</span><br><span class="line">261                         return FALSE;</span><br><span class="line">262                     &#125;</span><br><span class="line">263                     q = q-&gt;ptr[index];</span><br><span class="line">264                     break;</span><br><span class="line">265                 &#125;</span><br><span class="line">266                 ++index;</span><br><span class="line">267                 keynow = q-&gt;key[index];</span><br><span class="line">268                 continue;</span><br><span class="line">269             &#125;</span><br><span class="line">270             if (k &lt; keynow)</span><br><span class="line">271             &#123;</span><br><span class="line">272                 if (q-&gt;ptr[index - 1] == NULL)</span><br><span class="line">273                 &#123;</span><br><span class="line">274                     p = q;</span><br><span class="line">275                     ans = index;</span><br><span class="line">276                     return FALSE;</span><br><span class="line">277                 &#125;</span><br><span class="line">278                 q = q-&gt;ptr[index - 1];</span><br><span class="line">279                 break;</span><br><span class="line">280             &#125;</span><br><span class="line">281         &#125;</span><br><span class="line">282     &#125;</span><br><span class="line">283 </span><br><span class="line">284     return ERROR;</span><br><span class="line">285 &#125;</span><br><span class="line">286 /***</span><br><span class="line">287 *  @name           Status renewParent(BTree p)</span><br><span class="line">288 *  @description    告诉孩子们亲身爸爸是谁</span><br><span class="line">289 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">290 *  @notice</span><br><span class="line">291 ***/</span><br><span class="line">292 Status renewParent(BTree p)</span><br><span class="line">293 &#123;</span><br><span class="line">294     int index;</span><br><span class="line">295     if (p == NULL) return ERROR;</span><br><span class="line">296     for (index = 0;index &lt;= p-&gt;keynum;++index)</span><br><span class="line">297     &#123;</span><br><span class="line">298         if (p-&gt;ptr[index] != NULL)</span><br><span class="line">299         &#123;</span><br><span class="line">300             p-&gt;ptr[index]-&gt;parent = p;</span><br><span class="line">301             renewParent(p-&gt;ptr[index]);</span><br><span class="line">302         &#125;</span><br><span class="line">303     &#125;</span><br><span class="line">304     return OK;</span><br><span class="line">305 &#125;</span><br><span class="line">306 /***</span><br><span class="line">307 *  @name           int whichSon(BTree T)</span><br><span class="line">308 *  @description    找出是父亲的第几个孩子</span><br><span class="line">309 *  @return         成功返回第几个孩子,否则返回-1</span><br><span class="line">310 *  @notice</span><br><span class="line">311 ***/</span><br><span class="line">312 int whichSon(BTree T)</span><br><span class="line">313 &#123;</span><br><span class="line">314     int index = -1;</span><br><span class="line">315     if (T == NULL) return -1;</span><br><span class="line">316     for (index = 0;index &lt;= T-&gt;parent-&gt;keynum;++index) //找出是父亲的第几个孩子</span><br><span class="line">317     &#123;</span><br><span class="line">318         if (T-&gt;parent-&gt;ptr[index] == T) return index;</span><br><span class="line">319     &#125;</span><br><span class="line">320     return -1;</span><br><span class="line">321 &#125;</span><br><span class="line">322 /***</span><br><span class="line">323 *  @name           status splitBTree(BTree T)</span><br><span class="line">324 *  @description    递归实现分裂节点操作</span><br><span class="line">325 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">326 *  @notice</span><br><span class="line">327 ***/</span><br><span class="line">328 Status splitBTree(BTree T) //此时分裂的节点一定会是超出最大值的。</span><br><span class="line">329 &#123;</span><br><span class="line">330     BTree t1, t2;</span><br><span class="line">331     int index, index_1;</span><br><span class="line">332     if (T-&gt;parent == NULL)</span><br><span class="line">333     &#123;</span><br><span class="line">334         t1 = (BTree)malloc(BTLEN);</span><br><span class="line">335         if (NULL == t1) return OVERFLOW;</span><br><span class="line">336         t2 = (BTree)malloc(BTLEN);</span><br><span class="line">337         if (NULL == t2) return OVERFLOW;</span><br><span class="line">338 </span><br><span class="line">339         t1-&gt;keynum = m / 2;</span><br><span class="line">340         t2-&gt;keynum = m - (m / 2) - 1;</span><br><span class="line">341         t1-&gt;parent = T;</span><br><span class="line">342         t2-&gt;parent = T;</span><br><span class="line">343         for (index = 0;index &lt;= m; ++index)  //先全部初始化</span><br><span class="line">344         &#123;</span><br><span class="line">345             t1-&gt;ptr[index] = NULL;</span><br><span class="line">346             t1-&gt;key[index] = 0;</span><br><span class="line">347             t2-&gt;ptr[index] = NULL;</span><br><span class="line">348             t2-&gt;key[index] = 0;</span><br><span class="line">349         &#125;</span><br><span class="line">350         for (index = 0;index &lt;= m / 2; ++index)  //初始化t1</span><br><span class="line">351         &#123;</span><br><span class="line">352             t1-&gt;ptr[index] = T-&gt;ptr[index];</span><br><span class="line">353             t1-&gt;key[index] = T-&gt;key[index];</span><br><span class="line">354         &#125;</span><br><span class="line">355         t2-&gt;ptr[0] = T-&gt;ptr[(m / 2) + 1];</span><br><span class="line">356         for (index = (m / 2) + 2;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">357         &#123;</span><br><span class="line">358             t2-&gt;ptr[index - ((m / 2) + 1)] = T-&gt;ptr[index];</span><br><span class="line">359             t2-&gt;key[index - ((m / 2) + 1)] = T-&gt;key[index];</span><br><span class="line">360         &#125;</span><br><span class="line">361         T-&gt;keynum = 1;</span><br><span class="line">362         T-&gt;ptr[0] = t1;</span><br><span class="line">363         T-&gt;ptr[1] = t2;</span><br><span class="line">364         T-&gt;key[1] = T-&gt;key[m / 2 + 1];</span><br><span class="line">365         for (index = 2;index &lt;= m; ++index)  //初始化T</span><br><span class="line">366         &#123;</span><br><span class="line">367             T-&gt;ptr[index] = NULL;</span><br><span class="line">368             T-&gt;key[index] = 0;</span><br><span class="line">369         &#125;</span><br><span class="line">370         return OK;</span><br><span class="line">371     &#125;</span><br><span class="line">372 </span><br><span class="line">373     index = whichSon(T);</span><br><span class="line">374     for (index_1 = T-&gt;parent-&gt;keynum;index_1 &gt; index;--index_1) //腾出父亲的位置</span><br><span class="line">375     &#123;</span><br><span class="line">376         T-&gt;parent-&gt;ptr[index_1 + 1] = T-&gt;parent-&gt;ptr[index_1];</span><br><span class="line">377         T-&gt;parent-&gt;key[index_1 + 1] = T-&gt;parent-&gt;key[index_1];</span><br><span class="line">378     &#125;</span><br><span class="line">379     T-&gt;parent-&gt;keynum++;</span><br><span class="line">380     T-&gt;parent-&gt;key[index + 1] = T-&gt;key[m / 2 + 1];</span><br><span class="line">381     t2 = T-&gt;parent-&gt;ptr[index + 1] = (BTree)malloc(BTLEN);</span><br><span class="line">382     if (NULL == t2) return OVERFLOW;</span><br><span class="line">383     for (index = 0;index &lt;= m; ++index)  //先全部初始化</span><br><span class="line">384     &#123;</span><br><span class="line">385         t2-&gt;ptr[index] = NULL;</span><br><span class="line">386         t2-&gt;key[index] = 0;</span><br><span class="line">387     &#125;</span><br><span class="line">388     t2-&gt;keynum = m - (m / 2) - 1;</span><br><span class="line">389     t2-&gt;parent = T-&gt;parent;</span><br><span class="line">390     t2-&gt;ptr[0] = T-&gt;ptr[(m / 2) + 1];</span><br><span class="line">391     for (index = (m / 2) + 2;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">392     &#123;</span><br><span class="line">393         t2-&gt;ptr[index - ((m / 2) + 1)] = T-&gt;ptr[index];</span><br><span class="line">394         t2-&gt;key[index - ((m / 2) + 1)] = T-&gt;key[index];</span><br><span class="line">395     &#125;</span><br><span class="line">396     T-&gt;keynum = m / 2;</span><br><span class="line">397     for (index = (m / 2) + 1;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">398     &#123;</span><br><span class="line">399         T-&gt;ptr[index] = NULL;</span><br><span class="line">400         T-&gt;key[index] = 0;</span><br><span class="line">401     &#125;</span><br><span class="line">402     if (T-&gt;parent-&gt;keynum == m)</span><br><span class="line">403     &#123;</span><br><span class="line">404         splitBTree(T-&gt;parent);</span><br><span class="line">405     &#125;</span><br><span class="line">406     return OK;</span><br><span class="line">407 &#125;</span><br><span class="line">408 /***</span><br><span class="line">409 *  @name           Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">410 *  @description    插入实现元素的插入</span><br><span class="line">411 *  @return         成功返回OK,如果存在则返回FALSE，否则返回ERROR</span><br><span class="line">412 *  @notice</span><br><span class="line">413 ***/</span><br><span class="line">414 Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">415 &#123;</span><br><span class="line">416     BTree p;</span><br><span class="line">417     int index, temp;</span><br><span class="line">418     Status find_flag;</span><br><span class="line">419     if (NULL == T)</span><br><span class="line">420     &#123;</span><br><span class="line">421         T = (BTree)malloc(BTLEN);</span><br><span class="line">422         if (NULL == T) return OVERFLOW;</span><br><span class="line">423         T-&gt;keynum = 1;</span><br><span class="line">424         T-&gt;parent = NULL;</span><br><span class="line">425         for (index = 0;index &lt;= m; ++index)</span><br><span class="line">426         &#123;</span><br><span class="line">427             T-&gt;ptr[index] = NULL;</span><br><span class="line">428             T-&gt;key[index] = 0;</span><br><span class="line">429         &#125;</span><br><span class="line">430         T-&gt;key[1] = e.key;</span><br><span class="line">431         return OK;</span><br><span class="line">432     &#125;</span><br><span class="line">433     find_flag = findBTree(T, p, temp, e.key);</span><br><span class="line">434     if (find_flag == TRUE)</span><br><span class="line">435     &#123;</span><br><span class="line">436         return FALSE;</span><br><span class="line">437     &#125;</span><br><span class="line">438     if (find_flag == FALSE)</span><br><span class="line">439     &#123;                                //不管怎样先直接插入</span><br><span class="line">440         p-&gt;keynum++;</span><br><span class="line">441         for (index = p-&gt;keynum;index &gt; temp;--index) //挪位置</span><br><span class="line">442         &#123;</span><br><span class="line">443             p-&gt;key[index] = p-&gt;key[index - 1];</span><br><span class="line">444             p-&gt;ptr[index] = p-&gt;ptr[index - 1];</span><br><span class="line">445         &#125;</span><br><span class="line">446         p-&gt;ptr[temp] = NULL;</span><br><span class="line">447         p-&gt;key[temp] = e.key;</span><br><span class="line">448         if (p-&gt;keynum == m)      //这种情况得分裂</span><br><span class="line">449         &#123;</span><br><span class="line">450             splitBTree(p);</span><br><span class="line">451         &#125;</span><br><span class="line">452         renewParent(T);</span><br><span class="line">453         return OK;</span><br><span class="line">454     &#125;</span><br><span class="line">455     return ERROR;</span><br><span class="line">456 &#125;</span><br><span class="line">457 /***</span><br><span class="line">458 *  @name           Status borrowBNode(BTree &amp;T)</span><br><span class="line">459 *  @description    递归实现，向兄弟借元素，否则和兄弟合并</span><br><span class="line">460 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">461 *  @notice         这种情况应该是T为单元素结点</span><br><span class="line">462 ***/</span><br><span class="line">463 Status borrowBNode(BTree T)</span><br><span class="line">464 &#123;</span><br><span class="line">465     int mynum, bronum, index;</span><br><span class="line">466     BTree b = NULL, f = NULL;</span><br><span class="line">467     if (T == NULL) return ERROR;</span><br><span class="line">468     f = T-&gt;parent;</span><br><span class="line">469     if (f == NULL)//考虑父亲结点不存在的情况</span><br><span class="line">470     &#123;</span><br><span class="line">471         if (T-&gt;keynum == 0)</span><br><span class="line">472         &#123;</span><br><span class="line">473             f = T-&gt;ptr[0];</span><br><span class="line">474             if (f == NULL)</span><br><span class="line">475             &#123;</span><br><span class="line">476                 free(T);</span><br><span class="line">477                 return EMPTY;</span><br><span class="line">478             &#125;</span><br><span class="line">479             for (index = 0;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">480             &#123;</span><br><span class="line">481                 T-&gt;key[index] = f-&gt;key[index];</span><br><span class="line">482                 T-&gt;ptr[index] = f-&gt;ptr[index];</span><br><span class="line">483             &#125;</span><br><span class="line">484             T-&gt;keynum = f-&gt;keynum;</span><br><span class="line">485             free(f);</span><br><span class="line">486             renewParent(T);</span><br><span class="line">487         &#125;</span><br><span class="line">488         return OK;</span><br><span class="line">489     &#125;</span><br><span class="line">490     mynum = whichSon(T);</span><br><span class="line">491     if (mynum == 0)</span><br><span class="line">492         bronum = 1;</span><br><span class="line">493     else</span><br><span class="line">494         bronum = mynum - 1;</span><br><span class="line">495     b = f-&gt;ptr[bronum];</span><br><span class="line">496     if (b-&gt;keynum == (m + 1) / 2 - 1) //如果兄弟帮不了你了</span><br><span class="line">497     &#123;</span><br><span class="line">498         //那么就和这个兄弟合体</span><br><span class="line">499         if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">500         &#123;</span><br><span class="line">501             b-&gt;keynum++;</span><br><span class="line">502             b-&gt;key[b-&gt;keynum] = f-&gt;key[mynum];</span><br><span class="line">503             b-&gt;ptr[b-&gt;keynum] = T-&gt;ptr[0];</span><br><span class="line">504             for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">505             &#123;</span><br><span class="line">506                 b-&gt;key[index + b-&gt;keynum] = T-&gt;key[index];</span><br><span class="line">507                 b-&gt;ptr[index + b-&gt;keynum] = T-&gt;ptr[index];</span><br><span class="line">508                 b-&gt;keynum++;</span><br><span class="line">509             &#125;</span><br><span class="line">510             free(T);</span><br><span class="line">511             for (index = mynum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">512             &#123;</span><br><span class="line">513                 f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">514                 f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">515             &#125;</span><br><span class="line">516             f-&gt;keynum--;</span><br><span class="line">517         &#125;</span><br><span class="line">518         else</span><br><span class="line">519         &#123;</span><br><span class="line">520             T-&gt;keynum++;</span><br><span class="line">521             T-&gt;key[T-&gt;keynum] = f-&gt;key[bronum];</span><br><span class="line">522             T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">523             for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">524             &#123;</span><br><span class="line">525                 T-&gt;key[index + T-&gt;keynum] = b-&gt;key[index];</span><br><span class="line">526                 T-&gt;ptr[index + T-&gt;keynum] = b-&gt;ptr[index];</span><br><span class="line">527                 T-&gt;keynum++;</span><br><span class="line">528             &#125;</span><br><span class="line">529             free(b);</span><br><span class="line">530             for (index = bronum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">531             &#123;</span><br><span class="line">532                 f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">533                 f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">534             &#125;</span><br><span class="line">535             f-&gt;keynum--;</span><br><span class="line">536         &#125;</span><br><span class="line">537         renewParent(f);</span><br><span class="line">538         if (f-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">539         &#123;</span><br><span class="line">540             //调用借兄弟的函数</span><br><span class="line">541             return borrowBNode(f);</span><br><span class="line">542         &#125;</span><br><span class="line">543     &#125;</span><br><span class="line">544     else//如果兄弟能够帮你</span><br><span class="line">545     &#123;</span><br><span class="line">546         if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">547         &#123;</span><br><span class="line">548             for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">549             &#123;</span><br><span class="line">550                 T-&gt;key[index + 1] = T-&gt;key[index];</span><br><span class="line">551                 T-&gt;ptr[index + 1] = T-&gt;ptr[index];</span><br><span class="line">552             &#125;</span><br><span class="line">553             T-&gt;ptr[1] = T-&gt;ptr[0];</span><br><span class="line">554             T-&gt;key[1] = f-&gt;key[mynum];</span><br><span class="line">555             T-&gt;ptr[0] = b-&gt;ptr[b-&gt;keynum];</span><br><span class="line">556             T-&gt;keynum++;</span><br><span class="line">557             f-&gt;key[mynum] = b-&gt;key[b-&gt;keynum];</span><br><span class="line">558             b-&gt;key[b-&gt;keynum] = 0;</span><br><span class="line">559             b-&gt;ptr[b-&gt;keynum] = NULL;</span><br><span class="line">560             b-&gt;keynum--;</span><br><span class="line">561 </span><br><span class="line">562         &#125;</span><br><span class="line">563         else                                    //如果我是第一个</span><br><span class="line">564         &#123;</span><br><span class="line">565             T-&gt;keynum++;</span><br><span class="line">566             T-&gt;key[T-&gt;keynum] = f-&gt;key[1];</span><br><span class="line">567             T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">568             f-&gt;key[1] = b-&gt;key[1];</span><br><span class="line">569             b-&gt;ptr[0] = b-&gt;ptr[1];</span><br><span class="line">570             for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">571             &#123;</span><br><span class="line">572                 b-&gt;key[index] = b-&gt;key[index + 1];</span><br><span class="line">573                 b-&gt;ptr[index] = b-&gt;ptr[index + 1];</span><br><span class="line">574             &#125;</span><br><span class="line">575             b-&gt;keynum--;</span><br><span class="line">576         &#125;</span><br><span class="line">577     &#125;</span><br><span class="line">578     return OK;</span><br><span class="line">579 &#125;</span><br><span class="line">580 </span><br><span class="line">581 /***</span><br><span class="line">582 *  @name           Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">583 *  @description    实现B树元素的删除</span><br><span class="line">584 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">585 *  @notice</span><br><span class="line">586 ***/</span><br><span class="line">587 Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">588 &#123;</span><br><span class="line">589     BTree p, q;</span><br><span class="line">590     int num, temp, index;</span><br><span class="line">591     Status find_flag;</span><br><span class="line">592     if (T == NULL)</span><br><span class="line">593         return ERROR;</span><br><span class="line">594     find_flag = findBTree(T, p, temp, e.key);</span><br><span class="line">595     if (find_flag == FALSE)</span><br><span class="line">596     &#123;</span><br><span class="line">597         return FALSE;</span><br><span class="line">598     &#125;</span><br><span class="line">599     if (find_flag == TRUE)</span><br><span class="line">600     &#123;</span><br><span class="line">601         //deleteBTreeBNode(p,temp);</span><br><span class="line">602         if (p-&gt;ptr[temp] == NULL)                //如果是叶子节点的话</span><br><span class="line">603         &#123;</span><br><span class="line">604             for (index = temp;index &lt;= p-&gt;keynum;++index)</span><br><span class="line">605             &#123;</span><br><span class="line">606                 p-&gt;key[index] = p-&gt;key[index + 1];</span><br><span class="line">607                 p-&gt;ptr[index] = p-&gt;ptr[index + 1];</span><br><span class="line">608             &#125;</span><br><span class="line">609             p-&gt;keynum--;</span><br><span class="line">610             if (p-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">611             &#123;</span><br><span class="line">612                 //调用借兄弟的函数</span><br><span class="line">613                 if (borrowBNode(p) == EMPTY) T = NULL;</span><br><span class="line">614                 else renewParent(T);</span><br><span class="line">615             &#125;</span><br><span class="line">616             return OK;</span><br><span class="line">617         &#125;</span><br><span class="line">618         else                                    //不是叶子结点的话</span><br><span class="line">619         &#123;</span><br><span class="line">620             //遍历</span><br><span class="line">621             findMax(p-&gt;ptr[temp - 1], q, num);//返回的q一定会是叶子节点</span><br><span class="line">622             p-&gt;key[temp] = q-&gt;key[num];</span><br><span class="line">623             q-&gt;key[num] = 0;</span><br><span class="line">624             q-&gt;keynum--;</span><br><span class="line">625             if (q-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">626             &#123;</span><br><span class="line">627                 //调用借兄弟的函数</span><br><span class="line">628                 if (borrowBNode(q) == EMPTY) T = NULL;</span><br><span class="line">629                 else renewParent(T);</span><br><span class="line">630             &#125;</span><br><span class="line">631             return OK;</span><br><span class="line">632         &#125;</span><br><span class="line">633         return OK;</span><br><span class="line">634     &#125;</span><br><span class="line">635     return ERROR;</span><br><span class="line">636 &#125;</span><br><span class="line">637 /***</span><br><span class="line">638 *  @name           Status initBTree(BTree &amp;t)</span><br><span class="line">639 *  @description    初始化一个空B树</span><br><span class="line">640 *  @return         成功返回OK</span><br><span class="line">641 *  @notice</span><br><span class="line">642 ***/</span><br><span class="line">643 Status initBTree(BTree &amp;t)</span><br><span class="line">644 &#123;</span><br><span class="line">645     t = NULL;</span><br><span class="line">646     return OK;</span><br><span class="line">647 &#125;</span><br><span class="line">648 /***</span><br><span class="line">649 *  @name           Status test()</span><br><span class="line">650 *  @description    针对数据结构实验做的测试函数</span><br><span class="line">651 *  @return         成功返回OK</span><br><span class="line">652 *  @notice</span><br><span class="line">653 ***/</span><br><span class="line">654 Status test()</span><br><span class="line">655 &#123;</span><br><span class="line">656     // 测试代码</span><br><span class="line">657     int n, i;</span><br><span class="line">658     int arr[BTREELENGTH];</span><br><span class="line">659     BTree a;</span><br><span class="line">660     Record  d;</span><br><span class="line">661     srand((unsigned)time(NULL));</span><br><span class="line">662     n = rand() % BTREELENGTH;</span><br><span class="line">663     //scanf(&quot;%d&quot;, &amp;n);                    //可以改为自己输入数据</span><br><span class="line">664     printf(&quot;B树的阶为:%d,插入次数为:%d\n&quot;, m, n);</span><br><span class="line">665     initBTree(a);</span><br><span class="line">666     for (i = 0;i &lt; n;i++)</span><br><span class="line">667     &#123;</span><br><span class="line">668         d.key = rand() % MAXINT;</span><br><span class="line">669         //scanf(&quot;%d&quot;, &amp;d.key);            //可以改为自己输入数据</span><br><span class="line">670         arr[i] = d.key;</span><br><span class="line">671         if (insertBTree(a, d) == OK)</span><br><span class="line">672             printf(&quot;第%d次插入%d:\n&quot;, i + 1, d.key);</span><br><span class="line">673         else</span><br><span class="line">674             printf(&quot;第%d次插入%d不成功:\n&quot;, i + 1, d.key);</span><br><span class="line">675         print(a);</span><br><span class="line">676     &#125;</span><br><span class="line">677     for (i = 0;i &lt; n;i++)</span><br><span class="line">678     &#123;</span><br><span class="line">679         d.key = arr[i];</span><br><span class="line">680         if (deleteBTreeRecord(a, d) == OK)</span><br><span class="line">681             printf(&quot;第%d次删除%d:\n&quot;, i + 1, d.key);</span><br><span class="line">682         else</span><br><span class="line">683             printf(&quot;第%d次删除%d不成功:\n&quot;, i + 1, d.key);</span><br><span class="line">684         print(a);</span><br><span class="line">685     &#125;</span><br><span class="line">686     return OK;</span><br><span class="line">687 </span><br><span class="line">688 &#125;</span><br><span class="line">689 /***</span><br><span class="line">690 主函数</span><br><span class="line">691 ***/</span><br><span class="line">692 int  main()</span><br><span class="line">693 &#123;</span><br><span class="line">694     test();</span><br><span class="line">695     return 0;</span><br><span class="line">696 &#125;</span><br></pre></td></tr></table></figure><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><img src="/2020/09/13/B树与B-树/1.png"><img src="/2020/09/13/B树与B-树/2.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;B树性质&quot;&gt;&lt;a href=&quot;#B树性质&quot; class=&quot;headerlink&quot; title=&quot;B树性质&quot;&gt;&lt;/a&gt;B树性质&lt;/h2&gt;&lt;p&gt;一颗M阶B树T，满足以下条件  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个结点至多拥有M课子树  &lt;/li&gt;
&lt;li&gt;根结点至少拥有两
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="排序" scheme="http://twh233.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>查找与排序-KMP算法栈队列</title>
    <link href="http://twh233.github.io/2020/09/12/%E6%9F%A5%E6%89%BE%E4%B8%8E%E6%8E%92%E5%BA%8F-KMP%E7%AE%97%E6%B3%95%E6%A0%88%E9%98%9F%E5%88%97/"/>
    <id>http://twh233.github.io/2020/09/12/查找与排序-KMP算法栈队列/</id>
    <published>2020-09-12T09:20:57.000Z</published>
    <updated>2020-09-13T06:34:22.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><p>稳定性：不稳定</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><p>例子：拿扑克牌排序</p><p>Input: {4, 3, 8, 5, 2, 6, 1, 7}。</p><p>首先拿起第一张牌, 手上有 {4}。</p><p>拿起第二张牌 3, 把 3insert 到手上的牌 {4}, 得到 {3 ，4}。</p><p>拿起第三张牌 8, 把 8 insert 到手上的牌 {3，4 }, 得到 {3 ，4，8}。</p><p>以此类推。</p><p>稳定性：稳定</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>分治做法，先分组，把自己组内的先排好序，再合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void shell_sort(int *data, int length) &#123;</span><br><span class="line">    int gap = 0;</span><br><span class="line">    int i = 0, j = 0;</span><br><span class="line"></span><br><span class="line">    for (gap = length / 2; gap &gt;= 1; gap /= 2) &#123; // 第一层是分组</span><br><span class="line">        for (i = gap; i &lt; length; i++) &#123; // 第二层是先保证前面有序，再遍历后面</span><br><span class="line">            int temp = data[i];</span><br><span class="line">            for (j = i - gap; j &gt;= 0 &amp;&amp; temp &lt; data[j]; j -= gap) &#123; //把大的挪到后面</span><br><span class="line">                data[j + gap] = data[j];</span><br><span class="line">            &#125;</span><br><span class="line">            data[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平均O(1.3n)</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>分治，把一个集合分成两部分，第一部分再分成两部分，第二部分再分成两部分，直到分到最后一层是两块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void sort(int *data, int *temp, int start, int mid, int end) &#123;</span><br><span class="line">    int i = start, j = mid + 1, k = start;</span><br><span class="line">    while (i &lt;= mid &amp;&amp; j &lt;= end) &#123;</span><br><span class="line">        if (data[i] &lt; data[j]) &#123;</span><br><span class="line">            temp[k++] = data[i++];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            temp[k++] = data[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while (i &lt;= mid) &#123;</span><br><span class="line">        temp[k++] = data[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    while (j &lt;= end) &#123;</span><br><span class="line">        temp[k++] = data[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    for (i = start; i &lt;= end; i++) &#123;</span><br><span class="line">        data[i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void merge_sort(int *data, int *temp, int start, int end) &#123;</span><br><span class="line">    if (start &lt; end) &#123;</span><br><span class="line">        int mid = start + (end - start) / 2;</span><br><span class="line">        merge_sort(data, temp, start, mid);</span><br><span class="line">        merge_sort(data, temp, mid + 1, end);</span><br><span class="line">        sort(data, temp, start, mid, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最差和最好都是 O(nlogn) 稳定</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>第一个值作为哨兵位，从最左端到最右端，如果满足条件，右端–，左端++，直到左端等于右端，那么就确定了哨兵位的位置，赋值即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">void sort(int *data, int left, int right) &#123;</span><br><span class="line"></span><br><span class="line">if (left &gt;= right) return ;</span><br><span class="line"></span><br><span class="line">int i = left;</span><br><span class="line">int j = right;</span><br><span class="line">int key = data[left];</span><br><span class="line"></span><br><span class="line">while (i &lt; j) &#123;</span><br><span class="line"></span><br><span class="line">while (i &lt; j &amp;&amp; key &lt;= data[j]) &#123;</span><br><span class="line">j --;</span><br><span class="line">&#125;</span><br><span class="line">data[i] = data[j];</span><br><span class="line"></span><br><span class="line">while (i &lt; j &amp;&amp; key &gt;= data[i]) &#123;</span><br><span class="line">i ++;</span><br><span class="line">&#125;</span><br><span class="line">data[j] = data[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[i] = key;</span><br><span class="line"></span><br><span class="line">sort(data, left, i - 1);</span><br><span class="line">sort(data, i + 1, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int quick_sort(int *data, int length) &#123;</span><br><span class="line"></span><br><span class="line">sort(data, 0, length-1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>text = “abababababacsdkfasdf”<br>ptn = “abab” 回溯多少。<br>取决于共同前缀与后缀，有多少。<br>abc -&gt; a/ab(前缀) c/bc（后缀）0<br>aba -&gt; a/ab a/ba 1<br>abcabc -&gt; a/ab/abc/abca/abcab<br>          c/bc/abc/cabc/bcabc  3  </p><pre><code>void make_next(const char *pattern, int *next) {    int q, k;    int m = strlen(pattern);    next[0] = 0;    for (q = 1,k = 0;q &lt; m; q ++) {        while (k &gt; 0 &amp;&amp; pattern[q] != pattern[k])            k = next[k-1];        if (pattern[q] == pattern[k]) {            k ++;        }        next[q] = k;    }    // next[0] = 0;    // q=1, k=0, pattern[q]:pattern[k] = b:a, next[1] = 0;    // q=2, k=0, pattern[q]:pattern[k] = c:a, next[2] = 0;    // q=3, k=0, pattern[q]:pattern[k] = a:a, k++, next[3] = 1;    // q=4, k=1, pattern[q]:pattern[k] = b:b, k++, next[4] = 2;    // q=5, k=2, pattern[q]:pattern[k] = c:c, k++, next[5] = 3;    // q=6, k=3, pattern[q]:pattern[k] = d:a, k=next[k-1] -&gt; k=0; next[6] = 0;}int kmp(const char *text, const char *pattern, int *next) {    int n = strlen(text);    int m = strlen(pattern);    make_next(pattern, next);    int i, q;    for (i = 0, q = 0;i &lt; n;i ++) {        while (q &gt; 0 &amp;&amp; pattern[q] != text[i]) {            q = next[q-1];        }        if (pattern[q] == text[i]) {            q ++;        }        if (q == m) {            //printf(&quot;Pattern occurs with shift: %d\n&quot;, (i-m+1));            break;        }    }    return i-q+1;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;h2 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="排序" scheme="http://twh233.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>实习笔记6</title>
    <link href="http://twh233.github.io/2019/07/15/%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AE%B06/"/>
    <id>http://twh233.github.io/2019/07/15/实习笔记6/</id>
    <published>2019-07-15T12:07:37.000Z</published>
    <updated>2019-07-16T11:30:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-连接服务器"><a href="#1-连接服务器" class="headerlink" title="1. 连接服务器"></a>1. 连接服务器</h2><p>证书连接服务器<br><img src="/2019/07/15/实习笔记6/1.jpg"></p><img src="/2019/07/15/实习笔记6/2.jpg"><h2 id="2-gojsonq-一个用来查询JSON数据的简单Go包"><a href="#2-gojsonq-一个用来查询JSON数据的简单Go包" class="headerlink" title="2. gojsonq 一个用来查询JSON数据的简单Go包"></a>2. gojsonq 一个用来查询JSON数据的简单Go包</h2><p><a href="https://php.ctolib.com/thedevsaddam-gojsonq.html" target="_blank" rel="noopener">https://php.ctolib.com/thedevsaddam-gojsonq.html</a></p><img src="/2019/07/15/实习笔记6/gojson.png"><h2 id="3-golang-调用lua-插件"><a href="#3-golang-调用lua-插件" class="headerlink" title="3. golang 调用lua 插件"></a>3. golang 调用lua 插件</h2><p><a href="https://github.com/yuin/gopher-lua" target="_blank" rel="noopener">https://github.com/yuin/gopher-lua</a></p><h2 id="4-golang-exec"><a href="#4-golang-exec" class="headerlink" title="4. golang exec"></a>4. golang exec</h2><img src="/2019/07/15/实习笔记6/exec.png"><h2 id="5-常见lua-报错"><a href="#5-常见lua-报错" class="headerlink" title="5. 常见lua 报错"></a>5. 常见lua 报错</h2><p><a href="https://blog.csdn.net/yuanfengyun/article/details/78001988" target="_blank" rel="noopener">https://blog.csdn.net/yuanfengyun/article/details/78001988</a></p><h2 id="6-golang-解析-json"><a href="#6-golang-解析-json" class="headerlink" title="6. golang 解析 json"></a>6. golang 解析 json</h2><img src="/2019/07/15/实习笔记6/3.png"> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-连接服务器&quot;&gt;&lt;a href=&quot;#1-连接服务器&quot; class=&quot;headerlink&quot; title=&quot;1. 连接服务器&quot;&gt;&lt;/a&gt;1. 连接服务器&lt;/h2&gt;&lt;p&gt;证书连接服务器&lt;br&gt;&lt;img src=&quot;/2019/07/15/实习笔记6/1.jpg&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="实习" scheme="http://twh233.github.io/categories/%E5%AE%9E%E4%B9%A0/"/>
    
    
      <category term="实习" scheme="http://twh233.github.io/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>idea-maven工程配置</title>
    <link href="http://twh233.github.io/2018/08/04/idea-maven%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
    <id>http://twh233.github.io/2018/08/04/idea-maven工程配置/</id>
    <published>2018-08-04T08:55:37.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决idea创建maven工程后无java-resouces文件问题"><a href="#解决idea创建maven工程后无java-resouces文件问题" class="headerlink" title="解决idea创建maven工程后无java,resouces文件问题"></a>解决idea创建maven工程后无java,resouces文件问题</h1><img src="/2018/08/04/idea-maven工程配置/1.png"><ul><li>Project Structure</li></ul><img src="/2018/08/04/idea-maven工程配置/2.png"><ul><li>Modules-Sources</li></ul><img src="/2018/08/04/idea-maven工程配置/3.png"><ul><li>New Folder</li></ul><img src="/2018/08/04/idea-maven工程配置/4.png"><img src="/2018/08/04/idea-maven工程配置/5.png"><h1 id="解决创建properties文件问题"><a href="#解决创建properties文件问题" class="headerlink" title="解决创建properties文件问题"></a>解决创建properties文件问题</h1><img src="/2018/08/04/idea-maven工程配置/6.png"><h1 id="解决idea-application-context-not-configured-for-this-file问题"><a href="#解决idea-application-context-not-configured-for-this-file问题" class="headerlink" title="解决idea application context not configured for this file问题"></a>解决idea application context not configured for this file问题</h1><p>spring配置文件中时常会出现这个提示，翻译过来大概意思就是没有配置该文件到项目中</p><p>于是进入到file-Project Structure中查看</p><p>可以很明显的看到下面有个感叹号，大概意思是下面的文件没有匹配</p><p>知道原因就很好解决问题了，只需要加到项目中去就可以了</p><img src="/2018/08/04/idea-maven工程配置/7.png"><h1 id="解决idea无法创建jsp文件问题"><a href="#解决idea无法创建jsp文件问题" class="headerlink" title="解决idea无法创建jsp文件问题"></a>解决idea无法创建jsp文件问题</h1><p>File-&gt;Project Struction -&gt;modules 按加号 新增web,双击web resource directory 修改路径 web resource directory path </p><p>为 当前项目目录/src/webapp -&gt;WEB-INF-&gt;JSP</p><img src="/2018/08/04/idea-maven工程配置/8.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决idea创建maven工程后无java-resouces文件问题&quot;&gt;&lt;a href=&quot;#解决idea创建maven工程后无java-resouces文件问题&quot; class=&quot;headerlink&quot; title=&quot;解决idea创建maven工程后无java,re
      
    
    </summary>
    
      <category term="idea" scheme="http://twh233.github.io/categories/idea/"/>
    
    
      <category term="idea" scheme="http://twh233.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Python 关于excel</title>
    <link href="http://twh233.github.io/2018/06/12/Python-%E5%85%B3%E4%BA%8Eexcel/"/>
    <id>http://twh233.github.io/2018/06/12/Python-关于excel/</id>
    <published>2018-06-11T16:21:10.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="read-excel"><a href="#read-excel" class="headerlink" title="read_excel()"></a>read_excel()</h1><p>加载函数为read_excel(),其具体参数如下。</p><p>read_excel(io, sheetname=0, header=0, skiprows=None, skip_footer=0, index_col=None,names=None, parse_cols=None, parse_dates=False,date_parser=None,na_values=None,thousands=None, convert_float=True, has_index_names=None, converters=None,dtype=None, true_values=None, false_values=None, engine=None, squeeze=False, **kwds)</p><p>常用参数解析：</p><ul><li>io : string, path object ; excel 路径。</li><li>sheetname : string, int, mixed list of strings/ints, or None, default 0 返回多表使用sheetname=[0,1],若sheetname=None是返回全表 注意：int/string 返回的是dataframe，而none和list返回的是dict of dataframe</li><li>header : int, list of ints, default 0 指定列名行，默认0，即取第一行，数据为列名行以下的数据 若数据不含列名，则设定 header = None</li><li>skiprows : list-like,Rows to skip at the beginning，省略指定行数的数据</li><li>skip_footer : int,default 0, 省略从尾部数的int行数据</li><li>index_col : int, list of ints, default None指定列为索引列，也可以使用u”strings”</li><li>names : array-like, default None, 指定列的名字。</li></ul><a id="more"></a><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><pre><code>sheet1:ID  NUM-1   NUM-2   NUM-336901   142 168 66136902   78  521 60236903   144 600 52136904   95  457 46836905   69  596 695sheet2：ID  NUM-1   NUM-2   NUM-336906   190 527 69136907   101 403 470</code></pre><h4 id="1-io"><a href="#1-io" class="headerlink" title="1.io"></a>1.io</h4><pre><code>basestation =&quot;F://pythonBook_PyPDAM/data/test.xls&quot;data = pd.read_excel(basestation)print data</code></pre><p>此时输出：</p><pre><code>  ID  NUM-1  NUM-2  NUM-30  36901 142 168 6611  36902 78    521    6022  36903 144 600 5213  36904 95 457 4684  36905 69 596 695</code></pre><h4 id="2-sheetname"><a href="#2-sheetname" class="headerlink" title="2.sheetname"></a>2.sheetname</h4><p>返回多表使用sheetname=[0,1],若sheetname=None是返回全表 注意：int/string 返回的是dataframe，而none和list返回的是dict of dataframe</p><pre><code>data_1 = pd.read_excel(basestation,sheetname=[0,1])print data_1print type(data_1)</code></pre><p>此时输出：</p><pre><code>OrderedDict([(0,       ID  NUM-1  NUM-2  NUM-30  36901    142    168    6611  36902     78    521    6022  36903    144    600    5213  36904     95    457    4684  36905     69    596    695), (1,       ID  NUM-1  NUM-2  NUM-30  36906    190    527    6911  36907    101    403    470)])</code></pre><h4 id="3-header"><a href="#3-header" class="headerlink" title="3.header"></a>3.header</h4><p>指定列名行，默认0，即取第一行，数据为列名行以下的数据 若数据不含列名，则设定 header = None ，注意这里还有列名的一行。</p><pre><code>data = pd.read_excel(basestation,header=None)print data输出：       0      1      2      30     ID  NUM-1  NUM-2  NUM-31  36901    142    168    6612  36902     78    521    6023  36903    144    600    5214  36904     95    457    4685  36905     69    596    695data = pd.read_excel(basestation,header=[3])print data输出：   36903  144    600    521  0  36904     95    457    4681  36905     69    596    695</code></pre><h4 id="4-skiprows"><a href="#4-skiprows" class="headerlink" title="4.skiprows"></a>4.skiprows</h4><p>省略指定行数的数据</p><pre><code>data = pd.read_excel(basestation,skiprows = [1])print data输出:      ID  NUM-1  NUM-2  NUM-30  36902     78    521    6021  36903    144    600    5212  36904     95    457    4683  36905     69    596    695</code></pre><h4 id="5-skip-footer"><a href="#5-skip-footer" class="headerlink" title="5.skip_footer"></a>5.skip_footer</h4><p>省略从尾部数的int行的数据</p><pre><code>data = pd.read_excel(basestation, skip_footer=3)print data输出：      ID  NUM-1  NUM-2  NUM-30  36901    142    168    6611  36902     78    521    602</code></pre><h4 id="6-index-col"><a href="#6-index-col" class="headerlink" title="6.index_col"></a>6.index_col</h4><p>指定列为索引列，也可以使用u”strings”</p><pre><code>data = pd.read_excel(basestation, index_col=&quot;NUM-3&quot;)print data输出：          ID  NUM-1  NUM-2NUM-3                     661    36901    142    168602    36902     78    521521    36903    144    600468    36904     95    457695    36905     69    596</code></pre><h4 id="7-names"><a href="#7-names" class="headerlink" title="7.names"></a>7.names</h4><p>指定列的名字</p><pre><code>data = pd.read_excel(basestation,names=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;e&quot;])print data       a    b    c    e0  36901  142  168  6611  36902   78  521  6022  36903  144  600  5213  36904   95  457  4684  36905   69  596  695</code></pre><h1 id="to-excel"><a href="#to-excel" class="headerlink" title="to_excel()"></a>to_excel()</h1><p>存储函数为pd.DataFrame.to_excel()</p><p>to_excel(self, excel_writer, sheet_name=’Sheet1’, na_rep=’’, float_format=None,columns=None, header=True, index=True, index_label=None,startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None,<br>inf_rep=’inf’, verbose=True, freeze_panes=None)</p><ul><li>excel_writer : 目标路径 </li><li>sheet_name : 填充excel的第几页 </li><li>na_rep : excel中缺失值的填充 </li><li>float_format : string, default None Format string for floating point numbers </li><li>columns : sequence, optional，Columns to write 选择输出的的列。 </li><li>header : boolean or list of string, default True Write out column names. If a list of string is given it is assumed to be aliases for the column names </li><li>index : boolean, default True，Write row names (index) </li><li>index_label : string or sequence, default None， Column label for index column(s) if desired. If None is given, andheader and index are True, then the index names are used. A sequence should be given if the DataFrame uses MultiIndex. </li><li>startrow :upper left cell row to dump data frame </li><li>startcol :upper left cell column to dump data frame </li><li>engine : string, default None ，write engine to use - you can also set this via the options，io.excel.xlsx.writer, io.excel.xls.writer, andio.excel.xlsm.writer. </li><li>merge_cells : boolean, default True Write MultiIndex and Hierarchical Rows as merged cells. </li><li>encoding: string, default None encoding of the resulting excel file. Only necessary for xlwt,other writers support unicode natively. </li><li>inf_rep : string, default ‘inf’ Representation for infinity (there is no native representation for infinity in Excel) </li><li>freeze_panes : tuple of integer (length 2), default None Specifies the one-based bottommost row and rightmost column that is to be frozen</li></ul><p>数据源：</p><pre><code>ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 加载数据：basestation =&quot;F://python/data/test.xls&quot;basestation_end =&quot;F://python/data/test_end.xls&quot;data = pd.read_excel(basestation)</code></pre><h4 id="1-excel-writer"><a href="#1-excel-writer" class="headerlink" title="1.excel_writer"></a>1.excel_writer</h4><p>输出路径</p><pre><code>data.to_excel(basestation_end)输出：    ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453</code></pre><h4 id="2-sheet-name"><a href="#2-sheet-name" class="headerlink" title="2.sheet_name"></a>2.sheet_name</h4><p>将数据存储在excel的那个sheet页面</p><pre><code>data.to_excel(basestation_end,sheet_name=&quot;sheet2&quot;)</code></pre><h4 id="3-na-rep"><a href="#3-na-rep" class="headerlink" title="3.na_rep"></a>3.na_rep</h4><p>缺失值填充</p><pre><code>data.to_excel(basestation_end,na_rep=&quot;NULL&quot;)输出：    ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 NULL</code></pre><h4 id="4-colums"><a href="#4-colums" class="headerlink" title="4.colums"></a>4.colums</h4><p>选择输出的的列</p><pre><code>data.to_excel(basestation_end,columns=[&quot;ID&quot;])输出    ID0   369011   369022   369033   369044   369055   36906</code></pre><h4 id="5-header"><a href="#5-header" class="headerlink" title="5.header"></a>5.header</h4><p>默认为True,可以用list命名列的名字。header = False 则不输出题头</p><pre><code>data.to_excel(basestation_end,header=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;])输出：    a   b   c   d0   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 data.to_excel(basestation_end,header=False,columns=[&quot;ID&quot;])header = False 则不输出题头输出：0   369011   369022   369033   369044   369055   36906</code></pre><h4 id="6-index"><a href="#6-index" class="headerlink" title="6.index"></a>6.index</h4><p>默认为True，显示index，当index=False 则不显示行索引（名字）</p><p>index_label : string or sequence, default None<br>设置索引列的列名</p><pre><code>data.to_excel(basestation_end,index=False)输出：ID  NUM-1   NUM-2   NUM-336901   142 168 66136902   78  521 60236903   144 600 52136904   95  457 46836905   69  596 69536906   165 453 data.to_excel(basestation_end,index_label=[&quot;f&quot;])输出：f   ID  NUM-1   NUM-2   NUM-30   36901   142 168 6611   36902   78  521 6022   36903   144 600 5213   36904   95  457 4684   36905   69  596 6955   36906   165 453 </code></pre><p>以上为read_excel,to_excel用法，<br>若是想对已经读出的excel文件有所操作，请转移：<br><a href="https://blog.csdn.net/liufang0001/article/details/77856255" title="此处" target="_blank" rel="noopener">https://blog.csdn.net/liufang0001/article/details/77856255</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;read-excel&quot;&gt;&lt;a href=&quot;#read-excel&quot; class=&quot;headerlink&quot; title=&quot;read_excel()&quot;&gt;&lt;/a&gt;read_excel()&lt;/h1&gt;&lt;p&gt;加载函数为read_excel(),其具体参数如下。&lt;/p&gt;
&lt;p&gt;read_excel(io, sheetname=0, header=0, skiprows=None, skip_footer=0, index_col=None,names=None, parse_cols=None, parse_dates=False,date_parser=None,na_values=None,thousands=None, convert_float=True, has_index_names=None, converters=None,dtype=None, true_values=None, false_values=None, engine=None, squeeze=False, **kwds)&lt;/p&gt;
&lt;p&gt;常用参数解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;io : string, path object ; excel 路径。&lt;/li&gt;
&lt;li&gt;sheetname : string, int, mixed list of strings/ints, or None, default 0 返回多表使用sheetname=[0,1],若sheetname=None是返回全表 注意：int/string 返回的是dataframe，而none和list返回的是dict of dataframe&lt;/li&gt;
&lt;li&gt;header : int, list of ints, default 0 指定列名行，默认0，即取第一行，数据为列名行以下的数据 若数据不含列名，则设定 header = None&lt;/li&gt;
&lt;li&gt;skiprows : list-like,Rows to skip at the beginning，省略指定行数的数据&lt;/li&gt;
&lt;li&gt;skip_footer : int,default 0, 省略从尾部数的int行数据&lt;/li&gt;
&lt;li&gt;index_col : int, list of ints, default None指定列为索引列，也可以使用u”strings”&lt;/li&gt;
&lt;li&gt;names : array-like, default None, 指定列的名字。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="python" scheme="http://twh233.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://twh233.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-tkinter-简单使用介绍</title>
    <link href="http://twh233.github.io/2018/05/30/python-tkinter-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>http://twh233.github.io/2018/05/30/python-tkinter-简单使用介绍/</id>
    <published>2018-05-30T02:36:19.000Z</published>
    <updated>2020-09-13T06:34:15.692Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍几个简单的tkinter组件。</p><p>说明每个控件最后要加上pack().否则控件是无法显示的.</p><a id="more"></a><h2 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h2><p>说明</p><p>　　标签</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry(&apos;300x200&apos;)l = Label(root, text=&quot;show&quot;, bg=&quot;green&quot;, font=(&quot;Arial&quot;, 12), width=5, height=2)l.pack(side=LEFT)  #这里的side可以赋值为LEFT  RTGHT TOP  BOTTOMroot.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/1.jpg"></p><h2 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h2><p>说明</p><p>　　在屏幕上创建一块矩形区域,多作为容器来布局窗体</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry(&apos;300x200&apos;)Label(root, text=&apos;校训&apos;, font=(&apos;Arial&apos;, 20)).pack()frm = Frame(root)# leftfrm_L = Frame(frm)Label(frm_L, text=&apos;厚德&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)Label(frm_L, text=&apos;博学&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)frm_L.pack(side=LEFT)# rightfrm_R = Frame(frm)Label(frm_R, text=&apos;敬业&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)Label(frm_R, text=&apos;乐群&apos;, font=(&apos;Arial&apos;, 15)).pack(side=TOP)frm_R.pack(side=RIGHT)frm.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/2.jpg"></p><h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p>说明</p><p>　　创建单行文本框</p><p>用法</p><p>　　创建:lb =Entry(根对象, [属性列表])</p><p>　　绑定变量 var=StringVar()    lb=Entry(根对象, textvariable = var)</p><p>　　获取文本框中的值   var.get()</p><p>　　设置文本框中的值   var.set(item1)</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()var = StringVar()e = Entry(root, textvariable = var)var.set(&quot;hello&quot;)e.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/3.jpg"></p><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p>说明</p><p>　　向该空间内输入文本</p><p>用法</p><p>　　t = Text(根对象)</p><p>　　插入:t.insert(mark, 内容)</p><p>　　删除:t.delete(mark1, mark2)</p><p>　　其中,mark可以是行号,或者特殊标识,例如</p><blockquote><p>INSERT:光标的插入点CURRENT:鼠标的当前位置所对应的字符位置</p><p>END:这个Textbuffer的最后一个字符</p><p>SEL_FIRST:选中文本域的第一个字符，如果没有选中区域则会引发异常</p><p>SEL_LAST：选中文本域的最后一个字符，如果没有选中区域则会引发 异常</p></blockquote><p>举例 </p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry(&apos;300x200&apos;)t = Text(root)t.insert(1.0, &apos;hello\n&apos;)t.insert(END, &apos;hello000000\n&apos;)t.insert(END, &apos;nono&apos;)t.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/4.jpg"></p><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p>说明</p><p>　　创建按钮</p><p>用法</p><p>　　Button(根对象, [属性列表])</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()def printhello():    t.insert(&apos;1.0&apos;, &quot;hello\n&quot;)t = Text()t.pack()Button(root, text=&quot;press&quot;, command = printhello).pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/5.jpg"></p><h2 id="Listbox"><a href="#Listbox" class="headerlink" title="Listbox"></a>Listbox</h2><p>说明</p><p>　　列表控件,可以含有一个或多个文本想,可单选也可多选</p><p>用法</p><p>　　创建:lb = ListBox(根对象, [属性列表])</p><p>　　绑定变量 var=StringVar()    lb=ListBox(根对象, listvariable = var)</p><p>　　得到列表中的所有值   var.get()</p><p>　　设置列表中的所有值   var.set((item1, item2, …..))</p><p>　　添加:lb.insert(item)</p><p>　　删除:lb.delete(item,…)</p><p>　　绑定事件 lb.bind(‘<buttonrelease-1>‘, 函数)</buttonrelease-1></p><p>　　获得所选中的选项 lbl.get(lb.curselection())</p><p>属性</p><p>　　selectmode可以为BROWSE MULTIPL SINGLE</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()def print_item(event):    print(lb.get(lb.curselection()))var = StringVar()lb = Listbox(root,  listvariable = var)list_item = [1, 2, 3, 4]         #控件的内容为1 2 3 4for item in list_item:    lb.insert(END, item)lb.delete(2, 4)                  #此时控件的内容为1 3var.set((&apos;a&apos;, &apos;ab&apos;, &apos;c&apos;, &apos;d&apos;))   #重新设置了，这时控件的内容就编程var的内容了print var.get()lb.bind(&apos;&lt;ButtonRelease-1&gt;&apos;, print_item)lb.pack()root.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/6.jpg"></p><h2 id="Scrollbar"><a href="#Scrollbar" class="headerlink" title="Scrollbar"></a>Scrollbar</h2><p>说明</p><p>　　在屏幕上创建一块矩形区域,多作为容器来布局窗体</p><p>用法</p><p>　　Frame(根对象, [属性列表]), 最长用的用法是和别的控件一起使用.</p><p>举例</p><pre><code>from Tkinter import *root = Tk()root.title(&quot;hello world&quot;)root.geometry()def print_item(event):    print lb.get(lb.curselection())var = StringVar()lb = Listbox(root, height=5, selectmode=BROWSE, listvariable = var)lb.bind(&apos;&lt;ButtonRelease-1&gt;&apos;, print_item)list_item = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]for item in list_item:    lb.insert(END, item)scrl = Scrollbar(root)scrl.pack(side=RIGHT, fill=Y)lb.configure(yscrollcommand = scrl.set)lb.pack(side=LEFT, fill=BOTH)scrl[&apos;command&apos;] = lb.yviewroot.mainloop()</code></pre><p>效果<br>    <img src="/2018/05/30/python-tkinter-简单使用介绍/7.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍几个简单的tkinter组件。&lt;/p&gt;
&lt;p&gt;说明每个控件最后要加上pack().否则控件是无法显示的.&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://twh233.github.io/categories/python/"/>
    
    
      <category term="tkinter" scheme="http://twh233.github.io/tags/tkinter/"/>
    
  </entry>
  
  <entry>
    <title>python tkinter pack布局</title>
    <link href="http://twh233.github.io/2018/05/24/python-tkinter-pack%E5%B8%83%E5%B1%80/"/>
    <id>http://twh233.github.io/2018/05/24/python-tkinter-pack布局/</id>
    <published>2018-05-24T02:36:19.000Z</published>
    <updated>2020-09-13T06:34:09.221Z</updated>
    
    <content type="html"><![CDATA[<p>一、pack参数：</p><p>   &emsp;&emsp;side:按扭停靠在窗口的哪个位置</p><p>　　　　left: 左</p><p>　　　　top: 上</p><p>　　　　right: 右</p><p>　　　　botton: 下</p><p>　　fill:填充</p><p>　　　　x:水平方向填充</p><p>　　　　y:竖直方向填充</p><p>　　　　both:水平和竖直方向填充</p><p>　　　　none:不填充</p><p>　　expand:</p><p>　　　　yes:扩展整个空白区</p><p>　　　　no:不扩展</p><p>　　anchor:</p><p>　　　　N:北  下</p><p>　　　　E:东  右</p><p>　　　　S:南 下</p><p>　　　　W:西 左</p><p>　　　　CENTER:中间</p><p>　　padx:x方向的外边距</p><p>　　pady:y方向的外边距</p><p>　　ipadx:x方向的内边距</p><p>　　ipady：y方向的内边距</p><p>二、代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from Tkinter import *</span><br><span class="line">root = Tk()</span><br><span class="line">Button(root,text=&apos;A&apos;).pack(side=LEFT,expand=YES,fill=Y)</span><br><span class="line">Button(root,text=&apos;B&apos;).pack(side=TOP,expand=YES,fill=BOTH)</span><br><span class="line">Button(root,text=&apos;C&apos;).pack(side=RIGHT,expand=YES,fill=NONE)</span><br><span class="line">Button(root,text=&apos;D&apos;).pack(side=LEFT,expand=NO,fill=Y)</span><br><span class="line">Button(root,text=&apos;E&apos;).pack(side=TOP,expand=YES,fill=BOTH)</span><br><span class="line">Button(root,text=&apos;F&apos;).pack(side=BOTTOM,expand=YES)</span><br><span class="line">Button(root,text=&apos;G&apos;).pack(anchor=SE)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><img src="/2018/05/24/python-tkinter-pack布局/1.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、pack参数：&lt;/p&gt;
&lt;p&gt;   &amp;emsp;&amp;emsp;side:按扭停靠在窗口的哪个位置&lt;/p&gt;
&lt;p&gt;　　　　left: 左&lt;/p&gt;
&lt;p&gt;　　　　top: 上&lt;/p&gt;
&lt;p&gt;　　　　right: 右&lt;/p&gt;
&lt;p&gt;　　　　botton: 下&lt;/p&gt;
&lt;p&gt;　　
      
    
    </summary>
    
      <category term="python" scheme="http://twh233.github.io/categories/python/"/>
    
    
      <category term="tkinter" scheme="http://twh233.github.io/tags/tkinter/"/>
    
  </entry>
  
  <entry>
    <title>12306查票订票</title>
    <link href="http://twh233.github.io/2018/04/16/12306%E6%9F%A5%E7%A5%A8%E8%AE%A2%E7%A5%A8/"/>
    <id>http://twh233.github.io/2018/04/16/12306查票订票/</id>
    <published>2018-04-16T10:45:26.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/lzqwebsoft/article/details/18674635" target="_blank" rel="noopener">https://blog.csdn.net/lzqwebsoft/article/details/18674635</a><br><a href="https://www.lanindex.com/12306%E8%B4%AD%E7%A5%A8%E6%B5%81%E7%A8%8B%E5%85%A8%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">https://www.lanindex.com/12306%E8%B4%AD%E7%A5%A8%E6%B5%81%E7%A8%8B%E5%85%A8%E8%A7%A3%E6%9E%90/</a></p><p>模拟查票订票操作如下：<br>1.首先12306是一个需要登录操作的网站，然而12306的登录验证大家都知道需要验证码。另外12306的验证码很坑~，需要人工选择对应的物品，这个用代码识别网上我也没找到好的教程，于是… 于是只能人工识别啦。。<br>2.登录之后我们需要输入起始地，目的地，时间等信息，然后查询<br>3.此时我们可以查询到车次信息了，根据自己的时间然后订合适时间和合适座位的票<br>4.选择乘坐人<br>5.建立好订单<br>6.付款，订票成功</p><p>显然我们做到第5步已经达到我们用爬虫的目的。<br><a id="more"></a><br>1.登录操作请参考：<a href="http://www.cnblogs.com/fangtaoa/p/8321449.html" target="_blank" rel="noopener">http://www.cnblogs.com/fangtaoa/p/8321449.html</a><br>2.查票操作请参考：<a href="http://www.cnblogs.com/fangtaoa/p/8360460.html" target="_blank" rel="noopener">http://www.cnblogs.com/fangtaoa/p/8360460.html</a><br>3.下面补充订票操作:<br>按照置顶的参考链接里的步骤获取url和data数据，具体可以看代码类buy<br>确实没什么地方需要多说的，有前驱者已经铺好路了，只需按照步骤一步一步理解就可以了<br>下面补充操作方式：<br></p><p>每一步都有相应的步骤名称，如果哪一步出错了只需在代码中寻找具体是哪个函数没对即可。<br>下面给出代码：<br>1.login.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import chardet</span><br><span class="line">import user</span><br><span class="line">import settings</span><br><span class="line">from coordinate import coor</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Login:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.headers = settings.headers</span><br><span class="line">        self.session = settings.session</span><br><span class="line">        self.id = user.id</span><br><span class="line">        self.psw = user.psw</span><br><span class="line"></span><br><span class="line">    def down_captcha(self):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 下载验证码</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">        response = self.session.get(&apos;https://kyfw.12306.cn/passport/captcha/captcha-image?login_site=E&amp;module=login&amp;rand=sjrand&amp;0.7067378301290344&apos;)</span><br><span class="line">        codeImg = response.content</span><br><span class="line">        fp = open(&apos;code.png&apos;, &apos;wb&apos;)</span><br><span class="line">        fp.write(codeImg)</span><br><span class="line">        fp.close()</span><br><span class="line"></span><br><span class="line">    def get_pos(self):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 输入验证码坐标</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">        coordinate = coor()</span><br><span class="line">        return coordinate</span><br><span class="line"></span><br><span class="line">    def captcha_check(self):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 验证码初验证</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        check_flag = False</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;answer&apos;: self.get_pos(),</span><br><span class="line">            &apos;login_site&apos;:&apos;E&apos;,</span><br><span class="line">            &apos;rand&apos;: &apos;sjrand&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/passport/captcha/captcha-check&apos;</span><br><span class="line">        response = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        result = response.json()</span><br><span class="line">        if result[&apos;result_code&apos;] == &apos;4&apos;:</span><br><span class="line">            print(&apos;验证码通过!&apos;)</span><br><span class="line">            check_flag = True</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;验证码验证失败!&apos;)</span><br><span class="line">        return check_flag</span><br><span class="line"></span><br><span class="line">    def login(self, check_flag):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 进行第一步登录</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        if not check_flag:</span><br><span class="line">            print(&apos;login() error: check_flag为False.&apos;)</span><br><span class="line">            return False</span><br><span class="line"></span><br><span class="line">        login_flag=False</span><br><span class="line">        login_data = &#123;</span><br><span class="line">            &apos;username&apos;: self.id,</span><br><span class="line">            &apos;password&apos;: self.psw,</span><br><span class="line">            &apos;appid&apos;: &apos;otn&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        login_url = &apos;https://kyfw.12306.cn/passport/web/login&apos;</span><br><span class="line">        login_response = self.session.post(login_url, data=login_data, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        #设置网页编码</span><br><span class="line">        if chardet.detect(login_response.content).get(&apos;encoding&apos;) != &apos;UTF-8&apos;:</span><br><span class="line">            login_response.encoding = &apos;UTF-8&apos;</span><br><span class="line"></span><br><span class="line">        if login_response.status_code == 200 and &apos;error&apos; not in login_response.url:</span><br><span class="line">            print(&apos;登录成功！&apos;)</span><br><span class="line">            login_flag = True</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;登录失败！&apos;)</span><br><span class="line"></span><br><span class="line">        return login_flag</span><br><span class="line"></span><br><span class="line">    def auth_uamtk(self,login_flag):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 进行登录的验证</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;appid&apos;: &apos;otn&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/passport/web/auth/uamtk&apos;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            result = dict(resp.json())</span><br><span class="line">            print(&apos;auth_uamtk():&apos;, result[&apos;result_message&apos;])</span><br><span class="line">            if result.get(&apos;result_code&apos;) == 0:##</span><br><span class="line">                return result.get(&apos;newapptk&apos;)</span><br><span class="line">            else:</span><br><span class="line">                return None</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;登录验证失败！&apos;)</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">    def uamatuth_client(self, newapptk):</span><br><span class="line"></span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        # 确认是否真正的登录成功</span><br><span class="line">        # :param newapptk:</span><br><span class="line">        # :return:</span><br><span class="line">        # &apos;&apos;&apos;</span><br><span class="line">        if newapptk is None:</span><br><span class="line">            print(&apos;并没有真正的登录成功！&apos;)</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;tk&apos;: newapptk,</span><br><span class="line">        &#125;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/uamauthclient&apos;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            result = dict(resp.json())</span><br><span class="line">            print(&apos;uamatuth_client()&apos;, result.get(&apos;result_message&apos;))</span><br><span class="line">            if result.get(&apos;result_code&apos;) == 0:</span><br><span class="line">                username = result.get(&apos;username&apos;)</span><br><span class="line">                print(&apos;&#123;&#125;初始化登录成功!&apos;.format(username))</span><br><span class="line">                return username</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;uamatuth_client() error! status_code:&#123;&#125;, url:&#123;&#125;&apos;</span><br><span class="line">                  .format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">    def init_my_12306(self, username):</span><br><span class="line"></span><br><span class="line">        if username is None:</span><br><span class="line">            print(&apos;init_my_12306() error: username 为None!&apos;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/index/initMy12306&apos;</span><br><span class="line">        resp = self.session.get(url, headers=self.headers)</span><br><span class="line"></span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            content = etree.HTML(resp.content)</span><br><span class="line">            #先用etree转化</span><br><span class="line">            name = content.xpath(&apos;//*[@id=&quot;login_user&quot;]/span/text()&apos;)</span><br><span class="line">            print(&apos;init_my_12306(): name&apos;, name)</span><br><span class="line">            if name == username:</span><br><span class="line">                print(&apos;init_my_12306():你已经登录成功了!&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;init_my_12306() error! status_code:&#123;&#125;, url:&#123;&#125;&apos;.</span><br><span class="line">                  format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    login = Login()</span><br><span class="line">    login.down_captcha()</span><br><span class="line">    check_flag = login.captcha_check()</span><br><span class="line">    login_flag = login.login(check_flag)</span><br><span class="line">    if login_flag:</span><br><span class="line">        newapptk = login.auth_uamtk(login_flag)</span><br><span class="line">        username = login.uamatuth_client(newapptk)</span><br><span class="line">        login.init_my_12306(username)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;main():login_flag为Flase&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>2.user.py<br>此处根据自己账户和名称写出id 和 psw 即可</p><p>id = ‘1111111’#账户名<br>psw = ‘222222’#密码</p><p>3.settings.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import requests</span><br><span class="line">#随机选择一个有效的UA来请求头信息</span><br><span class="line">User_Agent = [</span><br><span class="line">    &apos;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&apos;,</span><br><span class="line">    &apos;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11&apos;,</span><br><span class="line">    &apos;Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&apos;,</span><br><span class="line">    &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&apos;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line">headers = &#123;&apos;user-agent&apos;: random.choice(User_Agent)&#125;</span><br></pre></td></tr></table></figure><p>4.stations.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line">from login import Login</span><br><span class="line">import os</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">from collections import deque, OrderedDict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Station:</span><br><span class="line">    &quot;&quot;&quot; 查询车票信息 &quot;&quot;&quot;</span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 使用登录时候的session,这样好一些!</span><br><span class="line">        self.headers = Login().headers</span><br><span class="line">        self.session = Login().session</span><br><span class="line">        self.station_info = deque()</span><br><span class="line"></span><br><span class="line">    def station_name_code(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:获取每个站点的名字和对应的代码,并保存到本地</span><br><span class="line">        :return: 无</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        filename = &apos;station_name.txt&apos;</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/resources/js/framework/station_name.js&apos;</span><br><span class="line">        resp = self.session.get(url, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            print(&apos;station_name_code():获取站点信息成功!&apos;)</span><br><span class="line">            with open(filename, &apos;w&apos;) as f:</span><br><span class="line">                for each in resp.text.split(&apos;=&apos;)[1].split(&apos;@&apos;):</span><br><span class="line">                    if each != &quot;&apos;&quot;:</span><br><span class="line">                        f.write(each)</span><br><span class="line">                        f.write(&apos;\n&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;station_name_code() error! status_code:&#123;&#125;, url: &#123;&#125;&apos;</span><br><span class="line">                  .format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">    def save_station_code(self, filename):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:从站点文件中提取站点与其对应的代码,并保存到文件中</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        if not os.path.exists(filename):</span><br><span class="line">            print(&apos;save_station_code():&apos;, filename, &apos;不存在,正在下载!&apos;)</span><br><span class="line">            self.station_name_code()</span><br><span class="line"></span><br><span class="line">        file = &apos;name_code.json&apos;</span><br><span class="line">        name_code_dict = &#123;&#125;</span><br><span class="line">        with open(filename, &apos;r&apos;) as f:</span><br><span class="line">            for line in f:</span><br><span class="line">                # 对读取的行都进行split操作,然后提取站点名和其代码</span><br><span class="line">                name = line.split(&apos;|&apos;)[1] # 站点名字</span><br><span class="line">                code = line.split(&apos;|&apos;)[2] # 每个站点对应的代码</span><br><span class="line">                # 每个站点肯定都是唯一的</span><br><span class="line">                name_code_dict[name] = code</span><br><span class="line"></span><br><span class="line">        # 把name,code保存到本地文件中,方便以后使用</span><br><span class="line">        with open(file, &apos;w&apos;) as f:</span><br><span class="line">            # 不以ascii码编码的方式保存</span><br><span class="line">            json.dump(name_code_dict, f, ensure_ascii=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def query_ticket(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:查票操作</span><br><span class="line">        :return: 返回查询到的所有车次信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        data = self._query_prompt()</span><br><span class="line">        if not data:</span><br><span class="line">            print(&apos;query_ticket() error: &#123;&#125;&apos;.format(data))</span><br><span class="line">        _, from_station, to_station = data.keys()</span><br><span class="line">        train_date = data.get(&apos;train_date&apos;)</span><br><span class="line">        from_station_code = data.get(from_station)</span><br><span class="line">        to_station_code = data.get(to_station)</span><br><span class="line"></span><br><span class="line">        query_param = &apos;leftTicketDTO.train_date=&#123;&#125;&amp;&apos; \</span><br><span class="line">                      &apos;leftTicketDTO.from_station=&#123;&#125;&amp;&apos; \</span><br><span class="line">                      &apos;leftTicketDTO.to_station=&#123;&#125;&amp;&apos; \</span><br><span class="line">                      &apos;purpose_codes=ADULT&apos;\</span><br><span class="line">            .format(train_date, from_station_code, to_station_code)</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/leftTicket/query?&apos;</span><br><span class="line">        full_url = url + query_param</span><br><span class="line">        resp = self.session.get(full_url, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200 and resp.url == full_url:</span><br><span class="line">            print(&apos;query_ticket() 成功!然后进行车票清理工作!&apos;)</span><br><span class="line">            self._get_train_info(resp.json(), from_station, to_station)</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            print(&apos;query_ticket() error! status_code:&#123;&#125;, url:&#123;&#125;\norigin_url:&#123;&#125;&apos;</span><br><span class="line">                  .format(resp.status_code, resp.url, full_url))</span><br><span class="line"></span><br><span class="line">        return self.station_info, train_date, from_station_code, to_station_code</span><br><span class="line"></span><br><span class="line">    def _get_train_info(self, text, from_station, to_station):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:提取出查询到的列车信息</span><br><span class="line">        :param text: 包含所有从起点站到终点站的车次信息</span><br><span class="line">        :return: 返回所有车次信息</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not text:</span><br><span class="line">            print(&apos;_query_train_info() error: text为:&apos;, text)</span><br><span class="line">        # 把json文件转变成字典形式</span><br><span class="line">        result = dict(text)</span><br><span class="line">        # 判断有无车次的标志</span><br><span class="line">        if result.get(&apos;data&apos;).get(&apos;map&apos;):</span><br><span class="line">            train_info = result.get(&apos;data&apos;).get(&apos;result&apos;)</span><br><span class="line">            train_list = deque()</span><br><span class="line">            for item in train_info:</span><br><span class="line">                split_item = item.split(&apos;|&apos;)</span><br><span class="line">                item_dict = &#123;&#125;</span><br><span class="line">                # for index, item in enumerate(split_item,0):</span><br><span class="line">                #     print(&apos;&#123;&#125;:\t&#123;&#125;&apos;.format(index, item))</span><br><span class="line">                if split_item[11] == &apos;Y&apos;: # 已经开始卖票了</span><br><span class="line">                    item_dict[&apos;train_id&apos;] = split_item[0]</span><br><span class="line">                    item_dict[&apos;train_name&apos;] = split_item[3] # 车次名</span><br><span class="line">                    item_dict[&apos;depart_time&apos;] = split_item[8] # 出发时间</span><br><span class="line">                    item_dict[&apos;arrive_time&apos;] = split_item[9] # 到站时间</span><br><span class="line">                    item_dict[&apos;spend_time&apos;] = split_item[10] # 经历时长</span><br><span class="line">                    item_dict[&apos;wz&apos;] = split_item[29] # 无座</span><br><span class="line">                    item_dict[&apos;yz&apos;] = split_item[28] # 硬座</span><br><span class="line">                    item_dict[&apos;yw&apos;] = split_item[26] # 硬卧</span><br><span class="line">                    item_dict[&apos;rw&apos;] = split_item[23] # 软卧</span><br><span class="line">                    item_dict[&apos;td&apos;] = split_item[32] # 特等座</span><br><span class="line">                    item_dict[&apos;yd&apos;] = split_item[31] # 一等座</span><br><span class="line">                    item_dict[&apos;ed&apos;] = split_item[30] # 二等座</span><br><span class="line">                    item_dict[&apos;dw&apos;] = split_item[33] # 动卧</span><br><span class="line">                    train_list.append(item_dict)</span><br><span class="line">                    self.station_info.append(item_dict)</span><br><span class="line">                # 无法买票的车次,有可能是已卖光,也有可能是还不开卖</span><br><span class="line">                elif split_item[0] == &apos;&apos;:</span><br><span class="line">                    print(&apos;_query_train_info():车次&#123;&#125;的票暂时不能购买!&apos;</span><br><span class="line">                          .format(split_item[3]))</span><br><span class="line">                else:</span><br><span class="line">                    print(&apos;_query_train_info():车次&#123;&#125;还未开始卖票,起售时间为:&#123;&#125;&apos;</span><br><span class="line">                          .format(split_item[3], split_item[1]))</span><br><span class="line">            # 调用方法来打印列车结果</span><br><span class="line">            self._print_train(train_list, from_station, to_station)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;_get_train_info() error: 从&#123;&#125;站到&#123;&#125;站有没列车!&apos;</span><br><span class="line">                  .format(from_station, to_station))</span><br><span class="line"></span><br><span class="line">    def _print_train(self, train_info, from_station, to_station):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印查询到的车次信息</span><br><span class="line">        :param train_info: 提取出来的车次信息</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        if not train_info:</span><br><span class="line">            print(&apos;_print_train() error: train_info是None!&apos;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        print(&apos;从&#123;&#125;到&#123;&#125;还有余票的列车有:&apos;.format(from_station, to_station))</span><br><span class="line">        for item in train_info:</span><br><span class="line">            if &apos;G&apos; in item[&apos;train_name&apos;]: # 高铁</span><br><span class="line">                self._print_high_train_info(item)</span><br><span class="line">            elif &apos;D&apos; in item[&apos;train_name&apos;]: # 动车</span><br><span class="line">                self._print_dong_train_info(item)</span><br><span class="line">            else:</span><br><span class="line">                self._print_train_info(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def _print_high_train_info(self, item):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印高铁车次信息</span><br><span class="line">        :param item: 所有高铁车次</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t&apos;</span><br><span class="line">              &apos;经历时长:&#123;:4s&#125;\t特等座:&#123;:4s&#125;\t一等座:&#123;:4s&#125;\t二等座:&#123;:4s&#125;&apos;</span><br><span class="line">              .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;],item[&apos;arrive_time&apos;],</span><br><span class="line">                      item[&apos;spend_time&apos;],item[&apos;td&apos;], item[&apos;yd&apos;], item[&apos;ed&apos;]))</span><br><span class="line"></span><br><span class="line">    def _print_dong_train_info(self, item):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印动车的车票信息</span><br><span class="line">        :param item: 所有动车车次</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t&apos;</span><br><span class="line">              &apos;经历时长:&#123;:4s&#125;\t一等座:&#123;:4s&#125;\t二等座:&#123;:4s&#125;\t软卧:&#123;:4s&#125;\t动卧:&#123;:4s&#125;&apos;</span><br><span class="line">              .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;], item[&apos;arrive_time&apos;],</span><br><span class="line">                      item[&apos;spend_time&apos;],item[&apos;yd&apos;],item[&apos;ed&apos;], item[&apos;rw&apos;], item[&apos;dw&apos;]))</span><br><span class="line">    def _print_train_info(self,item):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:打印普通列出的车次信息</span><br><span class="line">        :param item: 所有普通车次</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        print(&apos;车次:&#123;:4s&#125;\t起始时间:&#123;:4s&#125;\t到站时间:&#123;:4s&#125;\t经历时长:&#123;:4s&#125;\t&apos;</span><br><span class="line">              &apos;软卧:&#123;:4s&#125;\t硬卧:&#123;:4s&#125;\t硬座:&#123;:4s&#125;\t无座:&#123;:4s&#125;&apos;</span><br><span class="line">              .format(item[&apos;train_name&apos;], item[&apos;depart_time&apos;], item[&apos;arrive_time&apos;],</span><br><span class="line">                      item[&apos;spend_time&apos;],item[&apos;rw&apos;], item[&apos;yw&apos;], item[&apos;yz&apos;], item[&apos;wz&apos;]))</span><br><span class="line">    def _query_prompt(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能: 与用户交互,让用户输入:出发日期,起始站和终点站并判断其正确性</span><br><span class="line">        :return: 返回正确的日期,起始站和终点站</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        time_flag, train_date = self._check_date()</span><br><span class="line">        if not time_flag:</span><br><span class="line">            print(&apos;_query_prompt() error:&apos;, &apos;乘车日期不合理,请检查!!&apos;)</span><br><span class="line">            return</span><br><span class="line">        # 创建有序字典,方便取值</span><br><span class="line">        query_data = OrderedDict()</span><br><span class="line">        from_station = input(&apos;请输入起始站:&apos;)</span><br><span class="line">        to_station = input(&apos;请输入终点站:&apos;)</span><br><span class="line"></span><br><span class="line">        station_flag = True</span><br><span class="line">        filename = &apos;name_code.json&apos;</span><br><span class="line">        with open(filename, &apos;r&apos;) as f:</span><br><span class="line">            data = dict(json.load(f))</span><br><span class="line">            stations = data.keys()</span><br><span class="line">            if from_station not in stations or to_station not in stations:</span><br><span class="line">                station_flag = False</span><br><span class="line">                print(&apos;query_prompt() error: &#123;&#125;或&#123;&#125;不在站点列表中!!&apos;</span><br><span class="line">                    .format(from_station, to_station))</span><br><span class="line">            # 获取起始站和终点站的代码</span><br><span class="line">            from_station_code = data.get(from_station)</span><br><span class="line">            to_station_code = data.get(to_station)</span><br><span class="line">        query_data[&apos;train_date&apos;] = train_date</span><br><span class="line">        query_data[from_station] = from_station_code</span><br><span class="line">        query_data[to_station] = to_station_code</span><br><span class="line"></span><br><span class="line">        if time_flag and  station_flag:</span><br><span class="line">            return query_data</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;query_prompt() error! time_flag:&#123;&#125;, station_flag:&#123;&#125;&apos;</span><br><span class="line">                  .format(time_flag, station_flag))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def _check_date(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:检测乘车日期的正确性</span><br><span class="line">        :return: 返回时间是否为标准的形式的标志</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        # 获取当前时间的时间戳</span><br><span class="line">        local_time = time.localtime()</span><br><span class="line">        local_date = &apos;&#123;&#125;-&#123;&#125;-&#123;&#125;&apos;.\</span><br><span class="line">            format(local_time.tm_year, local_time.tm_mon, local_time.tm_mday)</span><br><span class="line">        curr_time_array = time.strptime(local_date, &apos;%Y-%m-%d&apos;)</span><br><span class="line">        curr_time_stamp = time.mktime(curr_time_array)</span><br><span class="line">        # 获取当前时间</span><br><span class="line">        curr_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(curr_time_stamp))</span><br><span class="line"></span><br><span class="line">        # 计算出预售时长的时间戳</span><br><span class="line">        delta_time_stamp = &apos;2505600&apos;</span><br><span class="line">        # 算出预售票的截止日期时间戳</span><br><span class="line">        dead_time_stamp = int(curr_time_stamp) + int(delta_time_stamp)</span><br><span class="line">        dead_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(dead_time_stamp))</span><br><span class="line">        print(&apos;合理的乘车日期范围是:(&#123;&#125;)~(&#123;&#125;)&apos;.format(curr_time, dead_time))</span><br><span class="line"></span><br><span class="line">        train_date = input(&apos;请输入乘坐日期(year-month-day):&apos;)</span><br><span class="line">        # 把乘车日期转换成时间戳来比较</span><br><span class="line">        # 先生成一个时间数组</span><br><span class="line">        time_array = time.strptime(train_date, &apos;%Y-%m-%d&apos;)</span><br><span class="line">        # 把时间数组转化成时间戳</span><br><span class="line">        train_date_stamp = time.mktime(time_array)</span><br><span class="line">        # 获取标准的乘车日期</span><br><span class="line">        train_date_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(train_date_stamp))</span><br><span class="line">        # 做上面几步主要是把用户输入的时间格式转变成标准的格式</span><br><span class="line">        # 如用户输入:2018-2-22,那么形成的查票URL就不是正确的</span><br><span class="line">        # 只有是:    2018-02-22,组合的URL才是正确的!</span><br><span class="line">        # 通过时间戳来比较时间的正确性</span><br><span class="line">        if int(train_date_stamp) &gt;= int(curr_time_stamp) and \</span><br><span class="line">            int(train_date_stamp) &lt;= dead_time_stamp:</span><br><span class="line">            return True, train_date_time</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;_check_date() error: 乘车日期:&#123;&#125;, 当前系统时间:&#123;&#125;, 预售时长为:&#123;&#125;&apos;</span><br><span class="line">                  .format(train_date_time, curr_time, dead_time))</span><br><span class="line">            return False, None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    filename = &apos;station_name.txt&apos;</span><br><span class="line">    station = Station()</span><br><span class="line">    station.station_name_code()</span><br><span class="line">    station.save_station_code(filename)</span><br><span class="line">    station.query_ticket()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>5.coordinate.py(验证码坐标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def coor():</span><br><span class="line">    arr = [[],[&apos;45&apos;,&apos;45&apos;],[&apos;110&apos;,&apos;45&apos;],[&apos;175&apos;,&apos;45&apos;],[&apos;240&apos;,&apos;45&apos;],</span><br><span class="line">              [&apos;45&apos;,&apos;110&apos;],[&apos;110&apos;,&apos;110&apos;],[&apos;175&apos;,&apos;110&apos;],[&apos;240&apos;,&apos;110&apos;]]</span><br><span class="line">    cnt = input(&apos;请输入验证码坐标，以,隔开\n&apos;)</span><br><span class="line">    Str = []</span><br><span class="line">    for i in cnt:</span><br><span class="line">        if i == &apos;,&apos;:</span><br><span class="line">            continue</span><br><span class="line">        else:</span><br><span class="line">            Str = Str + arr[int(i)]</span><br><span class="line">    return &apos;,&apos;.join(Str)</span><br></pre></td></tr></table></figure><p>6.buy.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import chardet</span><br><span class="line">import urllib.parse</span><br><span class="line">import settings</span><br><span class="line">from login import Login</span><br><span class="line">from stations import Station</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line">import stations</span><br><span class="line"></span><br><span class="line">class Buy:</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 使用登录时候的session,这样好一些!</span><br><span class="line">        self.headers = settings.headers</span><br><span class="line">        self.session = settings.session</span><br><span class="line">    def checkUser(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:验证登录</span><br><span class="line">        :return: 无</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/login/checkUser&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        result = resp.json()</span><br><span class="line">        checkUser_flag = result[&apos;status&apos;]</span><br><span class="line">        if checkUser_flag == True:</span><br><span class="line">            print(&apos;验证登录成功！&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def get_secretStr(self, station_info):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:返回高铁车次信息</span><br><span class="line">        :param item: 单车次信息</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        val = str(input(&apos;请输入订票的车次:&apos;))</span><br><span class="line">        for item in station_info:</span><br><span class="line">            if item[&apos;train_name&apos;] == val:</span><br><span class="line">                return item[&apos;train_id&apos;]</span><br><span class="line">    def submitOrderRequest(self, station_info):</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/leftTicket/submitOrderRequest&apos;</span><br><span class="line">        cnt = self.get_secretStr(station_info)</span><br><span class="line">        Str = urllib.parse.unquote(cnt)</span><br><span class="line">        # 获取当前时间的时间戳</span><br><span class="line">        local_time = time.localtime()</span><br><span class="line">        local_date = &apos;&#123;&#125;-&#123;&#125;-&#123;&#125;&apos;.\</span><br><span class="line">            format(local_time.tm_year, local_time.tm_mon, local_time.tm_mday)</span><br><span class="line">        curr_time_array = time.strptime(local_date, &apos;%Y-%m-%d&apos;)</span><br><span class="line">        curr_time_stamp = time.mktime(curr_time_array)</span><br><span class="line">        # 获取当前时间</span><br><span class="line">        curr_time = time.strftime(&apos;%Y-%m-%d&apos;, time.localtime(curr_time_stamp))</span><br><span class="line">        train_date = input(&apos;请再次确认乘坐日期(year-month-day):&apos;)</span><br><span class="line">        query_from_station_name = input(&apos;请再次输入起始站:&apos;)</span><br><span class="line">        query_to_station_name = input(&apos;请再次输入终点站:&apos;)</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;secretStr&apos;: Str,</span><br><span class="line">            &apos;train_date&apos;: train_date,</span><br><span class="line">            &apos;back_train_date&apos;: curr_time,</span><br><span class="line">            &apos;tour_flag&apos;: &apos;dc&apos;,</span><br><span class="line">            &apos;purpose_codes&apos;: &apos;ADULT&apos;,</span><br><span class="line">            &apos;query_from_station_name&apos;: query_from_station_name,</span><br><span class="line">            &apos;query_to_station_name&apos;: query_to_station_name,</span><br><span class="line">            &apos;undefined&apos;: &apos;&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        if resp.status_code == 200:</span><br><span class="line">            print(&apos;submitOrderRequest成功！&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;submitOrderRequest() error! status_code:&#123;&#125;, url:&#123;&#125;&apos;.</span><br><span class="line">                  format(resp.status_code, resp.url))</span><br><span class="line"></span><br><span class="line">    def initDc(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        功能:请求提交购票人信息和选择购票坐票或者卧铺类型页面</span><br><span class="line">        :return: 无</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/initDc&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        #设置网页编码</span><br><span class="line">        if chardet.detect(resp.content).get(&apos;encoding&apos;) != &apos;UTF-8&apos;:</span><br><span class="line">            resp.encoding = &apos;UTF-8&apos;</span><br><span class="line">        match = re.search(&quot;var globalRepeatSubmitToken = &apos;(.*?)&apos;;&quot;, resp.text)</span><br><span class="line">        ticketToken = match.group(1)</span><br><span class="line">        people_url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/getPassengerDTOs&apos;</span><br><span class="line">        people_resp = self.session.post(people_url, data=&#123;&quot;REPEAT_SUBMIT_TOKEN&quot;:ticketToken,&quot;_json_att&quot;:&quot;&quot;&#125;, headers=self.headers)</span><br><span class="line">        people_json = people_resp.json()</span><br><span class="line">        result = dict(people_json)</span><br><span class="line">        info = result[&apos;data&apos;][&apos;normal_passengers&apos;][1]</span><br><span class="line">        train_no = re.search(&quot;&apos;train_no&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        leftTicket = re.search(&quot;&apos;ypInfoDetail&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        purpose_codes = re.search(&quot;&apos;purpose_codes&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        station_train_code = re.search(&quot;&apos;station_train_code&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        to_station_telecode = re.search(&quot;&apos;to_station_telecode&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        train_location = re.search(&quot;&apos;train_location&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        key_check_isChange = re.search(&quot;&apos;key_check_isChange&apos;:&apos;(.*?)&apos;&quot;, resp.text).group(1)</span><br><span class="line">        return info, ticketToken, train_no, leftTicket, purpose_codes, station_train_code, to_station_telecode, train_location, key_check_isChange</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def checkOrderInfo(self, info, ticketToken):</span><br><span class="line"></span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/checkOrderInfo&apos;</span><br><span class="line">        passengerTicketStr = &apos;O,0,1,&apos; + info[&apos;passenger_name&apos;] + &apos;,1,&apos; + info[&apos;passenger_id_no&apos;] + &apos;,&apos; + info[&apos;mobile_no&apos;] + &apos;,N&apos;</span><br><span class="line">        oldPassengerStr = info[&apos;passenger_name&apos;] + &apos;,1,&apos; + info[&apos;passenger_id_no&apos;] + &apos;,1_&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">                   &apos;cancel_flag&apos;: &apos;2&apos;,</span><br><span class="line">                   &apos;bed_level_order_num&apos;: &apos;000000000000000000000000000000&apos;,</span><br><span class="line">                   &apos;passengerTicketStr&apos;: passengerTicketStr,</span><br><span class="line">                   &apos;oldPassengerStr&apos;: oldPassengerStr,#</span><br><span class="line">                   &apos;tour_flag&apos;: &apos;dc&apos;,</span><br><span class="line">                   &apos;randCode&apos;: &apos;&apos;,</span><br><span class="line">                   &apos;whatsSelect&apos;: &apos;1&apos;,</span><br><span class="line">                    &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">                    &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,#</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        result = dict(resp.json())</span><br><span class="line">        if result[&apos;data&apos;][&apos;submitStatus&apos;] == True:</span><br><span class="line">            print(&apos;checkOrderInfo成功！&apos;)</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;checkOrderInfo失败！&apos;)</span><br><span class="line">        return passengerTicketStr, oldPassengerStr</span><br><span class="line">    def getQueueCount(self, trainDate, train_no, leftTicket, ticketToken, station_train_code, fromStationTelecode, to_station_telecode,</span><br><span class="line">                      purpose_codes, train_location, passengerTicketStr, oldPassengerStr, key_check_isChange):</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/getQueueCount&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;train_date&apos;: datetime.datetime.fromtimestamp(time.mktime(time.strptime(trainDate, &apos;%Y-%m-%d&apos;))).strftime(&apos;%a %b %d %Y %H:%M:%S GMT+0800&apos;),</span><br><span class="line">            &apos;train_no&apos;: train_no,</span><br><span class="line">            &apos;stationTrainCode&apos;: station_train_code,</span><br><span class="line">            &apos;seatType&apos;: &apos;O&apos;,</span><br><span class="line">            &apos;fromStationTelecode&apos;: fromStationTelecode,</span><br><span class="line">            &apos;toStationTelecode&apos;: to_station_telecode,</span><br><span class="line">            &apos;leftTicket&apos;: leftTicket,</span><br><span class="line">            &apos;purpose_codes&apos;: purpose_codes,</span><br><span class="line">            &apos;train_location&apos;: train_location,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        queueCountJson = resp.json()</span><br><span class="line">        if queueCountJson.get(&quot;status&quot;) == False or queueCountJson.get(&quot;httpstatus&quot;) != 200:</span><br><span class="line">            raise Exception(&quot;获取队列错误&quot;)</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/confirmSingleForQueue&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;passengerTicketStr&apos;: passengerTicketStr,</span><br><span class="line">            &apos;oldPassengerStr&apos;: oldPassengerStr,</span><br><span class="line">            &apos;randCode&apos;: &apos;&apos;,</span><br><span class="line">            &apos;purpose_codes&apos;: purpose_codes,</span><br><span class="line">            &apos;key_check_isChange&apos;: key_check_isChange,</span><br><span class="line">            &apos;leftTicketStr&apos;: leftTicket,</span><br><span class="line">            &apos;train_location&apos;: train_location,</span><br><span class="line">            &apos;choose_seats&apos;: &apos;&apos;,</span><br><span class="line">            &apos;seatDetailType&apos;: &apos;000&apos;,</span><br><span class="line">            &apos;whatsSelect&apos;: &apos;1&apos;,</span><br><span class="line">            &apos;roomType&apos;: &apos;00&apos;,</span><br><span class="line">            &apos;dwAll&apos;: &apos;N&apos;,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        singleForQueueReq = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        singleForQueueJson = singleForQueueReq.json()</span><br><span class="line">        print(singleForQueueJson)</span><br><span class="line"></span><br><span class="line">    def queryOrderWaitTime(self, ticketToken):</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/queryOrderWaitTime&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;random&apos;: time.time(),</span><br><span class="line">            &apos;tourFlag&apos;: &apos;dc&apos;,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        orderWaitJson = resp.json()</span><br><span class="line">        orderId = orderWaitJson.get(&quot;data&quot;).get(&quot;orderId&quot;)#此处有问题</span><br><span class="line">        print(orderWaitJson)</span><br><span class="line">        print(orderId)</span><br><span class="line">        url = &apos;https://kyfw.12306.cn/otn/confirmPassenger/resultOrderForDcQueue&apos;</span><br><span class="line">        data = &#123;</span><br><span class="line">            &apos;orderSequence_no&apos;: orderId,</span><br><span class="line">            &apos;_json_att&apos;: &apos;&apos;,</span><br><span class="line">            &apos;REPEAT_SUBMIT_TOKEN&apos;: ticketToken,</span><br><span class="line">        &#125;</span><br><span class="line">        dcQueueReq = self.session.post(url, data=data, headers=self.headers)</span><br><span class="line">        dcQueueJson = dcQueueReq.json()</span><br><span class="line">        if dcQueueJson.get(&quot;status&quot;) and dcQueueJson.get(&quot;httpstatus&quot;) == 200 and dcQueueJson.get(</span><br><span class="line">                &quot;data&quot;) is not None and dcQueueJson.get(&quot;data&quot;).get(&quot;submitStatus&quot;):</span><br><span class="line">            print(&quot;订票成功&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(dcQueueJson)</span><br><span class="line">            print(&quot;订票失败&quot;)</span><br><span class="line"></span><br><span class="line">def start():</span><br><span class="line">    login = Login()</span><br><span class="line">    login.down_captcha()</span><br><span class="line">    check_flag = login.captcha_check()</span><br><span class="line">    login_flag = login.login(check_flag)</span><br><span class="line">    if login_flag:</span><br><span class="line">        newapptk = login.auth_uamtk(login_flag)</span><br><span class="line">        username = login.uamatuth_client(newapptk)</span><br><span class="line">        login.init_my_12306(username)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;main():login_flag为Flase&apos;)</span><br><span class="line"></span><br><span class="line">def query():</span><br><span class="line">    filename = &apos;station_name.txt&apos;</span><br><span class="line">    station = Station()</span><br><span class="line">    station.station_name_code()</span><br><span class="line">    station.save_station_code(filename)</span><br><span class="line">    station_info, train_date, from_station_code, to_station_code = station.query_ticket()</span><br><span class="line">    return station_info, train_date, from_station_code, to_station_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def shop(station_info, trainDate, fromStationTelecode, to_station_telecode):</span><br><span class="line">    buy = Buy()</span><br><span class="line">    buy.checkUser()</span><br><span class="line">    buy.submitOrderRequest(station_info)</span><br><span class="line">    info, ticketToken, train_no, leftTicket, purpose_codes, station_train_code, to_station_telecode, train_location, key_check_isChange = buy.initDc()</span><br><span class="line">    passengerTicketStr, oldPassengerStr = buy.checkOrderInfo(info, ticketToken)</span><br><span class="line">    buy.getQueueCount(trainDate, train_no, leftTicket, ticketToken, station_train_code, fromStationTelecode, to_station_telecode,</span><br><span class="line">                      purpose_codes, train_location, passengerTicketStr, oldPassengerStr, key_check_isChange)</span><br><span class="line">    buy.queryOrderWaitTime(ticketToken)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    start()</span><br><span class="line">    station_info, train_date, from_station_code, to_station_code = query()</span><br><span class="line">    shop(station_info, train_date, from_station_code, to_station_code)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考链接：&lt;a href=&quot;https://blog.csdn.net/lzqwebsoft/article/details/18674635&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/lzqwebsoft/article/details/18674635&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.lanindex.com/12306%E8%B4%AD%E7%A5%A8%E6%B5%81%E7%A8%8B%E5%85%A8%E8%A7%A3%E6%9E%90/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.lanindex.com/12306%E8%B4%AD%E7%A5%A8%E6%B5%81%E7%A8%8B%E5%85%A8%E8%A7%A3%E6%9E%90/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;模拟查票订票操作如下：&lt;br&gt;1.首先12306是一个需要登录操作的网站，然而12306的登录验证大家都知道需要验证码。另外12306的验证码很坑~，需要人工选择对应的物品，这个用代码识别网上我也没找到好的教程，于是… 于是只能人工识别啦。。&lt;br&gt;2.登录之后我们需要输入起始地，目的地，时间等信息，然后查询&lt;br&gt;3.此时我们可以查询到车次信息了，根据自己的时间然后订合适时间和合适座位的票&lt;br&gt;4.选择乘坐人&lt;br&gt;5.建立好订单&lt;br&gt;6.付款，订票成功&lt;/p&gt;
&lt;p&gt;显然我们做到第5步已经达到我们用爬虫的目的。&lt;br&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://twh233.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://twh233.github.io/tags/python/"/>
    
      <category term="爬虫" scheme="http://twh233.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>初学爬虫</title>
    <link href="http://twh233.github.io/2018/04/16/%E5%88%9D%E5%AD%A6%E7%88%AC%E8%99%AB/"/>
    <id>http://twh233.github.io/2018/04/16/初学爬虫/</id>
    <published>2018-04-16T09:23:43.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天作为例子的网站：<a href="http://www.xiaohua100.cn/daxue/" target="_blank" rel="noopener">http://www.xiaohua100.cn/daxue/</a><br>啊哈，这个也是无意间找的网站，不是故意找的（大雾）（作为例子来说还是挺好的例子…<br>个人理解的爬虫分为以下几步：<br>1.<strong>获取网站url</strong><br>2.<strong>搞清楚是get请求还是post请求</strong><br>3.<strong>request或者session访问后，注意编码格式</strong><br>4.<strong>正则表达式或者用匹配出信息</strong><br>5.<strong>是否要从访问之后的返回信息得出data以及下个网站url</strong></p><a id="more"></a><p><tr></tr></p><p><tr></tr></p><p><tr></tr><br>那么今天的例子：<br>1.首先我们很清楚url = ‘<a href="http://www.xiaohua100.cn/daxue/&#39;" target="_blank" rel="noopener">http://www.xiaohua100.cn/daxue/&#39;</a><br>2.这个网站由get请求访问<br>3.我们今天的目的是寻找这些图片并进行下载，那么我们要做的是找到图片的url<br>4.然后通过正则表达式储存这些url到一个列表里面<br>5.通过requests.content 二进制下载这些图片即可</p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">url = &apos;http://www.xiaohua100.cn/daxue/&apos;</span><br><span class="line">response = requests.get(url)</span><br><span class="line">response.encoding = &apos;utf-8&apos;</span><br><span class="line">html = response.text</span><br><span class="line"></span><br><span class="line">main_url = &apos;http://www.xiaohua100.cn&apos;</span><br><span class="line">img_urls = re.findall(r&apos;/uploads/allimg/\d+/\d-\w+-\w+.jpg&apos;, html)</span><br><span class="line">for i in range(len(img_urls)):</span><br><span class="line">    img_urls[i] = main_url + img_urls[i]</span><br><span class="line"></span><br><span class="line">index = 0</span><br><span class="line">for img_url in img_urls:</span><br><span class="line">    img_data = requests.get(img_url).content</span><br><span class="line">    filename = str(index) + &apos;.jpg&apos;</span><br><span class="line">    with open(filename, &apos;wb&apos;) as f:</span><br><span class="line">        f.write(img_data)</span><br><span class="line">    print(img_url)</span><br><span class="line">    index += 1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天作为例子的网站：&lt;a href=&quot;http://www.xiaohua100.cn/daxue/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.xiaohua100.cn/daxue/&lt;/a&gt;&lt;br&gt;啊哈，这个也是无意间找的网站，不是故意找的（大雾）（作为例子来说还是挺好的例子…&lt;br&gt;个人理解的爬虫分为以下几步：&lt;br&gt;1.&lt;strong&gt;获取网站url&lt;/strong&gt;&lt;br&gt;2.&lt;strong&gt;搞清楚是get请求还是post请求&lt;/strong&gt;&lt;br&gt;3.&lt;strong&gt;request或者session访问后，注意编码格式&lt;/strong&gt;&lt;br&gt;4.&lt;strong&gt;正则表达式或者用匹配出信息&lt;/strong&gt;&lt;br&gt;5.&lt;strong&gt;是否要从访问之后的返回信息得出data以及下个网站url&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://twh233.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://twh233.github.io/tags/python/"/>
    
      <category term="爬虫" scheme="http://twh233.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬UbuntuPaste代码</title>
    <link href="http://twh233.github.io/2018/04/16/%E7%88%ACUbuntuPaste%E4%BB%A3%E7%A0%81/"/>
    <id>http://twh233.github.io/2018/04/16/爬UbuntuPaste代码/</id>
    <published>2018-04-16T08:47:47.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>直接贴代码啦。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import urllib.request</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">class UbtSpider:</span><br><span class="line">    def __init__(self) :</span><br><span class="line">        self.pageIndex = 25317600</span><br><span class="line">        self.user_agent = &apos;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&apos;</span><br><span class="line">    def getPage(self,pageIndex):</span><br><span class="line">        url = &apos;http://paste.ubuntu.com/&apos; + str(pageIndex)</span><br><span class="line">        headers = &#123;&apos;User-Agent&apos;: self.user_agent, &apos;Referer&apos;: url&#125;</span><br><span class="line">        request = urllib.request.Request(url, headers=headers)</span><br><span class="line">        with urllib.request.urlopen(request) as response:</span><br><span class="line">            html = response.read()</span><br><span class="line">            content = html.decode(&apos;utf-8&apos;)</span><br><span class="line">            patten = re.compile(&apos;&lt;div class=&quot;paste&quot;&gt;&lt;pre&gt;(.*?)&lt;/pre&gt;&lt;/div&gt;&apos;, re.S)  # re.S  (.*?）表示分组</span><br><span class="line">            items = patten.findall(content)</span><br><span class="line"></span><br><span class="line">            for item in items:</span><br><span class="line">                #替换</span><br><span class="line">                item = item.replace(&apos;&amp;nbsp;&apos;, &apos; &apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;gt;&apos;, &apos;&gt;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;lt;&apos;, &apos;&lt;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;quot;&apos;, &apos;&quot;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;amp;&apos;, &apos;&amp;&apos;)</span><br><span class="line">                item = item.replace(&apos;&amp;#39;&apos;, &apos;\&apos;&apos;)</span><br><span class="line">                item = re.sub(&apos;&lt;span.*?&gt;&apos;,&apos;&apos;,item)</span><br><span class="line">                item = re.sub(&apos;&lt;/span&gt;&apos;, &apos;&apos;, item)</span><br><span class="line">                # print(item)</span><br><span class="line">                patten2 = re.compile(&quot;.*include&quot;, re.S)</span><br><span class="line">                if (patten2.match(item)):</span><br><span class="line">                    fileName = str(pageIndex) + &apos;.txt&apos;</span><br><span class="line">                    print( u&quot;正在写入: &gt;&gt;&gt; &quot; + str(pageIndex))</span><br><span class="line">                    isSuccess = True</span><br><span class="line">                    with open(fileName,&apos;w&apos;) as f:</span><br><span class="line">                        try:</span><br><span class="line">                            f.write(item)</span><br><span class="line">                        except UnicodeError as e:</span><br><span class="line">                            if hasattr(e,&quot;reason&quot;):</span><br><span class="line">                                print (str(pageIndex)+u&quot; 写入失败,原因: &quot; + e.reason)</span><br><span class="line">                                isSuccess = False</span><br><span class="line">                            f.close()</span><br><span class="line">                            try:os.remove(fileName)</span><br><span class="line">                            except Exception as ose:</span><br><span class="line">                                print(str(pageIndex)+u&quot; 删除失败&quot; )</span><br><span class="line">                        if isSuccess:</span><br><span class="line">                            print(str(pageIndex) + u&quot; 写入成功!&quot; )</span><br><span class="line">                            f.close()</span><br><span class="line">    def start(self):</span><br><span class="line">        start = 25545700</span><br><span class="line">        end = 25545692</span><br><span class="line">        start = input(&quot;请输入起始页码: &quot;)</span><br><span class="line">        end = input(&quot;请输入结束页码: &quot;)</span><br><span class="line">        print(u&quot;开始爬取 UbuntuPaste 代码 ........&quot;)</span><br><span class="line">        for pageIndex in range(int(start),int(end)): # 起始范围</span><br><span class="line">            self.getPage(pageIndex)</span><br><span class="line"></span><br><span class="line">spider = UbtSpider()</span><br><span class="line">spider.start()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直接贴代码啦。&lt;br&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://twh233.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://twh233.github.io/tags/python/"/>
    
      <category term="爬虫" scheme="http://twh233.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
