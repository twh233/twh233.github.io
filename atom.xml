<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Twh233&#39;s Blog</title>
  
  <subtitle>Love Coding,Enjoy Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://twh233.github.io/"/>
  <updated>2020-10-07T09:07:06.729Z</updated>
  <id>http://twh233.github.io/</id>
  
  <author>
    <name>Twh233</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang 系统监控</title>
    <link href="http://twh233.github.io/2020/10/07/Golang-%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/"/>
    <id>http://twh233.github.io/2020/10/07/Golang-系统监控/</id>
    <published>2020-10-07T09:06:23.000Z</published>
    <updated>2020-10-07T09:07:06.729Z</updated>
    
    <content type="html"><![CDATA[<p>系统监控程序会定期的检查上次垃圾回收器什么时候执行的，如果发现已经有很长时间没有执行垃圾回收操作了，它就强制执行一次回收。  </p><p>它来定期扫描自由内存块，如果长时间不用，它就会建议操作系统把物理内存收回去。  </p><p>在函数头部插入一段汇编指令：<br>第一件事用来判断栈帧空间够不够用，不够用进行扩张<br>第二件事检查当前的G执行多长，如果系统调度发出抢占通知，立即中止G执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统监控程序会定期的检查上次垃圾回收器什么时候执行的，如果发现已经有很长时间没有执行垃圾回收操作了，它就强制执行一次回收。  &lt;/p&gt;
&lt;p&gt;它来定期扫描自由内存块，如果长时间不用，它就会建议操作系统把物理内存收回去。  &lt;/p&gt;
&lt;p&gt;在函数头部插入一段汇编指令：&lt;br&gt;
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Golang" scheme="http://twh233.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang 并发</title>
    <link href="http://twh233.github.io/2020/10/07/Golang-%E5%B9%B6%E5%8F%91/"/>
    <id>http://twh233.github.io/2020/10/07/Golang-并发/</id>
    <published>2020-10-07T08:57:14.000Z</published>
    <updated>2020-10-07T09:06:57.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PMG模型"><a href="#PMG模型" class="headerlink" title="PMG模型"></a>PMG模型</h2><img src="/2020/10/07/Golang-并发/1.png"><p>第一本地队列超过 256 个任务转移一半任务到全局队列，第二本地队列执行 60 个任务则到全局队列执行一个确保公平性。  </p><h2 id="runnext"><a href="#runnext" class="headerlink" title="runnext"></a>runnext</h2><p>G对象有runnext属性，记录最后一个G对象。执行 runnext 优先，然后 runq 队列。</p><h2 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h2><p>M 的所有的状态都保存在 G 任务栈，优点是在任意时 M 都能上下文切换。</p><p>M 使用的栈保存在 G 栈上，切换时只需要把 M 使用的 SP 等寄存器保存到 G 的寄存器上，保存后 M 就可以上下文切换。</p><p>G 自带栈可以从 2KB 扩容到 1GB，那么怎么扩容呢？实际上重新分配两倍的内存，然后把数据拷贝进来，栈指针指向新的地址，原来的释放掉，称之为拷贝栈。收缩也一样，创建小一点的块，把数据拷贝进来，用它来替换原来的释放。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PMG模型&quot;&gt;&lt;a href=&quot;#PMG模型&quot; class=&quot;headerlink&quot; title=&quot;PMG模型&quot;&gt;&lt;/a&gt;PMG模型&lt;/h2&gt;&lt;img src=&quot;/2020/10/07/Golang-并发/1.png&quot;&gt;
&lt;p&gt;第一本地队列超过 256 个任务转移
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Golang" scheme="http://twh233.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>垃圾回收</title>
    <link href="http://twh233.github.io/2020/10/07/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://twh233.github.io/2020/10/07/垃圾回收/</id>
    <published>2020-10-07T08:55:34.000Z</published>
    <updated>2020-10-07T08:56:17.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>引用计数实现方式非常简单，每个对象头部有一个计数器，引用对象时计数器加一，取消引用时计数器减一，等于零时释放内存。</p><p>缺点：<br>1.易内存泄漏<br>2.不支持循环引用 </p><h2 id="代龄"><a href="#代龄" class="headerlink" title="代龄"></a>代龄</h2><p>代龄机制是这样的，对象通常分成三级代龄 0、1、2。新创建的对象的代龄是 0，每级代龄都有阈值，当 0 级对象数量超过阈值就会启动垃圾回收，垃圾回收扫描所有 0 级代龄对象，扫描完对象是活着或者死着两种状态。理论来说在第一次回收活着对象在第二次回收活着几率很高，垃圾回收器把第一次扫描活着对象标记为 1 级代龄对象，下次扫描 0 级代龄对象不用扫描第一次扫描过的对象，减少扫描对象的数量。当 1 级代龄对象数量超过阈值便扫描 1 级代龄对象，如果 1 级代龄还活着说明这个对象生命周期更长，就标记为 2 级代龄对象。  </p><p>优点1：减少扫描对象数量<br>优点2：支持内存压缩  </p><h2 id="标记清理"><a href="#标记清理" class="headerlink" title="标记清理"></a>标记清理</h2><p>回收器启动把所有对象标记成白色。A引用B，B变成灰色。白色可以释放。下次扫描灰色。<br>B变成黑色，如果B引用C。C依然是灰色。不断递归，只剩黑色和白色。那么黑色的都是活着的白色的都是死的。</p><h2 id="并发清理"><a href="#并发清理" class="headerlink" title="并发清理"></a>并发清理</h2><p>回收白色对象的时候可以和用户逻辑并发。</p><h2 id="写屏障"><a href="#写屏障" class="headerlink" title="写屏障"></a>写屏障</h2><p>一旦进入垃圾回收状态时进行短暂 STW 暂停，打开标记位标记为正在执行垃圾回收。扫描当时状态。<br>在垃圾回收阶段重新引用另外新对象，这个屏障把这种行为重新过滤。</p><h2 id="信用授权"><a href="#信用授权" class="headerlink" title="信用授权"></a>信用授权</h2><p>回收的速度跟不上分配的速度垃圾回收器会把用户逻辑暂停，用户逻辑暂停后不会有新的对象出现。<br>黑白对象标记完的对象数量累计到公共账户信用值，如果小于等于零则调度切换为垃圾回收，切换后不停的增加信用值和检查公共账户信用值，尽早提前结束切换执行用户代码，保证用户代码和垃圾回收的并行。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引用计数&quot;&gt;&lt;a href=&quot;#引用计数&quot; class=&quot;headerlink&quot; title=&quot;引用计数&quot;&gt;&lt;/a&gt;引用计数&lt;/h2&gt;&lt;p&gt;引用计数实现方式非常简单，每个对象头部有一个计数器，引用对象时计数器加一，取消引用时计数器减一，等于零时释放内存。&lt;/p&gt;

      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="垃圾回收" scheme="http://twh233.github.io/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>内存分配器</title>
    <link href="http://twh233.github.io/2020/10/07/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8/"/>
    <id>http://twh233.github.io/2020/10/07/内存分配器/</id>
    <published>2020-10-07T08:54:21.000Z</published>
    <updated>2020-10-07T08:55:13.154Z</updated>
    
    <content type="html"><![CDATA[<p>为了避免程序频繁的向操作系统申请，占用更多的空间延长内存的使用时间。可以一次性申请<br>多一部分的内存重复使用。例如：对象池、连接池。并且一次性申请大块内存可以做到连续分<br>配，通过相邻的地址空间的合并减少碎片化。  </p><h3 id="虚拟地址空间如何使用"><a href="#虚拟地址空间如何使用" class="headerlink" title="虚拟地址空间如何使用"></a>虚拟地址空间如何使用</h3><p>每个进程有一个虚拟地址空间，内存分配在某段虚拟地址空间内就能保证是连续的。</p><p>1.让操作系统随机开始，保留一段地址空间，如果失败，加上或者减去偏移量重新选择。<br>2.如果连续的方式不行使用分段的方式。空间扩展尝试同一方向扩展，失败则换个相反<br>方向扩展，这样空间还是连续的。操作系统随机从两个方向扩展的方式称之为稀疏堆。<br>3.使用一个数组。数组存储内存指针指向自由块，自由块有各种状态，比如当前使用多<br>少内存、是否是空闲状态等，形成类似反查表的作用。自由块的内存起始地址减去初始<br>位置得到偏移量，偏移量按页大小对齐作为数组索引。这样的优点是只需检查数组就知<br>道内存分配的信息、检查相邻的两项的是否空闲可以合并成大块内存。通过反查表实现<br>碎片化问题。</p><h3 id="Go管理内存框架"><a href="#Go管理内存框架" class="headerlink" title="Go管理内存框架"></a>Go管理内存框架</h3><p>内存分配的完整流程首先检查 Cache 里有没有自由块，有的话直接返回；没有的话计算<br>向哪个 Central 申请，如果 Central 有则取回一批，如果没有，则向Heap申请大块自由<br>块切割，如果Heap没有多余的自由块，Heap向操作系统申请。Go语言在初始化时建立一个<br>静态表，通过静态表知道一次取多少个，这个数字是基于大量的统计得到的，有些语言根<br>据程序运行期动态调整这个数字。  </p><p>任何时候内存管理都会涉及两个核心问题。  </p><p>第一个快速分配，比如实现无锁操作或者减少锁。因为 Central 被很多Cache共享，操作<br>数据必须加锁处理，Heap 被很多 Central 共享，操作数据要加锁。</p><p>第二个尽可能在内存复用方面做到平衡。快速操作意味着用批处理代替单次处理实现性能<br>提升，但是批处理会浪费大量的资源。所以一来用批处理来实现快速分配操作的性能，一<br>来实现内存节约避免快速消耗，需要在中间找到平衡点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了避免程序频繁的向操作系统申请，占用更多的空间延长内存的使用时间。可以一次性申请&lt;br&gt;多一部分的内存重复使用。例如：对象池、连接池。并且一次性申请大块内存可以做到连续分&lt;br&gt;配，通过相邻的地址空间的合并减少碎片化。  &lt;/p&gt;
&lt;h3 id=&quot;虚拟地址空间如何使用&quot;&gt;
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="内存" scheme="http://twh233.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="http://twh233.github.io/2020/10/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://twh233.github.io/2020/10/07/线程池/</id>
    <published>2020-10-07T08:51:40.000Z</published>
    <updated>2020-10-07T08:54:47.166Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;assert.h&gt;</span><br><span class="line">#include &lt;stdarg.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line"></span><br><span class="line">#define LL_ADD(item, list) do &#123; \</span><br><span class="line">item-&gt;prev = NULL;\</span><br><span class="line">item-&gt;next = list;\</span><br><span class="line">list = item;\</span><br><span class="line">&#125; while(0)</span><br><span class="line"></span><br><span class="line">#define LL_REMOVE(item, list) do &#123;\</span><br><span class="line">if (item-&gt;prev != NULL) item-&gt;prev-&gt;next = item-&gt;next;\</span><br><span class="line">if (item-&gt;next != NULL) item-&gt;next-&gt;prev = item-&gt;prev;\</span><br><span class="line">if (list == item) list = item-&gt;next;\</span><br><span class="line">item-&gt;prev = item-&gt;next = NULL;\</span><br><span class="line">&#125; while(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//执行（线程ID，终止标识，池管理组件对象）</span><br><span class="line">typedef struct NWORKER &#123;</span><br><span class="line">pthread_t thread;</span><br><span class="line">int terminate;</span><br><span class="line">struct NWORKQUEUE *workqueue;</span><br><span class="line">struct NWORKER *prev;</span><br><span class="line">struct NWORKER *next;</span><br><span class="line">&#125; nWorker;</span><br><span class="line"></span><br><span class="line">//任务（任务回调函数，任务执行的参数）</span><br><span class="line">typedef struct NJOB &#123;</span><br><span class="line">void (*job_function)(struct NJOB *job);</span><br><span class="line">void *user_data;</span><br><span class="line">struct NJOB *prev;</span><br><span class="line">struct NJOB *next;</span><br><span class="line">&#125; nJob;</span><br><span class="line"></span><br><span class="line">//池管理组件（互斥锁，条件变量，执行队列，任务队列）</span><br><span class="line">typedef struct NWORKQUEUE &#123;</span><br><span class="line">struct NWORKER *workers;</span><br><span class="line">struct NJOB *waiting_jobs;</span><br><span class="line">pthread_mutex_t jobs_mtx;</span><br><span class="line">pthread_cond_t jobs_cond;</span><br><span class="line">&#125; nWorkQueue;</span><br><span class="line"></span><br><span class="line">typedef nWorkQueue nThreadPool;</span><br><span class="line"></span><br><span class="line">static void *ntyWorkerThread(void *ptr) &#123;</span><br><span class="line">nWorker *worker = (nWorker*)ptr;</span><br><span class="line"></span><br><span class="line">while (1) &#123;</span><br><span class="line">pthread_mutex_lock(&amp;worker-&gt;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">while (worker-&gt;workqueue-&gt;waiting_jobs == NULL) &#123;</span><br><span class="line">if (worker-&gt;terminate) break;</span><br><span class="line">pthread_cond_wait(&amp;worker-&gt;workqueue-&gt;jobs_cond, &amp;worker-&gt;workqueue-&gt;jobs_mtx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (worker-&gt;terminate) &#123;</span><br><span class="line">pthread_mutex_unlock(&amp;worker-&gt;workqueue-&gt;jobs_mtx);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nJob *job = worker-&gt;workqueue-&gt;waiting_jobs;</span><br><span class="line">if (job != NULL) &#123;</span><br><span class="line">LL_REMOVE(job, worker-&gt;workqueue-&gt;waiting_jobs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;worker-&gt;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">if (job == NULL) continue;</span><br><span class="line"></span><br><span class="line">job-&gt;job_function(job);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">free(worker);</span><br><span class="line">pthread_exit(NULL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int ntyThreadPoolCreate(nThreadPool *workqueue, int numWorkers) &#123;</span><br><span class="line"></span><br><span class="line">if (numWorkers &lt; 1) numWorkers = 1;</span><br><span class="line">memset(workqueue, 0, sizeof(nThreadPool));</span><br><span class="line"></span><br><span class="line">pthread_cond_t blank_cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line">memcpy(&amp;workqueue-&gt;jobs_cond, &amp;blank_cond, sizeof(workqueue-&gt;jobs_cond));</span><br><span class="line"></span><br><span class="line">pthread_mutex_t blank_mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line">memcpy(&amp;workqueue-&gt;jobs_mtx, &amp;blank_mutex, sizeof(workqueue-&gt;jobs_mtx));</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">for (i = 0;i &lt; numWorkers;i ++) &#123;</span><br><span class="line">nWorker *worker = (nWorker*)malloc(sizeof(nWorker));</span><br><span class="line">if (worker == NULL) &#123;</span><br><span class="line">perror(&quot;malloc&quot;);</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">memset(worker, 0, sizeof(nWorker));</span><br><span class="line">worker-&gt;workqueue = workqueue;</span><br><span class="line"></span><br><span class="line">        //printf(&quot;pthread_create --&gt; %d\n&quot;, i);</span><br><span class="line">int ret = pthread_create(&amp;worker-&gt;thread, NULL, ntyWorkerThread, (void *)worker);</span><br><span class="line">if (ret) &#123;</span><br><span class="line"></span><br><span class="line">perror(&quot;pthread_create&quot;);</span><br><span class="line">free(worker);</span><br><span class="line"></span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LL_ADD(worker, worker-&gt;workqueue-&gt;workers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void ntyThreadPoolShutdown(nThreadPool *workqueue) &#123;</span><br><span class="line">nWorker *worker = NULL;</span><br><span class="line"></span><br><span class="line">for (worker = workqueue-&gt;workers;worker != NULL;worker = worker-&gt;next) &#123;</span><br><span class="line">worker-&gt;terminate = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pthread_mutex_lock(&amp;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">workqueue-&gt;workers = NULL;</span><br><span class="line">workqueue-&gt;waiting_jobs = NULL;</span><br><span class="line"></span><br><span class="line">pthread_cond_broadcast(&amp;workqueue-&gt;jobs_cond);</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ntyThreadPoolQueue(nThreadPool *workqueue, nJob *job) &#123;</span><br><span class="line"></span><br><span class="line">pthread_mutex_lock(&amp;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">LL_ADD(job, workqueue-&gt;waiting_jobs);</span><br><span class="line"></span><br><span class="line">pthread_cond_signal(&amp;workqueue-&gt;jobs_cond);</span><br><span class="line">pthread_mutex_unlock(&amp;workqueue-&gt;jobs_mtx);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define KING_MAX_THREAD80</span><br><span class="line">#define KING_COUNTER_SIZE1000</span><br><span class="line"></span><br><span class="line">void king_counter(nJob *job) &#123;</span><br><span class="line"></span><br><span class="line">int index = *(int*)job-&gt;user_data;</span><br><span class="line"></span><br><span class="line">printf(&quot;index : %d, selfid : %lu\n&quot;, index, pthread_self());</span><br><span class="line"></span><br><span class="line">free(job-&gt;user_data);</span><br><span class="line">free(job);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line"></span><br><span class="line">nThreadPool pool;</span><br><span class="line"></span><br><span class="line">ntyThreadPoolCreate(&amp;pool, KING_MAX_THREAD);</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">for (i = 0;i &lt; KING_COUNTER_SIZE;i ++) &#123;</span><br><span class="line">nJob *job = (nJob*)malloc(sizeof(nJob));</span><br><span class="line">if (job == NULL) &#123;</span><br><span class="line">perror(&quot;malloc&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">job-&gt;job_function = king_counter;</span><br><span class="line">job-&gt;user_data = malloc(sizeof(int));</span><br><span class="line">*(int*)job-&gt;user_data = i;</span><br><span class="line"></span><br><span class="line">ntyThreadPoolQueue(&amp;pool, job);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="线程池" scheme="http://twh233.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>无锁CAS无锁队列</title>
    <link href="http://twh233.github.io/2020/10/07/%E6%97%A0%E9%94%81CAS%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97/"/>
    <id>http://twh233.github.io/2020/10/07/无锁CAS无锁队列/</id>
    <published>2020-10-07T08:50:23.000Z</published>
    <updated>2020-10-07T08:50:54.366Z</updated>
    
    <content type="html"><![CDATA[<pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;pthread.h&gt;#include &lt;mutex&gt;#include &lt;time.h&gt;#include &lt;atomic&gt;#include &lt;list&gt;#include &lt;memory&gt;#define MAX_THREAD_NUM 1#define FOR_LOOP_COUNT 10000000static int counter = 0;static pthread_spinlock_t spinlock;static std::mutex s_mutex;static int s_count_push = 0;static int s_count_pop = 0;// using namespace lock_free;// 有锁队列，直接使用liststatic std::list&lt;int&gt; s_list;typedef void *(*thread_func_t)(void *argv);static int lxx_atomic_add(int *ptr, int increment){  int old_value = *ptr;  __asm__ volatile(&quot;lock; xadd %0, %1 \n\t&quot;                   : &quot;=r&quot;(old_value), &quot;=m&quot;(*ptr)                   : &quot;0&quot;(increment), &quot;m&quot;(*ptr)                   : &quot;cc&quot;, &quot;memory&quot;);  return *ptr;}template &lt;typename ElemType&gt;struct qnode // 链表节点{  struct qnode *_next;  ElemType _data;};template &lt;typename ElemType&gt;class Queue{private:  struct qnode&lt;ElemType&gt; *volatile _head = NULL;  // 随着pop后指向的位置是不一样的, head不是固定的  struct qnode&lt;ElemType&gt; *volatile _tail = NULL;public:  Queue()  {    _head = _tail = new qnode&lt;ElemType&gt;;    _head-&gt;_next = NULL;    _tail-&gt;_next = NULL;    printf(&quot;Queue _head:%p\n&quot;, _head);  }  void push(const ElemType &amp;e)  {    struct qnode&lt;ElemType&gt; *p = new qnode&lt;ElemType&gt;;    p-&gt;_data = e;    p-&gt;_next = NULL;    struct qnode&lt;ElemType&gt; *t = _tail; // 获取尾部    t-&gt;_next = p; // 插到尾部    _tail = p; // 更新尾部节点  }  void push2(const ElemType &amp;e)  {    struct qnode&lt;ElemType&gt; *p = new qnode&lt;ElemType&gt;;    // printf(&quot;push head:%p, p:%p\n&quot;, _head, p);    p-&gt;_next = NULL;    p-&gt;_data = e;    struct qnode&lt;ElemType&gt; *t = _tail;    struct qnode&lt;ElemType&gt; *old_t = _tail;    int count = 0;    do    {      while (t-&gt;_next != NULL) // 非空的时候要去更新 t-&gt;_next        t = t-&gt;_next;          // 找到最后的节点      if (count++ &gt;= 1)      {        printf(&quot;push count:%d, t-&gt;_next:%p\n&quot;, count, t-&gt;_next);      }      // 将null换为p即是插入的节点    } while (!__sync_bool_compare_and_swap(&amp;t-&gt;_next, NULL, p));    // 将最后的节点_tail更换为p节点    __sync_bool_compare_and_swap(&amp;_tail, old_t, p);  }  bool pop(ElemType &amp;e)  {    struct qnode&lt;ElemType&gt; *p = _head;         // 头结点    struct qnode&lt;ElemType&gt; *np = _head-&gt;_next; // 首元素节点    if (!np)    {      return false;    }    e = np-&gt;_data;    _head-&gt;_next = np-&gt;_next;    delete np;    return true;  }  bool pop2(ElemType &amp;e)  {    struct qnode&lt;ElemType&gt; *p = NULL;    struct qnode&lt;ElemType&gt; *np = NULL;    int count = 0;    do    {      p = _head; // 头节点，不真正存储数据      np = p-&gt;_next;      if (p-&gt;_next == NULL) // 首元节点为空，则返回      {        return false;      }      if (count++ &gt;= 1)      {        printf(&quot;pop count:%d, p-&gt;_next:%p\n&quot;, count, p-&gt;_next);      }      // 更新头结点位置    } while (!__sync_bool_compare_and_swap(&amp;_head, p, p-&gt;_next));    e = p-&gt;_next-&gt;_data;    // printf(&quot;pop p:%p\n&quot;, p);    delete p; // 因为我们已经将头部节点换成了p-&gt;_next, 所以可以释放掉    return true;  }  ~Queue()  {    struct qnode&lt;ElemType&gt; *volatile tmp;    while (_head)    {      tmp = _head-&gt;_next;      printf(&quot;_head:%p\n&quot;, _head);      delete _head;      _head = tmp;    }  }};void *mutex_thread_push(void *argv){  for (int i = 0; i &lt; FOR_LOOP_COUNT; i++)  {    s_mutex.lock();    s_count_push++;    s_list.push_back(i);    s_mutex.unlock();  }  return NULL;}void *mutex_thread_pop(void *argv){  while (true)  {    int value = 0;    s_mutex.lock();    if (s_list.size() &gt; 0)    {      value = s_list.front();      s_list.pop_front();      s_count_pop++;    }    s_mutex.unlock();    if (s_count_pop &gt;= FOR_LOOP_COUNT * MAX_THREAD_NUM)    {      printf(&quot;%s dequeue:%d\n&quot;, __FUNCTION__, value);      break;    }  }  printf(&quot;%s exit\n&quot;, __FUNCTION__);  return NULL;}static Queue&lt;int&gt; s_queue;void *queue_free_thread_push(void *argv){  for (int i = 0; i &lt; FOR_LOOP_COUNT; i++)  {    s_queue.push2(i);    lxx_atomic_add(&amp;s_count_push, 1);    // printf(&quot;s_count_push:%d\n&quot;,s_count_push);  }  return NULL;}void *queue_free_thread_pop(void *argv){  // for (int i = 0; i &lt; FOR_LOOP_COUNT*5; i++)  int last_value = 0;  static int s_pid_count = 0;  s_pid_count++;  int pid = s_pid_count;  while (true)  {    int value = 0;    if (s_queue.pop2(value))    {      last_value = value;      if (s_count_pop != value)      {        printf(&quot;pid:%d, -&gt; value:%d, expected:%d\n&quot;, pid, value, s_count_pop);      }      s_count_pop++;      // printf(&quot;pid:%d, -&gt; value:%d\n&quot;, pid, value);    }    else    {      // printf(&quot;pid:%d, null\n&quot;, pid);    }    if (s_count_pop &gt;= FOR_LOOP_COUNT * MAX_THREAD_NUM)    {      printf(&quot;%s dequeue:%d\n&quot;, __FUNCTION__, last_value);      break;    }  }  printf(&quot;%s exit\n&quot;, __FUNCTION__);  return NULL;}int test_queue(thread_func_t func_push, thread_func_t func_pop, char **argv){  clock_t start = clock();  pthread_t tid_push[MAX_THREAD_NUM] = {0};  for (int i = 0; i &lt; MAX_THREAD_NUM; i++)  {    int ret = pthread_create(&amp;tid_push[i], NULL, func_push, argv);    if (0 != ret)    {      printf(&quot;create thread failed\n&quot;);    }  }  pthread_t tid_pop[MAX_THREAD_NUM] = {0};  for (int i = 0; i &lt; MAX_THREAD_NUM; i++)  {    int ret = pthread_create(&amp;tid_pop[i], NULL, func_pop, argv);    if (0 != ret)    {      printf(&quot;create thread failed\n&quot;);    }  }  for (int i = 0; i &lt; MAX_THREAD_NUM; i++)  {    pthread_join(tid_push[i], NULL);  }  for (int i = 0; i &lt; MAX_THREAD_NUM; i++)  {    pthread_join(tid_pop[i], NULL);  }  clock_t end = clock();  printf(&quot;spend clock : %ld, push:%d, pop:%d\n&quot;, (end - start) / CLOCKS_PER_SEC,         s_count_push, s_count_pop);  return 0;}// 多尝试几次 g++ -o 4_test_queue 4_test_queue.cpp -lpthread -latomic -std=c++11int main(int argc, char **argv){  printf(&quot;THREAD_NUM:%d\n\n&quot;, MAX_THREAD_NUM);  for (int i = 0; i &lt; 100; i++)  {    s_count_push = 0;    s_count_pop = 0;    printf(&quot;\n\n---------&gt;i:%d\n\n&quot;, i);    printf(&quot;use mutex queue -----------&gt;\n&quot;);    test_queue(mutex_thread_push, mutex_thread_pop, NULL);    s_count_push = 0;    s_count_pop = 0;    printf(&quot;\nuse queue_free queue -----------&gt;\n&quot;);    test_queue(queue_free_thread_push, queue_free_thread_pop, NULL);  }  printf(&quot;finish\n&quot;);  return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;pthread.h&amp;gt;
#include &amp;lt;mutex&amp;gt;
#include &amp;lt;time.h&amp;gt;
#inc
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="CAS" scheme="http://twh233.github.io/tags/CAS/"/>
    
  </entry>
  
  <entry>
    <title>进程协程线程</title>
    <link href="http://twh233.github.io/2020/09/27/%E8%BF%9B%E7%A8%8B%E5%8D%8F%E7%A8%8B%E7%BA%BF%E7%A8%8B/"/>
    <id>http://twh233.github.io/2020/09/27/进程协程线程/</id>
    <published>2020-09-27T14:34:51.000Z</published>
    <updated>2020-09-27T14:44:15.572Z</updated>
    
    <content type="html"><![CDATA[<p>进程是一种资源单位，操作系统按照进程来分配资源管理资源。线程是进程内的，专门用来执行。  </p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程我们严格意义上来说指的是任务加上任务执行所需的资源，称之为线程，如果线程只是执行单位没有任何资源，称之为任务，它是可复用的，线程本身有状态的，因为线程执行时有线程栈，所以任务加上任务执行所需的线程栈等资源称之为线程。</p><h3 id="系统线程与用户线程"><a href="#系统线程与用户线程" class="headerlink" title="系统线程与用户线程"></a>系统线程与用户线程</h3><img src="/2020/09/27/进程协程线程/1.png">  <p>系统线程指的是操作系统提供的的任务单元。用户线程指的是在用户空间实现的一些并发任务，跟操作系统没关系。</p><h3 id="线程池模型"><a href="#线程池模型" class="headerlink" title="线程池模型"></a>线程池模型</h3><p>使用池模型不再需要频繁的创建系统线程，用户态可以创建很多用来存储状态的执行单位。执行时把它绑定到一个系统线程上去执行，执行完把系统线程释放，系统线程把绑定状态删除放到池中，不需要杀掉系统线程，接下来另外一个执行单位重新的绑定到这个系统线程上去执行。</p><p>如下图所示：<br><img src="/2020/09/27/进程协程线程/2.png"></p><p>首先创建一定数量的系统线程专门用来执行的。其次在用户态空间创建一些对象专门用来保存执行时所需要的状态，包括线程栈。它不负责执行，它只是很普通的数据抽象容器。它执行时把它绑定到某个系统线程上，这个系统线程就具备了普通线程状态然后去执行，执行完把这个线程的状态全部剥离，这个线程就恢复成原始状态，接下来可以执行其他的任务。</p><p>实现用户态的执行和系统态的执行分离，避免反复系统调用所消耗的资源。</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>为了充分利用时间片，利用异步机制，在用户态实现调度机制把阻塞的时间片执行其他的任务，当任务执行完成时，下次再执行时去检查返回的事件，把事件返回的结果返还给原先任务。</p><p>很明显，协程是串行不是并行，它的执行序是执行 A 任务，当 A 任务阻塞时唤醒 B 任务，B 任务执行结束检查 A 的结果是否有返回，不断的切换实现多任务并发。</p><h3 id="上下文切换对性能的影响"><a href="#上下文切换对性能的影响" class="headerlink" title="上下文切换对性能的影响"></a>上下文切换对性能的影响</h3><p>无论进程级别、线程级别、主动系统调用引发的上下文切换都会造成一定的性能损失。尽可能的减少系统调用实际上是减少上下文切换造成的性能损失。因为离 CPU 近的资源比如 L 级的 Cache，寄存器数据都要写回到主存，系统代码执行完要把主存数据读回来，相对 CPU 执行速度从主存操作数据非常慢。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;进程是一种资源单位，操作系统按照进程来分配资源管理资源。线程是进程内的，专门用来执行。  &lt;/p&gt;
&lt;h2 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h2&gt;&lt;p&gt;线程我们严格意义上来说指的是任务加
      
    
    </summary>
    
      <category term="操作系统" scheme="http://twh233.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://twh233.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://twh233.github.io/2020/09/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://twh233.github.io/2020/09/26/设计模式/</id>
    <published>2020-09-26T11:12:02.000Z</published>
    <updated>2020-09-26T11:12:44.267Z</updated>
    
    <content type="html"><![CDATA[<p>填坑，待补…..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;填坑，待补…..&lt;/p&gt;

      
    
    </summary>
    
      <category term="设计模式" scheme="http://twh233.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://twh233.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>http</title>
    <link href="http://twh233.github.io/2020/09/26/http/"/>
    <id>http://twh233.github.io/2020/09/26/http/</id>
    <published>2020-09-26T09:05:33.000Z</published>
    <updated>2020-09-26T11:11:20.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HTTP 协议，即超文本传输协议(Hypertext transfer protocol)。是一种详细规定了浏览器和<br>万维网(WWW = World Wide Web)服务器之间互相通信的规则，通过因特网传送万维网文档<br>的数据传送协议，可以传输文本，图片，视频等。  </p><img src="/2020/09/26/http/1.png"><p>简单快速：协议简单，通信速度快；<br>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记；<br>无状态：：HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状<br>态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据<br>量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p><h2 id="http工作原理"><a href="#http工作原理" class="headerlink" title="http工作原理"></a>http工作原理</h2><p>以下是 HTTP 请求/响应的步骤：<br>1、客户端连接到 Web 服务器<br>一个 HTTP 客户端，通常是浏览器，与 Web 服务器的 HTTP 端口（默认为 80）建立一个 TCP<br>套接字连接。例如，<a href="http://www.0voice.com。" target="_blank" rel="noopener">http://www.0voice.com。</a><br>2、发送 HTTP 请求<br>通过 TCP 套接字，客户端向 Web 服务器发送一个文本的请求报文，一个请求报文由请求行、<br>请求头部、空行和请求数据 4 部分组成。<br>3、服务器接受请求并返回 HTTP 响应<br>Web 服务器解析请求，定位请求资源。服务器将资源复本写到 TCP 套接字，由客户端读取。<br>一个响应由状态行、响应头部、空行和响应数据 4 部分组成。<br>4、释放连接 TCP 连接<br>若 connection 模式为 close，则服务器主动关闭 TCP 连接，客户端被动关闭连接，释放 TCP<br>连接;若 connection 模式为 keepalive，则该连接会保持一段时间，在该时间内可以继续接收<br>请求;<br>5、客户端浏览器解析 HTML 内容<br>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，<br>响应头告知以下为若干字节的 HTML 文档和文档的字符集。客户端浏览器读取响应数据<br>HTML，根据 HTML 的语法对其进行格式化，并在浏览器窗口中显示。  </p><h2 id="http请求方法"><a href="#http请求方法" class="headerlink" title="http请求方法"></a>http请求方法</h2><p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。<br>HTTP1.0 定义了三种请求方法: GET、POST 和 HEAD 方法。<br>HTTP1.1 新增了六种请求方法: OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。  </p><p>1 GET 请求指定的页面信息，并返回实体主体。<br>2 HEAD 类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取<br>报头<br>3 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。<br>数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/<br>或已有资源的修改。<br>4 PUT 从客户端向服务器传送的数据取代指定的文档的内容。<br>5 DELETE 请求服务器删除指定的页面。<br>6 CONNECT HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。<br>7 OPTIONS 允许客户端查看服务器的性能。<br>8 TRACE 回显服务器收到的请求，主要用于测试或诊断。<br>9 PATCH 是对 PUT 方法的补充，用来对已知资源进行局部更新 。  </p><h2 id="GET和POST区别"><a href="#GET和POST区别" class="headerlink" title="GET和POST区别"></a>GET和POST区别</h2><p>1、GET 提交的数据会放在 URL 之后，以?分割 URL 和传输数据，参数之间以&amp;相连，<br>如<a href="http://localhost:8600/user?name=test1&amp;id=123456" target="_blank" rel="noopener">http://localhost:8600/user?name=test1&amp;id=123456</a>. POST 方法是把提交的数据放在 HTTP<br>包的 Body 中。<br>2、GET 提交的数据大小有限制（因为浏览器对 URL 的长度有限制），而 POST 方法提交的<br>数据没有限制。<br>3、GET 方式需要使用 Request.QueryString 来取得变量的值，而 POST 方式通过 Request.Form<br>来获取变量的值。<br>4、GET 方式提交数据，会带来安全问题，比如一个登录页面，通过 GET 方式提交数据时，<br>用户名和密码将出现在 URL 上，如果页面可以被缓存或者其他人可以访问这台机器，就可<br>以从历史记录获得该用户的账号和密码。</p><h2 id="http响应头信息"><a href="#http响应头信息" class="headerlink" title="http响应头信息"></a>http响应头信息</h2><img src="/2020/09/26/http/2.png"><img src="/2020/09/26/http/3.png"><img src="/2020/09/26/http/4.png"><h2 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h2><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:<br>1xx：指示信息–表示请求已接收，继续处理<br>2xx：成功–表示请求已被成功接收、理解、接受<br>3xx：重定向–要完成请求必须进行更进一步的操作<br>4xx：客户端错误–请求有语法错误或请求无法实现<br>5xx：服务器端错误–服务器未能实现合法的请求  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;HTTP 协议，即超文本传输协议(Hypertext transfer protocol)。是一种详细规定了浏览器和&lt;br&gt;万维网(WWW 
      
    
    </summary>
    
      <category term="http" scheme="http://twh233.github.io/categories/http/"/>
    
    
      <category term="http" scheme="http://twh233.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="http://twh233.github.io/2020/09/24/nginx/"/>
    <id>http://twh233.github.io/2020/09/24/nginx/</id>
    <published>2020-09-24T15:20:20.000Z</published>
    <updated>2020-09-24T15:25:23.672Z</updated>
    
    <content type="html"><![CDATA[<p>负载均衡可以在多个层上去做，nginx只是在应用层上面的负载均衡。</p><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p>从配置入手</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 4; ##进程数</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">worker_connections 1024;  #连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">upstream backend &#123; #负载均衡</span><br><span class="line">server 192.168.142.128 weight=2;</span><br><span class="line">server 192.168.142.129 weight=1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 8888;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">client_max_body_size 100m; #客户端最大包体</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">#root /usr/local/nginx/html/;</span><br><span class="line">#proxy_pass http://192.168.142.128;</span><br><span class="line">proxy_pass http://backend;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /images/ &#123;</span><br><span class="line">root /usr/local/nginx/; #静态资源映射</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.(mp3|mp4) &#123;</span><br><span class="line">root /usr/local/nginx/media/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 9000;</span><br><span class="line"></span><br><span class="line">location ~ \.cgi &#123;</span><br><span class="line">fastcgi_pass 127.0.0.1:9001;</span><br><span class="line">fastcgi_index index.cgi;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME cgi$fastcgi_script_name;</span><br><span class="line">include ../conf/fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cgi应用于在线编程工具，通过nginx映射到cgi端口，实际上并没有进入Server服务器，只是在cgi进程做的处理。<br>fastcgi用进程池去处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;负载均衡可以在多个层上去做，nginx只是在应用层上面的负载均衡。&lt;/p&gt;
&lt;h2 id=&quot;初识&quot;&gt;&lt;a href=&quot;#初识&quot; class=&quot;headerlink&quot; title=&quot;初识&quot;&gt;&lt;/a&gt;初识&lt;/h2&gt;&lt;p&gt;从配置入手&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="nginx" scheme="http://twh233.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://twh233.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://twh233.github.io/2020/09/22/mysql/"/>
    <id>http://twh233.github.io/2020/09/22/mysql/</id>
    <published>2020-09-22T12:57:48.000Z</published>
    <updated>2020-09-23T15:44:39.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><img src="/2020/09/22/mysql/2.png"><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>事务四大特征：<br>原子性（Atomicity，或称不可分割性）、<br>一致性（Consistency）、<br>隔离性（Isolation，又称独立性）、<br>持久性（Durability）。<br>一致性：数据库在操作前和操作后，完整性不被破坏。<br>隔离性：多个事务可以同时执行，防止多个事务并发执行引起交叉执行数据不一致。<br>持久性：事务结束后，对数据的修改是永久的。</p><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>（1）读未提交：read uncommitted（2）读已提交：read committed<br>（3）可重复读：repeatable read（4）串行化：serializable  </p><img src="/2020/09/22/mysql/1.png"><h3 id="undolog"><a href="#undolog" class="headerlink" title="undolog"></a>undolog</h3><p>每一个事务都有undolog，事务开启时一个临时表存事务的操作，这个临时表就是undolog，一旦有错误就X掉这次事务。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>四条从效果上第一条影响最大，后面越来越小。<br>① SQL语句及索引的优化 ② 数据库表结构的优化<br>③ 系统配置的优化<br>④ 硬件的优化</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>表级锁<br>行级锁<br>页级锁  </p><h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><p>Myisam(表级锁) Innodb(行级锁)<br>1.为什么Myisam快？<br>因为Myisam B+树存的是引用，加载到内存快。 等Innodb加载完，Myisam都查完了<br>2.为什么Innodb不支持全文索引？<br>数据直接在叶子结点上，如果要全文索引，相当于复制了一份数据库，浪费空间  </p><h2 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h2><img src="/2020/09/22/mysql/3.png"><p>binlog实际是除了select以外所有操作数据库动作的记录，方便恢复数据库。master主动推送到slave结点的relay log，从结点io线程去读relay log然后在sql线程去更新数据库。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数值类型&quot;&gt;&lt;a href=&quot;#数值类型&quot; class=&quot;headerlink&quot; title=&quot;数值类型&quot;&gt;&lt;/a&gt;数值类型&lt;/h2&gt;&lt;img src=&quot;/2020/09/22/mysql/2.png&quot;&gt;
&lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; cla
      
    
    </summary>
    
      <category term="mysql" scheme="http://twh233.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://twh233.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>redis补充</title>
    <link href="http://twh233.github.io/2020/09/20/redis%E8%A1%A5%E5%85%85/"/>
    <id>http://twh233.github.io/2020/09/20/redis补充/</id>
    <published>2020-09-20T12:04:18.000Z</published>
    <updated>2020-09-26T08:39:49.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="扩容与缩容"><a href="#扩容与缩容" class="headerlink" title="扩容与缩容"></a>扩容与缩容</h2><p>扩容<br>当used &gt; size 的时候扩容，当进行持久化aof,rdb,script(lua事务) block的时候，如果used &gt; 5size 翻倍扩容<br>缩容<br>当used &lt; size * 0.1的时候缩容<br>扩容和缩容导致rehash<br>scan<br>遇到扩充时</p><h2 id="io多线程"><a href="#io多线程" class="headerlink" title="io多线程"></a>io多线程</h2><img src="/2020/09/20/redis补充/1.png"> <h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><p>当数据量少的时候用压缩列表<br>当数据量大于128用跳表实现</p><h2 id="redis与mongo的区别"><a href="#redis与mongo的区别" class="headerlink" title="redis与mongo的区别"></a>redis与mongo的区别</h2><img src="/2020/09/20/redis补充/2.png"><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><img src="/2020/09/20/redis补充/3.png"><h2 id="C语言使用Redis"><a href="#C语言使用Redis" class="headerlink" title="C语言使用Redis"></a>C语言使用Redis</h2><h3 id="编译hiredis"><a href="#编译hiredis" class="headerlink" title="编译hiredis"></a>编译hiredis</h3><p>进入 redis-6.0.3/deps/hiredis<br>$ make<br>$ sudo make install<br>mkdir -p /usr/local/include/hiredis /usr/local/include/hiredis/adapters /usr/local/lib<br>cp -pPR hiredis.h async.h read.h sds.h /usr/local/include/hiredis<br>cp -pPR adapters/*.h /usr/local/include/hiredis/adapters<br>cp -pPR libhiredis.so /usr/local/lib/libhiredis.so.0.14<br>cd /usr/local/lib &amp;&amp; ln -sf libhiredis.so.0.14 libhiredis.so<br>cp -pPR libhiredis.a /usr/local/lib<br>mkdir -p /usr/local/lib/pkgconfig<br>cp -pPR hiredis.pc /usr/local/lib/pkgconfig<br>可以看到头文件、和库文件的安装目录  </p><h3 id="连接Redis服务"><a href="#连接Redis服务" class="headerlink" title="连接Redis服务"></a>连接Redis服务</h3><img src="/2020/09/20/redis补充/4.png"><h3 id="授权-Auth"><a href="#授权-Auth" class="headerlink" title="授权 Auth"></a>授权 Auth</h3><img src="/2020/09/20/redis补充/5.png"><h3 id="redisCommand-详解"><a href="#redisCommand-详解" class="headerlink" title="redisCommand 详解"></a>redisCommand 详解</h3><p>原型<br>void <em>redisCommand(redisContext </em>c, const char *format, …);  </p><p>参数说明<br>这个函数是一个带有不定参数的。可以按着 format 格式给出对应的参数，这就和 printf 函数类似。<br>c 是一个 reidsConnect 函数返回的一个对象。  </p><p>返回值<br>返回值是一个 void 类型的指针，实际为指向一个 redisReply 类型的指针。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">redisReply 的定义</span><br><span class="line">/* This is the reply object returned by redisCommand() */</span><br><span class="line">typedef struct redisReply &#123;</span><br><span class="line"> /*命令执行结果的返回类型*/</span><br><span class="line"> int type; /* REDIS_REPLY_* */</span><br><span class="line"> /*存储执行结果返回为整数*/</span><br><span class="line"> long long integer; /* The integer when type is REDIS_REPLY_INTEGER */</span><br><span class="line"> /*字符串值的长度*/</span><br><span class="line"> size_t len; /* Length of string */</span><br><span class="line"> /*存储命令执行结果返回是字符串*/</span><br><span class="line"> char *str; /* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING */</span><br><span class="line"> /*返回结果是数组的大小*/</span><br><span class="line"> size_t elements; /* number of elements, for REDIS_REPLY_ARRAY */</span><br><span class="line"> /*存储执行结果返回是数组*/</span><br><span class="line"> struct redisReply **element; /* elements vector for REDIS_REPLY_ARRAY */</span><br><span class="line">&#125; redisReply;</span><br></pre></td></tr></table></figure></p><p>返回结果的类型 reply-&gt;type,reply 为 redisReply* 类型。<br>• REDIS_REPLY_STRING == 1:返回值是字符串,字符串储存在 redis-&gt;str 当中,字符串长度<br>为 redis-&gt;len。<br>• REDIS_REPLY_ARRAY == 2：返回值是数组，数组大小存在 redis-&gt;elements 里面，数组<br>值存储在 redis-&gt;element[i]里面。数组里面存储的是指向 redisReply 的指针，数组里<br>面的返回值可以通过 redis-&gt;element[i]-&gt;str 来访问，数组的结果里全是<br>type==REDIS_REPLY_STRING 的 redisReply 对象指针。<br>• REDIS_REPLY_INTEGER == 3：返回值为整数 long long。<br>• REDIS_REPLY_NIL==4：返回值为空表示执行结果为空。<br>• REDIS_REPLY_STATUS ==5：返回命令执行的状态，比如 set foo bar 返回的状态为 OK，<br>存储在 str 当中 reply-&gt;str == “OK”。<br>• REDIS_REPLY_ERROR ==6 ：命令执行错误,错误信息存放在 reply-&gt;str 当中。  </p><img src="/2020/09/20/redis补充/6.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;扩容与缩容&quot;&gt;&lt;a href=&quot;#扩容与缩容&quot; class=&quot;headerlink&quot; title=&quot;扩容与缩容&quot;&gt;&lt;/a&gt;扩容与缩容&lt;/h2&gt;&lt;p&gt;扩容&lt;br&gt;当used &amp;gt; size 的时候扩容，当进行持久化aof,rdb,script(lua事务) bl
      
    
    </summary>
    
      <category term="redis" scheme="http://twh233.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="http://twh233.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://twh233.github.io/2020/09/20/redis/"/>
    <id>http://twh233.github.io/2020/09/20/redis/</id>
    <published>2020-09-20T08:45:37.000Z</published>
    <updated>2020-09-20T11:14:22.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>基本操作: set key value;    get key;   del key;   mset;   mget;   strlen;   append;<br>数值增减 incr  decr<br>数据时效性 setex psetex<br>(user:id:3506728370:fans 12210947   json)</p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>基本操作: hset key field value;   hget key field;   hgetall key;   hdel key field1 [field2];   hmset;   hmget;  hlen(获取key数量);    hexists<br>扩展操作: hkeys;  hvals;  hincrby;   hincrbyfloat;  hsetnx<br>(京东购物车)</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>底层是双向链表<br>基本操作: lpush;   rpush;   lrange key start stop<br>(朋友圈点赞、最新消息展示)</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>基本操作: sadd;   smembers;   srem;   scard;   sismember;   srandmember;   spop<br>扩展操作: 交并补 sinter   sunion   sdiff;    到指定集合   sinterstore destination key1 key2 sunionstore;   sdiffstore   smove<br>(热点歌单推荐、实现黑白名单)</p><h3 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted_set"></a>sorted_set</h3><p>基本操作: zadd key score1 member1 [score2 member2];   zrange key start stop [withscores];   zrevrange   ;zrem   ;<br>zrangebyscore key min max [withscores] [limit];   zrevrangebyscore;   zremrangebyrank;   zremrangebyscore;   zcard;   zcount;   zinterstore;   zunionstore;<br>扩展操作: zrank key member;   zrevrank key member;   zscore key member;   zincrby key increment member;   </p><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>基本操作: del key;   exists key;   type key;<br>扩展操作: expire key seconds;   pexpire key milliseconds;   expireat(timestamp);   pexpireat;   ttl key(有效时间);   pttl;   persist key(切换key从时效性转换到永久性);<br>其他操作: rename key newkey;   renamenx key newkey(如果对应的新newkey不存在再执行);   sort;   </p><h3 id="db"><a href="#db" class="headerlink" title="db"></a>db</h3><p>基本操作: select index;   quit;   ping;   echo massage;<br>其他操作: move key db;   dbsize;   flushdb   flushall;</p><h1 id="Redis高级"><a href="#Redis高级" class="headerlink" title="Redis高级"></a>Redis高级</h1><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>1.将当先数据状态进行保存<br>2.将数据的操作过程进行保存</p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>1.save。save指令的执行会阻塞当前Redis服务器，知道当前RDB过程完成为止<br>2.bgsave。<br><img src="/2020/09/20/redis/1.png"></p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>AOF重写<br>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将对同一个数据的若干条命令执行结果转化成最终结果数据对应的指令进行记录。<br><img src="/2020/09/20/redis/2.png"></p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>开启: multi<br>执行: exec<br>取消: discard<br>锁: watch key (watch 监控的指令一旦有人修改了，那么事务不会在执行)  取消锁: unwatch<br>分布式锁: setnx lock-key value  有值返回失败，无值返回设置成功     expire lock-key second(解决死锁)    del lock-key  </p><h3 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h3><p>定时删除<br>惰性删除<br>定期删除<br><img src="/2020/09/20/redis/3.png"><br>逐出策略<br><img src="/2020/09/20/redis/4.png"></p><h3 id="高级数据类型"><a href="#高级数据类型" class="headerlink" title="高级数据类型"></a>高级数据类型</h3><p>bitmaps:<br>setbit time bit value;  bitcount<br>HyperLogLog:<br>pfadd;  pfcount;  pfmerge<br>GEO:<br>geoadd key longitude latitude member;   geopos key member;   geodist key member member;   georadius;   georadiusbymember;   geohash;</p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><img src="/2020/09/20/redis/5.png">  <img src="/2020/09/20/redis/6.png"><img src="/2020/09/20/redis/7.png"><img src="/2020/09/20/redis/8.png"><img src="/2020/09/20/redis/9.png"><img src="/2020/09/20/redis/10.png"><img src="/2020/09/20/redis/11.png"><p>主从复制常见问题:<br>频繁的全量复制<br><img src="/2020/09/20/redis/12.png"><br><img src="/2020/09/20/redis/13.png"><br>网络:<br><img src="/2020/09/20/redis/14.png"><br><img src="/2020/09/20/redis/15.png"><br>数据不一致:<br><img src="/2020/09/20/redis/16.png"></p><h3 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h3><img src="/2020/09/20/redis/17.png"><img src="/2020/09/20/redis/18.png"><img src="/2020/09/20/redis/19.png"><h3 id="集群-1"><a href="#集群-1" class="headerlink" title="集群"></a>集群</h3><img src="/2020/09/20/redis/20.png"><h1 id="Redis应用"><a href="#Redis应用" class="headerlink" title="Redis应用"></a>Redis应用</h1><h2 id="企业级解决方案"><a href="#企业级解决方案" class="headerlink" title="企业级解决方案"></a>企业级解决方案</h2><h3 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h3><p>问题:<br>1.请求数量较高<br>2.主从之间数据吞吐量较大，数据同步操作频度较高<br><img src="/2020/09/20/redis/21.png"><br>总结:<br>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>问题:<br>在一个较短的时间内，缓存中较多的key集中过期。我们去大量的访问了对应数据。<br><img src="/2020/09/20/redis/22.png"><br><img src="/2020/09/20/redis/23.png"><br>总结:<br>缓存雪崩就算瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的出现，配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。  </p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>问题:<br>1.Redis中某个key过期，该key访问量巨大<br>2.多个数据请求从服务器直接压到Redis后，均未命中<br>3.Redis在短时间内发起了大量对数据库中同一数据的访问<br><img src="/2020/09/20/redis/24.png"><br>总结:<br>缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即使调整策略。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>问题:<br>1.Redis中大面积出现未命中<br>2.获取的数据在数据库中也不存在，数据库查询未得到对应数据<br><img src="/2020/09/20/redis/25.png"><br>总结:<br>缓存击穿访问了不存在的数据，跳过了合法数据的Redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis基础&quot;&gt;&lt;a href=&quot;#Redis基础&quot; class=&quot;headerlink&quot; title=&quot;Redis基础&quot;&gt;&lt;/a&gt;Redis基础&lt;/h1&gt;&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="redis" scheme="http://twh233.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="http://twh233.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>select/poll/epoll</title>
    <link href="http://twh233.github.io/2020/09/13/select-poll-epoll/"/>
    <id>http://twh233.github.io/2020/09/13/select-poll-epoll/</id>
    <published>2020-09-13T11:55:31.000Z</published>
    <updated>2020-09-13T12:14:15.031Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/09/13/select-poll-epoll/1.jpg"><img src="/2020/09/13/select-poll-epoll/2.jpg"><p><a href="https://www.bilibili.com/video/BV1qJ411w7du" target="_blank" rel="noopener">传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/09/13/select-poll-epoll/1.jpg&quot;&gt;
&lt;img src=&quot;/2020/09/13/select-poll-epoll/2.jpg&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/B
      
    
    </summary>
    
      <category term="linux" scheme="http://twh233.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://twh233.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>计网概括</title>
    <link href="http://twh233.github.io/2020/09/13/%E8%AE%A1%E7%BD%91%E6%A6%82%E6%8B%AC/"/>
    <id>http://twh233.github.io/2020/09/13/计网概括/</id>
    <published>2020-09-13T11:44:08.000Z</published>
    <updated>2020-09-13T12:14:00.150Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/09/13/计网概括/1.jpg"><img src="/2020/09/13/计网概括/2.jpg"><p><a href="https://www.bilibili.com/video/BV124411k7uV" target="_blank" rel="noopener">传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/09/13/计网概括/1.jpg&quot;&gt;
&lt;img src=&quot;/2020/09/13/计网概括/2.jpg&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV124411k7uV&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="计网" scheme="http://twh233.github.io/categories/%E8%AE%A1%E7%BD%91/"/>
    
    
      <category term="计网" scheme="http://twh233.github.io/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>平衡二叉树与红黑树</title>
    <link href="http://twh233.github.io/2020/09/13/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8E%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://twh233.github.io/2020/09/13/平衡二叉树与红黑树/</id>
    <published>2020-09-13T11:41:19.000Z</published>
    <updated>2020-09-14T13:06:21.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文转自<a href="https://blog.csdn.net/weewqrer/article/details/51866488" target="_blank" rel="noopener">这里</a></p><h3 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h3><p>STL（标准模板库）中在set map是基于红黑树实现的。<br>Java中在TreeMap使用的也是红黑树。<br>epoll在内核中的实现，用红黑树管理事件块。<br>linux进程调度Completely Fair Scheduler,用红黑树管理进程控制块。  </p><h3 id="红黑树-VS-AVL树"><a href="#红黑树-VS-AVL树" class="headerlink" title="红黑树 VS AVL树"></a>红黑树 VS AVL树</h3><p>常见的平衡树有红黑树和AVL平衡树，为什么STL和linux都使用红黑树作为平衡树的实现？大概有以下几个原因：</p><p>从实现细节上来讲，如果插入一个结点引起了树的不平衡，AVL树和红黑树都最多需要2次旋转操作，即两者都是O(1)；但是在删除node引起树的不平衡时，最坏情况下，AVL需要维护从被删node到root这条路径上所有node的平衡性，因此需要旋转的量级O(logN)，而RB-Tree最多只需3次旋转，只需要O(1)的复杂度</p><p>从两种平衡树对平衡的要求来讲，AVL的结构相较RB-Tree来说更为平衡，在插入和删除node更容易引起Tree的unbalance，因此在大量数据需要插入或者删除时，AVL需要rebalance的频率会更高。因此，RB-Tree在需要大量插入和删除node的场景下，效率更高。自然，由于AVL高度平衡，因此AVL的search效率更高。</p><p>总体来说，RB-tree的统计性能是高于AVL的。</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="红黑树性质"><a href="#红黑树性质" class="headerlink" title="红黑树性质"></a>红黑树性质</h3><p>1.列表项结点是红色或黑色。<br>2.根是黑色。<br>3.所有叶子都是黑色（叶子是NIL结点）。<br>4.每个红色结点必须有两个黑色的子结点。（从每个叶子到根的所有路径上不能有两个连续的红色结点。）<br>5.从任一结点到其每个叶子的所有简单路径都包含相同数目的黑色结点。<br>为了便于处理红黑树中的边界情况，使用一个哨兵来代表所有的NIL结点，也就是说所有指向NIL的指针都指向哨兵T.nil。</p><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><img src="/2020/09/13/平衡二叉树与红黑树/1.png"><p>解释：<br>x的右节点换成y的左节点<br>x的右节点的父亲换成x<br>y名正言顺成为x的父亲的儿子<br>y的父亲发现自己儿子换了，看看是哪边的儿子换了<br>现在跟x相关的结点都换好了，那么y名正言顺成为x的爹  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">*@brief rbt_left_rotate</span><br><span class="line">*@param[in] T 树根</span><br><span class="line">*@param[in] x 要进行旋转的节点</span><br><span class="line">*/</span><br><span class="line">void rbt_left_rotate( rbt_root_t* T, rbt_t* x)&#123;</span><br><span class="line">    rbt_t* y = x-&gt;right;</span><br><span class="line"></span><br><span class="line">    x-&gt;right = y-&gt;left;</span><br><span class="line">    if(x-&gt;right != T-&gt;nil)//更新某结点的父亲时，要确定此结点不是T.nil</span><br><span class="line">        x-&gt;right-&gt;p = x;</span><br><span class="line"></span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    if(x-&gt;p == T-&gt;nil)&#123;//如果x以前是树根，那么现在树根易主了</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    &#125;else if(y-&gt;key &lt; y-&gt;p-&gt;key)</span><br><span class="line">        y-&gt;p-&gt;left = y;</span><br><span class="line">    else</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    y-&gt;left = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*@brief rbt_right_rotate</span><br><span class="line">*@param[in] 树根</span><br><span class="line">*@param[in] 要进行旋转的节点</span><br><span class="line">*/</span><br><span class="line">void rbt_right_rotate( rbt_root_t* T, rbt_t* x)&#123;</span><br><span class="line">    rbt_t * y = x-&gt;left;</span><br><span class="line">    x-&gt;left = y-&gt;right;</span><br><span class="line"></span><br><span class="line">    if(T-&gt;nil != x-&gt;left)</span><br><span class="line">        x-&gt;left-&gt;p = x;</span><br><span class="line"></span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    if(y-&gt;p == T-&gt;nil)</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    else if(y-&gt;key &lt; y-&gt;p-&gt;key)</span><br><span class="line">        y-&gt;p-&gt;left= y;</span><br><span class="line">    else</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    y-&gt;right = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>1.新插入的节点一定是红色的。（如果是黑色的，会破坏条件5）<br>2.如果新插入的节点的父亲是黑色的，则没有破坏任何性质，那么插入完成。<br>3.如果插入节点的父节点是红色, 破坏了性质4. 故插入算法就是通过重新着色或旋转, 来维持性质</p><p>此时要记住一件事事情，插入时总是要考虑它的叔叔，删除时总要考虑它的兄弟。而且插入时维护的主要是颜色（性质4），而删除时维护的主要是黑色结点数量（性质5）</p><p><strong>情况1</strong>：</p><p>N为红，P为红（GP一定为黑），U为红。<br><img src="/2020/09/13/平衡二叉树与红黑树/2.png"></p><p>下面会说明我们可以通过一种特殊的处理把这种情况避免掉。</p><p>那为什么要避免这种情况呢？因为这种情况一般是通过颜色翻转来处理的，也就是把P U换成黑色，把GP抱成红色，但是GP的父亲如果是红色的话又会违反红黑树的性质。</p><p><strong>情况2</strong>：</p><p>N，P都为红（GP一定为黑)，U为黑<br><img src="/2020/09/13/平衡二叉树与红黑树/3.png"></p><p>根据境像，情况2可细分为4种情况，如下：</p><img src="/2020/09/13/平衡二叉树与红黑树/4.png"><p>但是这四种具体情况的处理手法是一样的，都是通过颜色翻转与旋转来处理的。下面我们通过情况2.1和2.2来说明一下处理方法：<br>情况2.2通过调用left_rotate(T,p)变成情况2.1;<br>情况2.1通过交换GP与P的颜色，然后调用right_rotate(T,GP)，此时不再违反任何性质。</p><p>情况2.3和2.4分别是2.1和2.2的境像。</p><p>如何避免情况1</p><p>令X = T.root,在向下遍历的过程中，我们如果遇到X.right.color == x.left.color == RED时我们将x与它孩子的颜色翻转，即把x涂成红色，把x.right和x.left涂成黑色。</p><p>如果x的父亲为黑色，没有违反性质；如果x的父亲为红色，那么可以把x当成新插入的红色结点N，那么只需要处理情况2即可。</p><p>至此，插入完成，具体实现可以看完整代码部分，代码也有必要的注释。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>首先找到要删除的结点，我们定义它为 z</p><p>如果要删除 z 结点，那么就让 z 的后继来代替 z 的位置即可。 如果z是红色的，那么操作便完成了，删除一个红色结点没有违反任何性质。但如果z是黑色的，那么我们删除一个黑色结点，便违反了性质5，造成黑色结点数量的左右不平衡。只要分析出删除一个黑色结点会遇到哪些情况即可。</p><p>如果 z 的两个孩子都不是T.nil，那么我们在 z 的右子树中找出最小的结点 m，把 m 结点的值赋给 z （而不是把m移植到z的位置，也就不用考虑颜色问题，那么我们要删除的结点就成为 m 了。m 肯定没有左孩子。令 z 重新指向 m</p><p>找到要删除的结点 z 之后，我们用 z 的孩子(记作 x )来取代 z的位置（即使z.right == T.nil） 。rbt_transplant(T,z,z.right);</p><p>此时用到下面一段代码，实现用v代替u<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void rbt_transplant(rbt_root_t* T, rbt_t* u, rbt_t* v)&#123;</span><br><span class="line">    if(u-&gt;p == T-&gt;nil)</span><br><span class="line">        T-&gt;root = v;</span><br><span class="line">    else if(u == u-&gt;p-&gt;left)</span><br><span class="line">        u-&gt;p-&gt;left =v;</span><br><span class="line">    else</span><br><span class="line">        u-&gt;p-&gt;right = v;</span><br><span class="line">    v-&gt;p = u-&gt;p;//即使v是T.nil也可以执行这一行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到目前为止，如果要被删除的 z 结点是红色的，那么程序就结束了。但是如果 z 是黑色的，所以删除z之后z这边少了一个黑色结点，会违反性质5，此时分为4种情况（x 是左孩子 和 x 是右孩子分别有4种情况，现在只讨论x是左孩子的情况）：</p><p><strong>情况1</strong>：</p><p>x的兄弟w是红色的，那么它们的父亲、w的孩子都是黑色的。</p><p>这种情况下只能做一种无损的操作，通过交换颜色再旋转，对树的性质不会产生影响，所以从根到x结点的路径上少的一个黑色结点也不会补上。</p><p>交换p与w的颜色，再对p进行左旋操之后，x的新兄弟就为黑色，情况变成了2 3 4中的一种.</p><img src="/2020/09/13/平衡二叉树与红黑树/5.png"><p>图中x为白色，表示我们不关心x的颜色。</p><p><strong>情况2</strong>：</p><p>x的兄弟w是黑色，而且w的两个孩子都是黑色。</p><p>此时可以细分为2种情况，但无论哪种情况，我们要进行的操作都是一样的，都是将w涂成红色，将p涂成黑色。</p><p>如果是情况2.1(有可能由情况1发展过来的)，由于上述操作为x那边补上了一个黑色（从根到x在路径上多了一个黑色结点），此时红黑树性质5得到满足，程序结束。</p><p>如果是情况2.2, 经过上述操作后，P的右子树也少了一个黑色结点，令P作为新的X继续循环。</p><img src="/2020/09/13/平衡二叉树与红黑树/6.png"><p><strong>情况3</strong>:</p><p>W是黑色有，w在左孩子是红色的，W的右孩子是黑色的。</p><p>通过交换L与W的颜色，再对W进行右旋操作。这种操作也不会对红黑树性质产生影响，此时进入情况4，我们会看到通过情况4中的操作最终使红黑树性质得到满足，结束程序。</p><p>图中最后边的R结点没有画出来，因为我们不关心它了</p><img src="/2020/09/13/平衡二叉树与红黑树/7.png"><p><strong>情况4</strong>:</p><p>w是黑色的，w的右孩子是红色的。</p><p>把w涂成p的颜色，把P涂成黑色，R涂成黑色，左旋P。此时从根到x在路径上多了一个黑色结点，程序结束。</p><img src="/2020/09/13/平衡二叉树与红黑树/8.png"><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdafx.h&gt;</span><br><span class="line">#include&lt;malloc.h&gt;</span><br><span class="line">#include &lt;assert.h&gt;</span><br><span class="line"></span><br><span class="line">//版权声明：原创不易，转载请注明转自[weewqrer 红黑树](http://blog.csdn.net/weewqrer/article/details/51866488)</span><br><span class="line"></span><br><span class="line">//红黑树</span><br><span class="line">typedef enum ColorType &#123;RED, BLACK&#125; ColorType;</span><br><span class="line">typedef struct rbt_t&#123;</span><br><span class="line">    int key;</span><br><span class="line">    rbt_t * left;</span><br><span class="line">    rbt_t * right;</span><br><span class="line">    rbt_t * p;</span><br><span class="line">    ColorType color;</span><br><span class="line">&#125;rbt_t;</span><br><span class="line"></span><br><span class="line">typedef struct rbt_root_t&#123;</span><br><span class="line">    rbt_t* root;</span><br><span class="line">    rbt_t* nil;</span><br><span class="line">&#125;rbt_root_t;</span><br><span class="line"></span><br><span class="line">//函数声明</span><br><span class="line">rbt_root_t* rbt_init(void);</span><br><span class="line">static void rbt_handleReorient(rbt_root_t* T, rbt_t* x, int k);</span><br><span class="line">rbt_root_t* rbt_insert(rbt_root_t* &amp;T, int k);</span><br><span class="line">rbt_root_t* rbt_delete(rbt_root_t* &amp;T, int k);</span><br><span class="line"></span><br><span class="line">void rbt_transplant(rbt_root_t* T, rbt_t* u, rbt_t* v);</span><br><span class="line"></span><br><span class="line">static void rbt_left_rotate( rbt_root_t* T, rbt_t* x);</span><br><span class="line">static void rbt_right_rotate( rbt_root_t* T, rbt_t* x);</span><br><span class="line"></span><br><span class="line">void rbt_inPrint(const rbt_root_t* T, rbt_t* t);</span><br><span class="line">void rbt_prePrint(const rbt_t * T, rbt_t* t);</span><br><span class="line">void rbt_print(const rbt_root_t* T);</span><br><span class="line"></span><br><span class="line">static rbt_t* rbt_findMin(rbt_root_t * T, rbt_t* t);</span><br><span class="line">static rbt_t* rbt_findMax(rbt_root_t * T, rbt_t* t);</span><br><span class="line"></span><br><span class="line">static rbt_t* rbt_findMin(rbt_root_t * T, rbt_t* t)&#123;</span><br><span class="line">    if(t == T-&gt;nil) return T-&gt;nil;</span><br><span class="line"></span><br><span class="line">    while(t-&gt;left != T-&gt;nil)</span><br><span class="line">        t = t-&gt;left;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line">static rbt_t* rbt_findMax(rbt_root_t * T, rbt_t* t)&#123;</span><br><span class="line">    if(t == T-&gt;nil) return T-&gt;nil;</span><br><span class="line"></span><br><span class="line">    while(t-&gt;right != T-&gt;nil)</span><br><span class="line">        t = t-&gt;right;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*@brief rbt_init 初始化</span><br><span class="line">*/</span><br><span class="line">rbt_root_t* rbt_init(void)&#123;</span><br><span class="line">    rbt_root_t* T;</span><br><span class="line"></span><br><span class="line">    T = (rbt_root_t*)malloc(sizeof(rbt_root_t));</span><br><span class="line">    assert( NULL != T);</span><br><span class="line"></span><br><span class="line">    T-&gt;nil = (rbt_t*)malloc(sizeof(rbt_t));</span><br><span class="line">    assert(NULL != T-&gt;nil);</span><br><span class="line">    T-&gt;nil-&gt;color = BLACK;</span><br><span class="line">    T-&gt;nil-&gt;left = T-&gt;nil-&gt;right = NULL;</span><br><span class="line">    T-&gt;nil-&gt;p = NULL;</span><br><span class="line"></span><br><span class="line">    T-&gt;root = T-&gt;nil;</span><br><span class="line"></span><br><span class="line">    return T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*@brief rbt_handleReorient  内部函数 由rbt_insert调用</span><br><span class="line">*      在两种情况下调用这个函数：</span><br><span class="line">* 1 x有连个红色儿子</span><br><span class="line">* 2 x为新插入的结点</span><br><span class="line">*</span><br><span class="line">*/ </span><br><span class="line">void rbt_handleReorient(rbt_root_t* T, rbt_t* x, int k)&#123;</span><br><span class="line"></span><br><span class="line">    //在第一种情况下，进行颜色翻转； 在第二种情况下，相当于对新插入的x点初始化</span><br><span class="line">    x-&gt;color = RED;</span><br><span class="line">    x-&gt;left-&gt;color = x-&gt;right-&gt;color = BLACK;</span><br><span class="line"></span><br><span class="line">    //如果x.p为红色，那么x.p一定不是根，x.p.p一定不是T.nil，而且为黑色</span><br><span class="line">    if(  RED == x-&gt;p-&gt;color)&#123;</span><br><span class="line">        x-&gt;p-&gt;p-&gt;color = RED;//此时x, p, x.p.p都为红</span><br><span class="line"></span><br><span class="line">        if(x-&gt;p-&gt;key &lt; x-&gt;p-&gt;p-&gt;key)&#123;</span><br><span class="line">            if(k &gt; x-&gt;p-&gt;key)&#123;</span><br><span class="line">                x-&gt;color = BLACK;//小心地处理颜色</span><br><span class="line">                rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">                rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;//小心地处理颜色</span><br><span class="line">                rbt_right_rotate(T,x-&gt;p-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            if(k &lt; x-&gt;p-&gt;key)&#123;</span><br><span class="line">                x-&gt;color = BLACK;</span><br><span class="line">                rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">                rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                rbt_left_rotate(T,x-&gt;p-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T-&gt;root-&gt;color = BLACK;//无条件令根为黑色</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*@brief brt_insert 插入</span><br><span class="line">*1 新插入的结点一定是红色的，如果是黑色的，会破坏条件4（每个结点到null叶结点的每条路径有同样数目的黑色结点）</span><br><span class="line">*2 如果新插入的结点的父亲是黑色的，那么插入完成。 如果父亲是红色的，那么做一个旋转即可。（前提是叔叔是黑色的）</span><br><span class="line">*3 我们这个插入要保证其叔叔是黑色的。也就是在x下沉过程中，不允许存在两个红色结点肩并肩。</span><br><span class="line">*/</span><br><span class="line">rbt_root_t* rbt_insert(rbt_root_t* &amp;T, int k)&#123;</span><br><span class="line"></span><br><span class="line">    rbt_t * x, *p;</span><br><span class="line">    x = T-&gt;root;</span><br><span class="line">    p = x;</span><br><span class="line"></span><br><span class="line">    //令x下沉到叶子上，而且保证一路上不会有同时为红色的兄弟</span><br><span class="line">    while( x != T-&gt;nil)&#123;        </span><br><span class="line">        //</span><br><span class="line">        //保证没有一对兄弟同时为红色， 为什么要这么做？</span><br><span class="line">        if(x != T-&gt;nil)         </span><br><span class="line">            if(x-&gt;left-&gt;color == RED &amp;&amp; x-&gt;right-&gt;color == RED)</span><br><span class="line">                rbt_handleReorient(T,x,k);</span><br><span class="line"></span><br><span class="line">        p = x;</span><br><span class="line">        if(k&lt;x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        else if(k&gt;x-&gt;key)</span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">        else&#123;</span><br><span class="line">            printf(&quot;\n%d已存在\n&quot;,k);</span><br><span class="line">            return T;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //为x分配空间，并对其进行初始化</span><br><span class="line">    x = (rbt_t *)malloc(sizeof(rbt_t));</span><br><span class="line">    assert(NULL != x);</span><br><span class="line">    x-&gt;key = k;</span><br><span class="line">    x-&gt;color = RED;</span><br><span class="line">    x-&gt;left = x-&gt;right = T-&gt;nil;</span><br><span class="line">    x-&gt;p = p;</span><br><span class="line"></span><br><span class="line">    //让x的父亲指向x</span><br><span class="line">    if(T-&gt;root == T-&gt;nil)</span><br><span class="line">        T-&gt;root = x;        </span><br><span class="line">    else if(k &lt; p-&gt;key)</span><br><span class="line">        p-&gt;left = x;</span><br><span class="line">    else</span><br><span class="line">        p-&gt;right = x;</span><br><span class="line"></span><br><span class="line">    //因为一路下来，如果x的父亲是红色，那么x的叔叔肯定不是红色了，这个时候只需要做一下翻转即可。</span><br><span class="line">    rbt_handleReorient(T,x,k);</span><br><span class="line"></span><br><span class="line">    return T;</span><br><span class="line">&#125;</span><br><span class="line">void rbt_transplant(rbt_root_t* T, rbt_t* u, rbt_t* v)&#123;</span><br><span class="line">    if(u-&gt;p == T-&gt;nil)</span><br><span class="line">        T-&gt;root = v;</span><br><span class="line">    else if(u == u-&gt;p-&gt;left)</span><br><span class="line">        u-&gt;p-&gt;left =v;</span><br><span class="line">    else</span><br><span class="line">        u-&gt;p-&gt;right = v;</span><br><span class="line">    v-&gt;p = u-&gt;p;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*@brief rbt_delete 从树中删除 k</span><br><span class="line">*</span><br><span class="line">*</span><br><span class="line">*/</span><br><span class="line">rbt_root_t* rbt_delete(rbt_root_t* &amp;T, int k)&#123;</span><br><span class="line">    assert(T != NULL);</span><br><span class="line">    if(NULL == T-&gt;root) return T;</span><br><span class="line"></span><br><span class="line">    //找到要被删除的叶子结点</span><br><span class="line">    rbt_t * toDelete = T-&gt;root; </span><br><span class="line">    rbt_t * x;</span><br><span class="line"></span><br><span class="line">    //找到值为k的结点</span><br><span class="line">    while(toDelete != T-&gt;nil &amp;&amp; toDelete-&gt;key != k)&#123;</span><br><span class="line">        if(k&lt;toDelete-&gt;key)</span><br><span class="line">            toDelete = toDelete-&gt;left;</span><br><span class="line">        else if(k&gt;toDelete-&gt;key)</span><br><span class="line">            toDelete = toDelete-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(toDelete == T-&gt;nil)&#123;</span><br><span class="line">        printf(&quot;\n%d 不存在\n&quot;,k);</span><br><span class="line">        return T;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //如果两个孩子，就找到右子树中最小的代替, alternative最多有一个右孩子</span><br><span class="line">    if(toDelete-&gt;left != T-&gt;nil &amp;&amp; toDelete-&gt;right != T-&gt;nil)&#123;</span><br><span class="line">        rbt_t* alternative = rbt_findMin(T, toDelete-&gt;right);</span><br><span class="line">        k = toDelete-&gt;key = alternative-&gt;key;</span><br><span class="line">        toDelete = alternative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(toDelete-&gt;left == T-&gt;nil)&#123;</span><br><span class="line">        x = toDelete-&gt;right;</span><br><span class="line">        rbt_transplant(T,toDelete,toDelete-&gt;right);</span><br><span class="line">    &#125;else if(toDelete-&gt;right == T-&gt;nil)&#123;</span><br><span class="line">        x = toDelete-&gt;left;</span><br><span class="line">        rbt_transplant(T,toDelete,toDelete-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if(toDelete-&gt;color == BLACK)&#123;</span><br><span class="line">        //x不是todelete，而是用于代替x的那个</span><br><span class="line">        //如果x颜色为红色的，把x涂成黑色即可， 否则 从根到x处少了一个黑色结点，导致不平衡</span><br><span class="line">        while(x != T-&gt;root &amp;&amp; x-&gt;color == BLACK)&#123;</span><br><span class="line">            if(x == x-&gt;p-&gt;left)&#123;</span><br><span class="line">                rbt_t* w = x-&gt;p-&gt;right;</span><br><span class="line"></span><br><span class="line">                //情况1 x的兄弟是红色的，通过</span><br><span class="line">                if(RED == w-&gt;color)&#123;</span><br><span class="line">                    w-&gt;color = BLACK;</span><br><span class="line">                    w-&gt;p-&gt;color = RED;</span><br><span class="line">                    rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">                    w = x-&gt;p-&gt;right;</span><br><span class="line">                &#125;//处理完情况1之后，w.color== BLACK ， 情况就变成2 3 4 了</span><br><span class="line"></span><br><span class="line">                //情况2 x的兄弟是黑色的，并且其儿子都是黑色的。</span><br><span class="line">                if(w-&gt;left-&gt;color == BLACK &amp;&amp; w-&gt;right-&gt;color == BLACK)&#123;</span><br><span class="line">                    if(x-&gt;p-&gt;color == RED)&#123;</span><br><span class="line">                        x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">                        break;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line">                        x = x-&gt;p;//x.p左右是平衡的，但是x.p处少了一个黑结点，所以把x.p作为新的x继续循环</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //情况3 w为黑色的，左孩子为红色。（走到这一步，说明w左右不同时为黑色。）</span><br><span class="line">                if(w-&gt;right-&gt;color == BLACK)&#123;</span><br><span class="line">                    w-&gt;left-&gt;color = BLACK;</span><br><span class="line">                    w-&gt;color = RED;</span><br><span class="line">                    rbt_right_rotate(T,w);</span><br><span class="line">                    w = x-&gt;p-&gt;right;</span><br><span class="line">                &#125;//处理完之后，变成情况4</span><br><span class="line"></span><br><span class="line">                //情况4 走到这一步说明w为黑色， w的左孩子为黑色， 右孩子为红色。</span><br><span class="line"></span><br><span class="line">                w-&gt;color=x-&gt;p-&gt;color;</span><br><span class="line">                x-&gt;p-&gt;color=BLACK;</span><br><span class="line">                w-&gt;right-&gt;color=BLACK;</span><br><span class="line">                rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">                x = T-&gt;root;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                rbt_t* w = x-&gt;p-&gt;left;</span><br><span class="line">                //1</span><br><span class="line">                if(w-&gt;color == RED)&#123;</span><br><span class="line">                    w-&gt;color = BLACK;</span><br><span class="line">                    x-&gt;p-&gt;color = RED;</span><br><span class="line">                    rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">                    w = x-&gt;p-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">                //2</span><br><span class="line">                if(w-&gt;left-&gt;color==BLACK &amp;&amp; w-&gt;right-&gt;color == BLACK)&#123;</span><br><span class="line">                    if(x-&gt;p-&gt;color == RED)&#123;</span><br><span class="line">                        x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line">                        x = x-&gt;p;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //3</span><br><span class="line">                if(w-&gt;left-&gt;color == BLACK)&#123;</span><br><span class="line">                    w-&gt;color = RED;</span><br><span class="line">                    w-&gt;right-&gt;color = BLACK;</span><br><span class="line">                    w = x-&gt;p-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //4</span><br><span class="line">                w-&gt;color=w-&gt;p-&gt;color;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                w-&gt;left-&gt;color = BLACK;</span><br><span class="line">                rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">                x = T-&gt;root;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        x-&gt;color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //放心删除todelete 吧</span><br><span class="line">    free(toDelete);</span><br><span class="line"></span><br><span class="line">    return T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*@brief rbt_left_rotate</span><br><span class="line">*@param[in] T 树根</span><br><span class="line">*@param[in] x 要进行旋转的结点</span><br><span class="line">*/</span><br><span class="line">void rbt_left_rotate( rbt_root_t* T, rbt_t* x)&#123;</span><br><span class="line">    rbt_t* y = x-&gt;right;</span><br><span class="line"></span><br><span class="line">    x-&gt;right = y-&gt;left;</span><br><span class="line">    if(x-&gt;right != T-&gt;nil)</span><br><span class="line">        x-&gt;right-&gt;p = x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    if(y-&gt;p == T-&gt;nil)&#123;</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    &#125;else if(y-&gt;key &lt; y-&gt;p-&gt;key)</span><br><span class="line">        y-&gt;p-&gt;left = y;</span><br><span class="line">    else</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    y-&gt;left = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">*@brief rbt_right_rotate</span><br><span class="line">*@param[in] 树根</span><br><span class="line">*@param[in] 要进行旋转的结点</span><br><span class="line">*/</span><br><span class="line">void rbt_right_rotate( rbt_root_t* T, rbt_t* x)&#123;</span><br><span class="line">    rbt_t * y = x-&gt;left;</span><br><span class="line">    x-&gt;left = y-&gt;right;</span><br><span class="line"></span><br><span class="line">    if(T-&gt;nil != x-&gt;left)</span><br><span class="line">        x-&gt;left-&gt;p = x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    if(y-&gt;p == T-&gt;nil)</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    else if(y-&gt;key &lt; y-&gt;p-&gt;key)</span><br><span class="line">        y-&gt;p-&gt;left= y;</span><br><span class="line">    else</span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    y-&gt;right = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br><span class="line">void rbt_prePrint(const rbt_root_t* T, rbt_t* t)&#123;</span><br><span class="line">    if(T-&gt;nil == t)return ;</span><br><span class="line">    if(t-&gt;color == RED)</span><br><span class="line">        printf(&quot;%3dR&quot;,t-&gt;key);</span><br><span class="line">    else</span><br><span class="line">        printf(&quot;%3dB&quot;,t-&gt;key);</span><br><span class="line">    rbt_prePrint(T,t-&gt;left);</span><br><span class="line">    rbt_prePrint(T,t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">void rbt_inPrint(const rbt_root_t* T, rbt_t* t)&#123;</span><br><span class="line">    if(T-&gt;nil == t)return ;</span><br><span class="line">    rbt_inPrint(T,t-&gt;left);</span><br><span class="line">    if(t-&gt;color == RED)</span><br><span class="line">        printf(&quot;%3dR&quot;,t-&gt;key);</span><br><span class="line">    else</span><br><span class="line">        printf(&quot;%3dB&quot;,t-&gt;key);</span><br><span class="line">    rbt_inPrint(T,t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//打印程序包括前序遍历和中序遍历两个，因为它俩可以唯一确定一棵二叉树</span><br><span class="line">void rbt_print(const rbt_root_t* T)&#123;</span><br><span class="line">    assert(T!=NULL);</span><br><span class="line">    printf(&quot;\n前序遍历 ：&quot;);</span><br><span class="line">    rbt_prePrint(T,T-&gt;root);</span><br><span class="line">    printf(&quot;\n中序遍历 ：&quot;);</span><br><span class="line">    rbt_inPrint(T,T-&gt;root);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void rbt_test()&#123;</span><br><span class="line">    rbt_root_t* T = rbt_init();</span><br><span class="line"></span><br><span class="line">    /************************************************************************/</span><br><span class="line">    /* 1    测试插入</span><br><span class="line">    /*</span><br><span class="line">    /*</span><br><span class="line">    /*输出  前序遍历 ：  7B  2R  1B  5B  4R 11R  8B 14B 15R</span><br><span class="line">    /*      中序遍历 ：  1B  2R  4R  5B  7B  8B 11R 14B 15R</span><br><span class="line">    /************************************************************************/</span><br><span class="line"></span><br><span class="line">    T = rbt_insert(T,11);</span><br><span class="line">    T = rbt_insert(T,7);</span><br><span class="line">    T = rbt_insert(T,1);</span><br><span class="line">    T = rbt_insert(T,2);</span><br><span class="line">    T = rbt_insert(T,8);</span><br><span class="line">    T = rbt_insert(T,14);</span><br><span class="line">    T = rbt_insert(T,15);</span><br><span class="line">    T = rbt_insert(T,5);</span><br><span class="line">    T = rbt_insert(T,4); </span><br><span class="line"></span><br><span class="line">    T = rbt_insert(T,4); //重复插入测试</span><br><span class="line">    rbt_print(T);</span><br><span class="line"></span><br><span class="line">    /************************************************************************/</span><br><span class="line">    /* 2    测试删除</span><br><span class="line">    /*    </span><br><span class="line">    /*操作  连续删除4个元素 rbt_delete(T,8);rbt_delete(T,14);rbt_delete(T,7);rbt_delete(T,11);</span><br><span class="line">    /*输出  前序遍历 ：  2B  1B  5R  4B 15B</span><br><span class="line">    /*      中序遍历 ：  1B  2B  4B  5R 15B</span><br><span class="line">    /************************************************************************/</span><br><span class="line"></span><br><span class="line">    rbt_delete(T,8);</span><br><span class="line">    rbt_delete(T,14);rbt_delete(T,7);rbt_delete(T,11);</span><br><span class="line"></span><br><span class="line">    rbt_delete(T,8);//删除不存在的元素</span><br><span class="line">    rbt_print(T);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本文转自&lt;a href=&quot;https://blog.csdn.net/weewqrer/article/details/51866488&quot; 
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="红黑树" scheme="http://twh233.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="http://twh233.github.io/2020/09/13/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://twh233.github.io/2020/09/13/布隆过滤器/</id>
    <published>2020-09-13T09:44:45.000Z</published>
    <updated>2020-09-13T09:51:43.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>一个空的布隆过滤器是一串被置为0的bit数组（假设由m位）。同时，应该声明k个不同的散列函数生成一个统一随机分布，每一个散列函数都将元素映射到m个bit中的一个（k是一个小于m的常数，与加入过滤器中的元素个数成比例）。k与相应的m的选择由误判率决定。</p><p>向过滤器中添加元素时，通过k个散列函数得到该元素对应的k个位置，并将这些位置置为1.</p><p>查询某个元素/测试是否与已有元素重复时，依旧通过k个散列函数得到对应的k个位置，判断这些位置是否为1（若全为1则在集合内/重复）</p><p>可以看如下图所示的一个例子，其中，{x,y,z}为集合，w为进行比对的元素，m=18，k=3，不同颜色的箭头表示散列映射关系。可以看出，w并不在{x,y,z}这个集合中。 </p><img src="/2020/09/13/布隆过滤器/1.png"><h2 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h2><p>是用一个数组中的每个数据的每个二进制位表示一个数是否存在。1表示存在，0表示不存在。</p><p>相当于把数组分成很多块的空间，每一块是32个比特位。</p><p>原来32个比特位放一个数据，相当于现在一个位就可以放一个数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;布隆过滤器&quot;&gt;&lt;a href=&quot;#布隆过滤器&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器&quot;&gt;&lt;/a&gt;布隆过滤器&lt;/h2&gt;&lt;p&gt;一个空的布隆过滤器是一串被置为0的bit数组（假设由m位）。同时，应该声明k个不同的散列函数生成一个统一随机分布，每
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="布隆过滤器" scheme="http://twh233.github.io/tags/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>B树与B+树</title>
    <link href="http://twh233.github.io/2020/09/13/B%E6%A0%91%E4%B8%8EB-%E6%A0%91/"/>
    <id>http://twh233.github.io/2020/09/13/B树与B-树/</id>
    <published>2020-09-13T06:27:49.000Z</published>
    <updated>2020-09-14T11:22:38.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="B树性质"><a href="#B树性质" class="headerlink" title="B树性质"></a>B树性质</h2><p>一颗M阶B树T，满足以下条件  </p><ol><li>每个结点至多拥有M课子树  </li><li>根结点至少拥有两颗子树  </li><li>除了根结点以外，其余每个分支结点至少拥有M/2课子树  </li><li>所有的叶结点都在同一层上  </li><li>有k课子树的分支结点则存在k-1个关键字，关键字按照递增顺序进行排序  </li><li>关键字数量满足ceil(M/2)-1 &lt;= n &lt;= M-1  </li></ol><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>通过对B树进行遍历，找出要插入的结点以及结点位置，如果找到的key值在B树当中已经存在，则说明插入失败，否则，就可以进行插入操作。这里可以先不管是否超出M阶树的上限要求，因为我们在定义的时候会故意留下一个位置，可以存放多余的一个元素，插入之后，通过判断是否达到M阶树上限要求，再进行递归的分裂操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">*  @description    插入实现元素的插入</span><br><span class="line">*  @return         成功返回OK,如果存在则返回FALSE，否则返回ERROR</span><br><span class="line">*  @notice</span><br><span class="line">***/</span><br><span class="line">Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">&#123;</span><br><span class="line">    BTree p;</span><br><span class="line">    int index, temp;</span><br><span class="line">    Status find_flag;</span><br><span class="line">    if (NULL == T)//考虑B树为空树的情况</span><br><span class="line">    &#123;</span><br><span class="line">        T = (BTree)malloc(BTLEN);</span><br><span class="line">        if (NULL == T) return OVERFLOW;</span><br><span class="line">        T-&gt;keynum = 1;</span><br><span class="line">        T-&gt;parent = NULL;</span><br><span class="line">        for (index = 0;index &lt;= m; ++index)</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;ptr[index] = NULL;</span><br><span class="line">            T-&gt;key[index] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        T-&gt;key[1] = e.key;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    find_flag = findBTree(T, p, temp, e.key);//寻找插入节点</span><br><span class="line">    if (find_flag == TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    if (find_flag == FALSE)</span><br><span class="line">    &#123;                                //不管怎样先直接插入</span><br><span class="line">        p-&gt;keynum++;</span><br><span class="line">        for (index = p-&gt;keynum;index &gt; temp;--index)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;key[index] = p-&gt;key[index - 1];</span><br><span class="line">            p-&gt;ptr[index] = p-&gt;ptr[index - 1];</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;ptr[temp] = NULL;</span><br><span class="line">        p-&gt;key[temp] = e.key;</span><br><span class="line">        if (p-&gt;keynum == m)      //这种情况得分裂</span><br><span class="line">        &#123;</span><br><span class="line">            splitBTree(p);</span><br><span class="line">        &#125;</span><br><span class="line">        renewParent(T);</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    return ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分裂"><a href="#分裂" class="headerlink" title="分裂"></a>分裂</h3><p>分裂操作是插入操作过程中一个最重要的操作，因为这是处理“冲突”（即结点中的数据元素大于B树规则中要求的最大个数）的一个通用的处理方式，这种方式必须要对所有的情况都适用，而分裂是解决这一问题一个方法。当然这种方法只是考虑到效率，没有对兄弟可否借数据进行判断，但是另外一种方式比较麻烦，这里先不做讨论。</p><p>分裂的思路是让父亲结点先腾出一个位置（包括key和ptr）出来，然后在需要分裂的结点里面取中间的元素并且移动中间的元素key到父亲结点已经腾出来的key位置那里，然后把分裂出来的右部分接到腾出来的ptr那里。注意整个过程对左部分和右部分的都要改变元素的个数以及清空一些没用的空间。在往上分裂之后可能会造成一种情况，就是父亲结点也可能达到分裂的最大个数，所以，检查父亲结点是否需要分裂，需要的话，递归之。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           status splitBTree(BTree T)</span><br><span class="line">*  @description    递归实现分裂节点操作</span><br><span class="line">*  @return         成功返回OK,否则返回ERROR</span><br><span class="line">*  @notice</span><br><span class="line">***/</span><br><span class="line">Status splitBTree(BTree T) //此时分裂的节点一定会是超出最大值的。</span><br><span class="line">&#123;</span><br><span class="line">    BTree t1, t2;</span><br><span class="line">    int index, index_1;</span><br><span class="line">    if (T-&gt;parent == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        t1 = (BTree)malloc(BTLEN);</span><br><span class="line">        if (NULL == t1) return OVERFLOW;</span><br><span class="line">        t2 = (BTree)malloc(BTLEN);</span><br><span class="line">        if (NULL == t2) return OVERFLOW;</span><br><span class="line"></span><br><span class="line">        t1-&gt;keynum = m / 2;</span><br><span class="line">        t2-&gt;keynum = m - (m / 2) - 1;</span><br><span class="line">        t1-&gt;parent = T;</span><br><span class="line">        t2-&gt;parent = T;</span><br><span class="line">        for (index = 0;index &lt;= m; ++index)  //先全部初始化</span><br><span class="line">        &#123;</span><br><span class="line">            t1-&gt;ptr[index] = NULL;</span><br><span class="line">            t1-&gt;key[index] = 0;</span><br><span class="line">            t2-&gt;ptr[index] = NULL;</span><br><span class="line">            t2-&gt;key[index] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        for (index = 0;index &lt;= m / 2; ++index)  //初始化t1</span><br><span class="line">        &#123;</span><br><span class="line">            t1-&gt;ptr[index] = T-&gt;ptr[index];</span><br><span class="line">            t1-&gt;key[index] = T-&gt;key[index];</span><br><span class="line">        &#125;</span><br><span class="line">        t2-&gt;ptr[0] = T-&gt;ptr[(m / 2) + 1];</span><br><span class="line">        for (index = (m / 2) + 2;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">        &#123;</span><br><span class="line">            t2-&gt;ptr[index - ((m / 2) + 1)] = T-&gt;ptr[index];</span><br><span class="line">            t2-&gt;key[index - ((m / 2) + 1)] = T-&gt;key[index];</span><br><span class="line">        &#125;</span><br><span class="line">        T-&gt;keynum = 1;</span><br><span class="line">        T-&gt;ptr[0] = t1;</span><br><span class="line">        T-&gt;ptr[1] = t2;</span><br><span class="line">        T-&gt;key[1] = T-&gt;key[m / 2 + 1];</span><br><span class="line">        for (index = 2;index &lt;= m; ++index)  //初始化T</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;ptr[index] = NULL;</span><br><span class="line">            T-&gt;key[index] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>B树元素的删除操作与插入操作类似，但是却要麻烦，因为得分两种情况处理。（1）寻找到存在这个元素，而且这个元素所在是叶子节点（即它的孩子为空），直接对其进行删除，之后再判断是否小于B树规则中要求的最小的子树个数。如果小于，那就调用合并函数。（2）如果寻找到的这个元素是非叶子节点的元素，通过寻找比该元素小的最大元素（该元素肯定为叶子节点），把该元素直接赋值给要删除的元素，再在叶子节点处进行（1）中的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">*  @description    实现B树元素的删除</span><br><span class="line">*  @return         成功返回OK,否则返回ERROR</span><br><span class="line">*  @notice</span><br><span class="line">***/</span><br><span class="line">Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">&#123;</span><br><span class="line">    BTree p, q;</span><br><span class="line">    int num, temp, index;</span><br><span class="line">    Status find_flag;</span><br><span class="line">    if (T == NULL)</span><br><span class="line">        return ERROR;</span><br><span class="line">    find_flag = findBTree(T, p, temp, e.key);</span><br><span class="line">    if (find_flag == FALSE)</span><br><span class="line">    &#123;</span><br><span class="line">        return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    if (find_flag == TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        //deleteBTreeBNode(p,temp);</span><br><span class="line">        if (p-&gt;ptr[temp] == NULL)                //如果是叶子节点的话</span><br><span class="line">        &#123;</span><br><span class="line">            for (index = temp;index &lt;= p-&gt;keynum;++index)</span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;key[index] = p-&gt;key[index + 1];</span><br><span class="line">                p-&gt;ptr[index] = p-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;keynum--;</span><br><span class="line">            if (p-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">            &#123;</span><br><span class="line">                //调用借兄弟的函数</span><br><span class="line">                if (borrowBNode(p) == EMPTY) T = NULL;</span><br><span class="line">                else renewParent(T);</span><br><span class="line">            &#125;</span><br><span class="line">            return OK;</span><br><span class="line">        &#125;</span><br><span class="line">        else                                    //不是叶子结点的话</span><br><span class="line">        &#123;</span><br><span class="line">            //遍历</span><br><span class="line">            findMax(p-&gt;ptr[temp - 1], q, num);//返回的q一定会是叶子节点</span><br><span class="line">            p-&gt;key[temp] = q-&gt;key[num];</span><br><span class="line">            q-&gt;key[num] = 0;</span><br><span class="line">            q-&gt;keynum--;</span><br><span class="line">            if (q-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">            &#123;</span><br><span class="line">                //调用借兄弟的函数</span><br><span class="line">                if (borrowBNode(q) == EMPTY) T = NULL;</span><br><span class="line">                else renewParent(T);</span><br><span class="line">            &#125;</span><br><span class="line">            return OK;</span><br><span class="line">        &#125;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    return ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>首先先向兄弟结点借元素，如果兄弟能够借给你元素的话（即借了你之后并不会小于最少的分支），那么直接从兄弟那里取元素，否则，和兄弟合并。<br>合并其实是分裂反过来的情况，从父亲结点那里取出一个key值介于要合并的两个结点之间的元素，插入左部分最末尾处，同时右部分插到左部分后面，然后父亲结点元素依次往前挪。从而实现合并操作。之后，也必须对父亲结点进行判断是否小于最小的分支数，如果也小于，对父亲节点进行递归操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">*  @name           Status borrowBNode(BTree &amp;T)</span><br><span class="line">*  @description    递归实现，向兄弟借元素，否则和兄弟合并</span><br><span class="line">*  @return         成功返回OK,否则返回ERROR</span><br><span class="line">*  @notice         这种情况应该是T为单元素结点</span><br><span class="line">***/</span><br><span class="line">Status borrowBNode(BTree T)</span><br><span class="line">&#123;</span><br><span class="line">    int mynum, bronum, index;</span><br><span class="line">    BTree b = NULL, f = NULL;</span><br><span class="line">    if (T == NULL) return ERROR;</span><br><span class="line">    f = T-&gt;parent;</span><br><span class="line">    if (f == NULL)//考虑父亲结点不存在的情况</span><br><span class="line">    &#123;</span><br><span class="line">        if (T-&gt;keynum == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            f = T-&gt;ptr[0];</span><br><span class="line">            if (f == NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                free(T);</span><br><span class="line">                return EMPTY;</span><br><span class="line">            &#125;</span><br><span class="line">            for (index = 0;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                T-&gt;key[index] = f-&gt;key[index];</span><br><span class="line">                T-&gt;ptr[index] = f-&gt;ptr[index];</span><br><span class="line">            &#125;</span><br><span class="line">            T-&gt;keynum = f-&gt;keynum;</span><br><span class="line">            free(f);</span><br><span class="line">            renewParent(T);</span><br><span class="line">        &#125;</span><br><span class="line">        return OK;</span><br><span class="line">    &#125;</span><br><span class="line">    mynum = whichSon(T);</span><br><span class="line">    if (mynum == 0)</span><br><span class="line">        bronum = 1;</span><br><span class="line">    else</span><br><span class="line">        bronum = mynum - 1;</span><br><span class="line">    b = f-&gt;ptr[bronum];</span><br><span class="line">    if (b-&gt;keynum == (m + 1) / 2 - 1) //如果兄弟帮不了你了</span><br><span class="line">    &#123;</span><br><span class="line">        //那么就和这个兄弟合体</span><br><span class="line">        if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">        &#123;</span><br><span class="line">            b-&gt;keynum++;</span><br><span class="line">            b-&gt;key[b-&gt;keynum] = f-&gt;key[mynum];</span><br><span class="line">            b-&gt;ptr[b-&gt;keynum] = T-&gt;ptr[0];</span><br><span class="line">            for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                b-&gt;key[index + b-&gt;keynum] = T-&gt;key[index];</span><br><span class="line">                b-&gt;ptr[index + b-&gt;keynum] = T-&gt;ptr[index];</span><br><span class="line">                b-&gt;keynum++;</span><br><span class="line">            &#125;</span><br><span class="line">            free(T);</span><br><span class="line">            for (index = mynum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">                f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            f-&gt;keynum--;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;keynum++;</span><br><span class="line">            T-&gt;key[T-&gt;keynum] = f-&gt;key[bronum];</span><br><span class="line">            T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">            for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                T-&gt;key[index + T-&gt;keynum] = b-&gt;key[index];</span><br><span class="line">                T-&gt;ptr[index + T-&gt;keynum] = b-&gt;ptr[index];</span><br><span class="line">                T-&gt;keynum++;</span><br><span class="line">            &#125;</span><br><span class="line">            free(b);</span><br><span class="line">            for (index = bronum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">                f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            f-&gt;keynum--;</span><br><span class="line">        &#125;</span><br><span class="line">        renewParent(f);</span><br><span class="line">        if (f-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">        &#123;</span><br><span class="line">            //调用借兄弟的函数</span><br><span class="line">            return borrowBNode(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else//如果兄弟能够帮你</span><br><span class="line">    &#123;</span><br><span class="line">        if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">        &#123;</span><br><span class="line">            for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                T-&gt;key[index + 1] = T-&gt;key[index];</span><br><span class="line">                T-&gt;ptr[index + 1] = T-&gt;ptr[index];</span><br><span class="line">            &#125;</span><br><span class="line">            T-&gt;ptr[1] = T-&gt;ptr[0];</span><br><span class="line">            T-&gt;key[1] = f-&gt;key[mynum];</span><br><span class="line">            T-&gt;ptr[0] = b-&gt;ptr[b-&gt;keynum];</span><br><span class="line">            T-&gt;keynum++;</span><br><span class="line">            f-&gt;key[mynum] = b-&gt;key[b-&gt;keynum];</span><br><span class="line">            b-&gt;key[b-&gt;keynum] = 0;</span><br><span class="line">            b-&gt;ptr[b-&gt;keynum] = NULL;</span><br><span class="line">            b-&gt;keynum--;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        else                                    //如果我是第一个</span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;keynum++;</span><br><span class="line">            T-&gt;key[T-&gt;keynum] = f-&gt;key[1];</span><br><span class="line">            T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">            f-&gt;key[1] = b-&gt;key[1];</span><br><span class="line">            b-&gt;ptr[0] = b-&gt;ptr[1];</span><br><span class="line">            for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">            &#123;</span><br><span class="line">                b-&gt;key[index] = b-&gt;key[index + 1];</span><br><span class="line">                b-&gt;ptr[index] = b-&gt;ptr[index + 1];</span><br><span class="line">            &#125;</span><br><span class="line">            b-&gt;keynum--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br></pre></td><td class="code"><pre><span class="line">1 #define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">2 #include&lt;stdio.h&gt;         </span><br><span class="line">3 #include&lt;stdlib.h&gt;</span><br><span class="line">4 #include&lt;time.h&gt;  </span><br><span class="line">5 #define BTREELENGTH 50</span><br><span class="line">6 #define BTLEN (sizeof(BTNode))</span><br><span class="line">7 #define MAXINT 100  </span><br><span class="line">8 typedef enum status</span><br><span class="line">9 &#123;</span><br><span class="line"> 10     TRUE,</span><br><span class="line"> 11     FALSE,</span><br><span class="line"> 12     OK,</span><br><span class="line"> 13     ERROR,</span><br><span class="line"> 14     OVERFLOW,</span><br><span class="line"> 15     EMPTY</span><br><span class="line"> 16 &#125;Status;</span><br><span class="line"> 17 typedef int KeyType;</span><br><span class="line"> 18 </span><br><span class="line"> 19 //**********************************B树****************************************</span><br><span class="line"> 20 #define  m  3   // B树的阶，此设为4</span><br><span class="line"> 21 typedef struct </span><br><span class="line"> 22 &#123;</span><br><span class="line"> 23     KeyType  key;</span><br><span class="line"> 24     char     data;</span><br><span class="line"> 25 &#125; Record;</span><br><span class="line"> 26 typedef struct BTNode </span><br><span class="line"> 27 &#123;</span><br><span class="line"> 28     int             keynum;        // 结点中关键字个数，即结点的大小</span><br><span class="line"> 29     struct BTNode  *parent;        // 指向双亲结点</span><br><span class="line"> 30     KeyType         key[m + 1];      // 关键字向量，0号单元未用</span><br><span class="line"> 31     struct BTNode  *ptr[m + 1];      // 子树指针向量</span><br><span class="line"> 32 //  Record         *recptr[m + 1];   // 记录指针向量，0号单元未用</span><br><span class="line"> 33                                      //在此添加其他自定义数据</span><br><span class="line"> 34 &#125; BTNode, *BTree;                // B树结点和B树的类型</span><br><span class="line"> 35 typedef struct </span><br><span class="line"> 36 &#123;</span><br><span class="line"> 37     BTNode  *pt;      // 指向找到的结点</span><br><span class="line"> 38     int      i;       // 1..m，在结点中的关键字序号</span><br><span class="line"> 39     int      tag;     // 1:查找成功，0:查找失败</span><br><span class="line"> 40 &#125; Result;           // 在B树的查找结果类型   </span><br><span class="line"> 41 //**********************************B树****************************************</span><br><span class="line"> 42 </span><br><span class="line"> 43 //**********************************队列***************************************</span><br><span class="line"> 44 typedef struct LNode &#123;</span><br><span class="line"> 45     BTree data;     // 数据域</span><br><span class="line"> 46     struct LNode *next;     // 指针域</span><br><span class="line"> 47 &#125; LNode, *LinkList;</span><br><span class="line"> 48 //**********************************队列***************************************</span><br><span class="line"> 49 </span><br><span class="line"> 50 /***</span><br><span class="line"> 51 *  @name           Status InitQueue_L(LinkList &amp;L)</span><br><span class="line"> 52 *  @description    初始化队列</span><br><span class="line"> 53 *  @return         成功返回OK，开辟空间失败返回OVERFLOW</span><br><span class="line"> 54 *  @notice</span><br><span class="line"> 55 ***/</span><br><span class="line"> 56 Status InitQueue_L(LinkList &amp;L)</span><br><span class="line"> 57 &#123; // 初始化一个只含头结点的空单链表L</span><br><span class="line"> 58     if (NULL == (L = (LNode*)malloc(sizeof(LNode)))) // 生成新结点</span><br><span class="line"> 59         return OVERFLOW;</span><br><span class="line"> 60     L-&gt;next = NULL;</span><br><span class="line"> 61     return OK;</span><br><span class="line"> 62 &#125;</span><br><span class="line"> 63 /***</span><br><span class="line"> 64 *  @name           LNode* MakeNode_L(BTree e)</span><br><span class="line"> 65 *  @description    构造队列结点</span><br><span class="line"> 66 *  @return         返回结点地址</span><br><span class="line"> 67 *  @notice</span><br><span class="line"> 68 ***/</span><br><span class="line"> 69 LNode* MakeNode_L(BTree e)</span><br><span class="line"> 70 &#123; // 构造数据域为e的单链表结点</span><br><span class="line"> 71     LNode *p;</span><br><span class="line"> 72     p = (LNode*)malloc(sizeof(LNode)); // 分配结点空间</span><br><span class="line"> 73     if (p != NULL)</span><br><span class="line"> 74     &#123;</span><br><span class="line"> 75         p-&gt;data = e;</span><br><span class="line"> 76         p-&gt;next = NULL;</span><br><span class="line"> 77     &#125;</span><br><span class="line"> 78     return p;</span><br><span class="line"> 79 &#125;</span><br><span class="line"> 80 /***</span><br><span class="line"> 81 *  @name           Status Enqueue_L(LNode *p, BTree e)</span><br><span class="line"> 82 *  @description    队列的入队</span><br><span class="line"> 83 *  @return         成功返回OK，否则返回ERROR</span><br><span class="line"> 84 *  @notice</span><br><span class="line"> 85 ***/</span><br><span class="line"> 86 Status Enqueue_L(LNode *p, BTree e)</span><br><span class="line"> 87 &#123; //在p结点之后插入q结点</span><br><span class="line"> 88     if (NULL == p) return ERROR; // 参数不合理</span><br><span class="line"> 89     while (p-&gt;next != NULL)</span><br><span class="line"> 90         p = p-&gt;next;</span><br><span class="line"> 91     p-&gt;next = MakeNode_L(e);         // 对应图4.11（b）的②，修改p结点的指针域</span><br><span class="line"> 92     return OK;</span><br><span class="line"> 93 &#125;</span><br><span class="line"> 94 </span><br><span class="line"> 95 /***</span><br><span class="line"> 96 *  @name           Status Dequeue_L(LNode *p, BTree &amp;e)</span><br><span class="line"> 97 *  @description    队列的出队</span><br><span class="line"> 98 *  @return         成功返回OK，否则返回ERROR</span><br><span class="line"> 99 *  @notice</span><br><span class="line">100 ***/</span><br><span class="line">101 Status Dequeue_L(LNode *p, BTree &amp;e)</span><br><span class="line">102 &#123;</span><br><span class="line">103     // 删除p结点的直接后继结点并用参数e返回被删结点的值</span><br><span class="line">104     LNode *q;</span><br><span class="line">105     if (NULL == p || NULL == p-&gt;next) return ERROR; // 删除位置不合理 </span><br><span class="line">106     q = p-&gt;next;</span><br><span class="line">107     p-&gt;next = q-&gt;next; // 修改被删结点q的指针域</span><br><span class="line">108     e = q-&gt;data;</span><br><span class="line">109     free(q); // 释放结点q</span><br><span class="line">110     return OK;</span><br><span class="line">111 &#125;</span><br><span class="line">112 </span><br><span class="line">113 /***</span><br><span class="line">114 *  @name           void DestroyQueue(LinkList L)</span><br><span class="line">115 *  @description    队列的销毁</span><br><span class="line">116 *  @return         无返回</span><br><span class="line">117 *  @notice</span><br><span class="line">118 ***/</span><br><span class="line">119 void DestroyQueue(LinkList L)</span><br><span class="line">120 &#123;</span><br><span class="line">121     // 销毁整个链表</span><br><span class="line">122     LinkList p;</span><br><span class="line">123     if (L != NULL)</span><br><span class="line">124     &#123;</span><br><span class="line">125         p = L;</span><br><span class="line">126         L = L-&gt;next;</span><br><span class="line">127         free(p);</span><br><span class="line">128         DestroyQueue(L);</span><br><span class="line">129     &#125;</span><br><span class="line">130 &#125;</span><br><span class="line">131 /***</span><br><span class="line">132 *  @name           Status  IfEmpty(LinkList L)</span><br><span class="line">133 *  @description    判断队列是否为空</span><br><span class="line">134 *  @return         空返回TRUE，不空返回FALSE，否则返回ERROR</span><br><span class="line">135 *  @notice         </span><br><span class="line">136 ***/</span><br><span class="line">137 Status  IfEmpty(LinkList L)</span><br><span class="line">138 &#123;</span><br><span class="line">139     if (L == NULL) return ERROR;</span><br><span class="line">140     if (L-&gt;next == NULL) return TRUE;</span><br><span class="line">141     return FALSE;</span><br><span class="line">142 &#125;</span><br><span class="line">143 /***</span><br><span class="line">144 *  @name           Status ergodic(BTree T, LinkList L, int newline, int sum)</span><br><span class="line">145 *  @description    print需要用到的递归遍历程序</span><br><span class="line">146 *  @return         成功返回OK</span><br><span class="line">147 *  @notice         此处用到队列</span><br><span class="line">148 ***/</span><br><span class="line">149 Status ergodic(BTree T, LinkList L, int newline, int sum)</span><br><span class="line">150 &#123;</span><br><span class="line">151     int index;</span><br><span class="line">152     BTree p;</span><br><span class="line">153     if (T != NULL)</span><br><span class="line">154     &#123;</span><br><span class="line">155         printf(&quot;[ &quot;);</span><br><span class="line">156         Enqueue_L(L, T-&gt;ptr[0]);</span><br><span class="line">157         for (index = 1;index &lt;= T-&gt;keynum; index++)</span><br><span class="line">158         &#123;</span><br><span class="line">159             printf(&quot;%d &quot;, T-&gt;key[index]);</span><br><span class="line">160             Enqueue_L(L, T-&gt;ptr[index]);</span><br><span class="line">161         &#125;</span><br><span class="line">162         sum += T-&gt;keynum + 1;</span><br><span class="line">163         printf(&quot;]&quot;);</span><br><span class="line">164         if (newline == 0)</span><br><span class="line">165         &#123;</span><br><span class="line">166             printf(&quot;\n&quot;);</span><br><span class="line">167             newline = sum - 1;</span><br><span class="line">168             sum = 0;</span><br><span class="line">169         &#125;</span><br><span class="line">170         else</span><br><span class="line">171         &#123;</span><br><span class="line">172             --newline;</span><br><span class="line">173         &#125;</span><br><span class="line">174     &#125;</span><br><span class="line">175     if (IfEmpty(L) == FALSE)</span><br><span class="line">176     &#123;</span><br><span class="line">177         Dequeue_L(L, p);</span><br><span class="line">178         ergodic(p, L, newline, sum);</span><br><span class="line">179     &#125;</span><br><span class="line">180     return OK;</span><br><span class="line">181 &#125;</span><br><span class="line">182 /***</span><br><span class="line">183 *  @name           Status print(BTree T)</span><br><span class="line">184 *  @description    层次遍历并分层输出B树</span><br><span class="line">185 *  @return         成功返回OK</span><br><span class="line">186 *  @notice</span><br><span class="line">187 ***/</span><br><span class="line">188 Status print(BTree T)</span><br><span class="line">189 &#123;</span><br><span class="line">190     LinkList L;</span><br><span class="line">191     if (T == NULL)</span><br><span class="line">192     &#123;</span><br><span class="line">193         printf(&quot;[ ]\n&quot;);</span><br><span class="line">194         return OK;</span><br><span class="line">195     &#125;</span><br><span class="line">196     InitQueue_L(L);</span><br><span class="line">197     ergodic(T, L, 0, 0);</span><br><span class="line">198     DestroyQueue(L);</span><br><span class="line">199     return OK;</span><br><span class="line">200 &#125;</span><br><span class="line">201 </span><br><span class="line">202 /***</span><br><span class="line">203 *  @name           Status findMax(BTree T, BTree &amp;p,int ans)</span><br><span class="line">204 *  @description    寻找最大关键字的结点,T为要寻找的树，p为返回的节点,ans为第几个</span><br><span class="line">205 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">206 *  @notice</span><br><span class="line">207 ***/</span><br><span class="line">208 Status findMax(BTree T, BTree &amp;p, int &amp;ans)</span><br><span class="line">209 &#123;</span><br><span class="line">210     if (T == NULL)</span><br><span class="line">211         return ERROR;</span><br><span class="line">212     p = T;</span><br><span class="line">213     while (p-&gt;ptr[p-&gt;keynum] != NULL)</span><br><span class="line">214     &#123;</span><br><span class="line">215         p = p-&gt;ptr[p-&gt;keynum];</span><br><span class="line">216     &#125;</span><br><span class="line">217     ans = p-&gt;keynum;</span><br><span class="line">218     return OK;</span><br><span class="line">219 &#125;</span><br><span class="line">220 /***</span><br><span class="line">221 *  @name           Status findMin(BTree T, BTree &amp;p,int ans)</span><br><span class="line">222 *  @description    寻找最小关键字的结点,T为要寻找的树，p为返回的节点,ans为第几个</span><br><span class="line">223 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">224 *  @notice</span><br><span class="line">225 ***/</span><br><span class="line">226 /***</span><br><span class="line">227 *  @name           Status findBTree(BTree T, BTree &amp;p, int &amp;ans, KeyType k)</span><br><span class="line">228 *  @description    寻找 ,T为要寻找的树，p为返回的节点，ans为第几个元素，k为要找的值</span><br><span class="line">229 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">230 *  @notice</span><br><span class="line">231 ***/</span><br><span class="line">232 Status findBTree(BTree T, BTree &amp;p, int &amp;ans, KeyType k)</span><br><span class="line">233 &#123;</span><br><span class="line">234     BTree q;</span><br><span class="line">235     int index = 1;</span><br><span class="line">236     KeyType  keynow;</span><br><span class="line">237     if (T == NULL)</span><br><span class="line">238         return ERROR;</span><br><span class="line">239     q = T;</span><br><span class="line">240     keynow = T-&gt;key[1];</span><br><span class="line">241     while (q != NULL)                 //深度的遍历</span><br><span class="line">242     &#123;</span><br><span class="line">243         index = 1;</span><br><span class="line">244         keynow = q-&gt;key[index];</span><br><span class="line">245         while (index &lt;= q-&gt;keynum) //节点内对各真值进行遍历</span><br><span class="line">246         &#123;</span><br><span class="line">247             if (k == keynow)           //找到元素</span><br><span class="line">248             &#123;</span><br><span class="line">249                 p = q;</span><br><span class="line">250                 ans = index;</span><br><span class="line">251                 return TRUE;</span><br><span class="line">252             &#125;</span><br><span class="line">253             if (k &gt; keynow)</span><br><span class="line">254             &#123;</span><br><span class="line">255                 if (index == q-&gt;keynum)</span><br><span class="line">256                 &#123;</span><br><span class="line">257                     if (q-&gt;ptr[index] == NULL)</span><br><span class="line">258                     &#123;</span><br><span class="line">259                         p = q;</span><br><span class="line">260                         ans = q-&gt;keynum + 1;</span><br><span class="line">261                         return FALSE;</span><br><span class="line">262                     &#125;</span><br><span class="line">263                     q = q-&gt;ptr[index];</span><br><span class="line">264                     break;</span><br><span class="line">265                 &#125;</span><br><span class="line">266                 ++index;</span><br><span class="line">267                 keynow = q-&gt;key[index];</span><br><span class="line">268                 continue;</span><br><span class="line">269             &#125;</span><br><span class="line">270             if (k &lt; keynow)</span><br><span class="line">271             &#123;</span><br><span class="line">272                 if (q-&gt;ptr[index - 1] == NULL)</span><br><span class="line">273                 &#123;</span><br><span class="line">274                     p = q;</span><br><span class="line">275                     ans = index;</span><br><span class="line">276                     return FALSE;</span><br><span class="line">277                 &#125;</span><br><span class="line">278                 q = q-&gt;ptr[index - 1];</span><br><span class="line">279                 break;</span><br><span class="line">280             &#125;</span><br><span class="line">281         &#125;</span><br><span class="line">282     &#125;</span><br><span class="line">283 </span><br><span class="line">284     return ERROR;</span><br><span class="line">285 &#125;</span><br><span class="line">286 /***</span><br><span class="line">287 *  @name           Status renewParent(BTree p)</span><br><span class="line">288 *  @description    告诉孩子们亲身爸爸是谁</span><br><span class="line">289 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">290 *  @notice</span><br><span class="line">291 ***/</span><br><span class="line">292 Status renewParent(BTree p)</span><br><span class="line">293 &#123;</span><br><span class="line">294     int index;</span><br><span class="line">295     if (p == NULL) return ERROR;</span><br><span class="line">296     for (index = 0;index &lt;= p-&gt;keynum;++index)</span><br><span class="line">297     &#123;</span><br><span class="line">298         if (p-&gt;ptr[index] != NULL)</span><br><span class="line">299         &#123;</span><br><span class="line">300             p-&gt;ptr[index]-&gt;parent = p;</span><br><span class="line">301             renewParent(p-&gt;ptr[index]);</span><br><span class="line">302         &#125;</span><br><span class="line">303     &#125;</span><br><span class="line">304     return OK;</span><br><span class="line">305 &#125;</span><br><span class="line">306 /***</span><br><span class="line">307 *  @name           int whichSon(BTree T)</span><br><span class="line">308 *  @description    找出是父亲的第几个孩子</span><br><span class="line">309 *  @return         成功返回第几个孩子,否则返回-1</span><br><span class="line">310 *  @notice</span><br><span class="line">311 ***/</span><br><span class="line">312 int whichSon(BTree T)</span><br><span class="line">313 &#123;</span><br><span class="line">314     int index = -1;</span><br><span class="line">315     if (T == NULL) return -1;</span><br><span class="line">316     for (index = 0;index &lt;= T-&gt;parent-&gt;keynum;++index) //找出是父亲的第几个孩子</span><br><span class="line">317     &#123;</span><br><span class="line">318         if (T-&gt;parent-&gt;ptr[index] == T) return index;</span><br><span class="line">319     &#125;</span><br><span class="line">320     return -1;</span><br><span class="line">321 &#125;</span><br><span class="line">322 /***</span><br><span class="line">323 *  @name           status splitBTree(BTree T)</span><br><span class="line">324 *  @description    递归实现分裂节点操作</span><br><span class="line">325 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">326 *  @notice</span><br><span class="line">327 ***/</span><br><span class="line">328 Status splitBTree(BTree T) //此时分裂的节点一定会是超出最大值的。</span><br><span class="line">329 &#123;</span><br><span class="line">330     BTree t1, t2;</span><br><span class="line">331     int index, index_1;</span><br><span class="line">332     if (T-&gt;parent == NULL)</span><br><span class="line">333     &#123;</span><br><span class="line">334         t1 = (BTree)malloc(BTLEN);</span><br><span class="line">335         if (NULL == t1) return OVERFLOW;</span><br><span class="line">336         t2 = (BTree)malloc(BTLEN);</span><br><span class="line">337         if (NULL == t2) return OVERFLOW;</span><br><span class="line">338 </span><br><span class="line">339         t1-&gt;keynum = m / 2;</span><br><span class="line">340         t2-&gt;keynum = m - (m / 2) - 1;</span><br><span class="line">341         t1-&gt;parent = T;</span><br><span class="line">342         t2-&gt;parent = T;</span><br><span class="line">343         for (index = 0;index &lt;= m; ++index)  //先全部初始化</span><br><span class="line">344         &#123;</span><br><span class="line">345             t1-&gt;ptr[index] = NULL;</span><br><span class="line">346             t1-&gt;key[index] = 0;</span><br><span class="line">347             t2-&gt;ptr[index] = NULL;</span><br><span class="line">348             t2-&gt;key[index] = 0;</span><br><span class="line">349         &#125;</span><br><span class="line">350         for (index = 0;index &lt;= m / 2; ++index)  //初始化t1</span><br><span class="line">351         &#123;</span><br><span class="line">352             t1-&gt;ptr[index] = T-&gt;ptr[index];</span><br><span class="line">353             t1-&gt;key[index] = T-&gt;key[index];</span><br><span class="line">354         &#125;</span><br><span class="line">355         t2-&gt;ptr[0] = T-&gt;ptr[(m / 2) + 1];</span><br><span class="line">356         for (index = (m / 2) + 2;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">357         &#123;</span><br><span class="line">358             t2-&gt;ptr[index - ((m / 2) + 1)] = T-&gt;ptr[index];</span><br><span class="line">359             t2-&gt;key[index - ((m / 2) + 1)] = T-&gt;key[index];</span><br><span class="line">360         &#125;</span><br><span class="line">361         T-&gt;keynum = 1;</span><br><span class="line">362         T-&gt;ptr[0] = t1;</span><br><span class="line">363         T-&gt;ptr[1] = t2;</span><br><span class="line">364         T-&gt;key[1] = T-&gt;key[m / 2 + 1];</span><br><span class="line">365         for (index = 2;index &lt;= m; ++index)  //初始化T</span><br><span class="line">366         &#123;</span><br><span class="line">367             T-&gt;ptr[index] = NULL;</span><br><span class="line">368             T-&gt;key[index] = 0;</span><br><span class="line">369         &#125;</span><br><span class="line">370         return OK;</span><br><span class="line">371     &#125;</span><br><span class="line">372 </span><br><span class="line">373     index = whichSon(T);</span><br><span class="line">374     for (index_1 = T-&gt;parent-&gt;keynum;index_1 &gt; index;--index_1) //腾出父亲的位置</span><br><span class="line">375     &#123;</span><br><span class="line">376         T-&gt;parent-&gt;ptr[index_1 + 1] = T-&gt;parent-&gt;ptr[index_1];</span><br><span class="line">377         T-&gt;parent-&gt;key[index_1 + 1] = T-&gt;parent-&gt;key[index_1];</span><br><span class="line">378     &#125;</span><br><span class="line">379     T-&gt;parent-&gt;keynum++;</span><br><span class="line">380     T-&gt;parent-&gt;key[index + 1] = T-&gt;key[m / 2 + 1];</span><br><span class="line">381     t2 = T-&gt;parent-&gt;ptr[index + 1] = (BTree)malloc(BTLEN);</span><br><span class="line">382     if (NULL == t2) return OVERFLOW;</span><br><span class="line">383     for (index = 0;index &lt;= m; ++index)  //先全部初始化</span><br><span class="line">384     &#123;</span><br><span class="line">385         t2-&gt;ptr[index] = NULL;</span><br><span class="line">386         t2-&gt;key[index] = 0;</span><br><span class="line">387     &#125;</span><br><span class="line">388     t2-&gt;keynum = m - (m / 2) - 1;</span><br><span class="line">389     t2-&gt;parent = T-&gt;parent;</span><br><span class="line">390     t2-&gt;ptr[0] = T-&gt;ptr[(m / 2) + 1];</span><br><span class="line">391     for (index = (m / 2) + 2;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">392     &#123;</span><br><span class="line">393         t2-&gt;ptr[index - ((m / 2) + 1)] = T-&gt;ptr[index];</span><br><span class="line">394         t2-&gt;key[index - ((m / 2) + 1)] = T-&gt;key[index];</span><br><span class="line">395     &#125;</span><br><span class="line">396     T-&gt;keynum = m / 2;</span><br><span class="line">397     for (index = (m / 2) + 1;index &lt;= m; ++index)  //初始化t2</span><br><span class="line">398     &#123;</span><br><span class="line">399         T-&gt;ptr[index] = NULL;</span><br><span class="line">400         T-&gt;key[index] = 0;</span><br><span class="line">401     &#125;</span><br><span class="line">402     if (T-&gt;parent-&gt;keynum == m)</span><br><span class="line">403     &#123;</span><br><span class="line">404         splitBTree(T-&gt;parent);</span><br><span class="line">405     &#125;</span><br><span class="line">406     return OK;</span><br><span class="line">407 &#125;</span><br><span class="line">408 /***</span><br><span class="line">409 *  @name           Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">410 *  @description    插入实现元素的插入</span><br><span class="line">411 *  @return         成功返回OK,如果存在则返回FALSE，否则返回ERROR</span><br><span class="line">412 *  @notice</span><br><span class="line">413 ***/</span><br><span class="line">414 Status insertBTree(BTree &amp;T, Record e)</span><br><span class="line">415 &#123;</span><br><span class="line">416     BTree p;</span><br><span class="line">417     int index, temp;</span><br><span class="line">418     Status find_flag;</span><br><span class="line">419     if (NULL == T)</span><br><span class="line">420     &#123;</span><br><span class="line">421         T = (BTree)malloc(BTLEN);</span><br><span class="line">422         if (NULL == T) return OVERFLOW;</span><br><span class="line">423         T-&gt;keynum = 1;</span><br><span class="line">424         T-&gt;parent = NULL;</span><br><span class="line">425         for (index = 0;index &lt;= m; ++index)</span><br><span class="line">426         &#123;</span><br><span class="line">427             T-&gt;ptr[index] = NULL;</span><br><span class="line">428             T-&gt;key[index] = 0;</span><br><span class="line">429         &#125;</span><br><span class="line">430         T-&gt;key[1] = e.key;</span><br><span class="line">431         return OK;</span><br><span class="line">432     &#125;</span><br><span class="line">433     find_flag = findBTree(T, p, temp, e.key);</span><br><span class="line">434     if (find_flag == TRUE)</span><br><span class="line">435     &#123;</span><br><span class="line">436         return FALSE;</span><br><span class="line">437     &#125;</span><br><span class="line">438     if (find_flag == FALSE)</span><br><span class="line">439     &#123;                                //不管怎样先直接插入</span><br><span class="line">440         p-&gt;keynum++;</span><br><span class="line">441         for (index = p-&gt;keynum;index &gt; temp;--index) //挪位置</span><br><span class="line">442         &#123;</span><br><span class="line">443             p-&gt;key[index] = p-&gt;key[index - 1];</span><br><span class="line">444             p-&gt;ptr[index] = p-&gt;ptr[index - 1];</span><br><span class="line">445         &#125;</span><br><span class="line">446         p-&gt;ptr[temp] = NULL;</span><br><span class="line">447         p-&gt;key[temp] = e.key;</span><br><span class="line">448         if (p-&gt;keynum == m)      //这种情况得分裂</span><br><span class="line">449         &#123;</span><br><span class="line">450             splitBTree(p);</span><br><span class="line">451         &#125;</span><br><span class="line">452         renewParent(T);</span><br><span class="line">453         return OK;</span><br><span class="line">454     &#125;</span><br><span class="line">455     return ERROR;</span><br><span class="line">456 &#125;</span><br><span class="line">457 /***</span><br><span class="line">458 *  @name           Status borrowBNode(BTree &amp;T)</span><br><span class="line">459 *  @description    递归实现，向兄弟借元素，否则和兄弟合并</span><br><span class="line">460 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">461 *  @notice         这种情况应该是T为单元素结点</span><br><span class="line">462 ***/</span><br><span class="line">463 Status borrowBNode(BTree T)</span><br><span class="line">464 &#123;</span><br><span class="line">465     int mynum, bronum, index;</span><br><span class="line">466     BTree b = NULL, f = NULL;</span><br><span class="line">467     if (T == NULL) return ERROR;</span><br><span class="line">468     f = T-&gt;parent;</span><br><span class="line">469     if (f == NULL)//考虑父亲结点不存在的情况</span><br><span class="line">470     &#123;</span><br><span class="line">471         if (T-&gt;keynum == 0)</span><br><span class="line">472         &#123;</span><br><span class="line">473             f = T-&gt;ptr[0];</span><br><span class="line">474             if (f == NULL)</span><br><span class="line">475             &#123;</span><br><span class="line">476                 free(T);</span><br><span class="line">477                 return EMPTY;</span><br><span class="line">478             &#125;</span><br><span class="line">479             for (index = 0;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">480             &#123;</span><br><span class="line">481                 T-&gt;key[index] = f-&gt;key[index];</span><br><span class="line">482                 T-&gt;ptr[index] = f-&gt;ptr[index];</span><br><span class="line">483             &#125;</span><br><span class="line">484             T-&gt;keynum = f-&gt;keynum;</span><br><span class="line">485             free(f);</span><br><span class="line">486             renewParent(T);</span><br><span class="line">487         &#125;</span><br><span class="line">488         return OK;</span><br><span class="line">489     &#125;</span><br><span class="line">490     mynum = whichSon(T);</span><br><span class="line">491     if (mynum == 0)</span><br><span class="line">492         bronum = 1;</span><br><span class="line">493     else</span><br><span class="line">494         bronum = mynum - 1;</span><br><span class="line">495     b = f-&gt;ptr[bronum];</span><br><span class="line">496     if (b-&gt;keynum == (m + 1) / 2 - 1) //如果兄弟帮不了你了</span><br><span class="line">497     &#123;</span><br><span class="line">498         //那么就和这个兄弟合体</span><br><span class="line">499         if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">500         &#123;</span><br><span class="line">501             b-&gt;keynum++;</span><br><span class="line">502             b-&gt;key[b-&gt;keynum] = f-&gt;key[mynum];</span><br><span class="line">503             b-&gt;ptr[b-&gt;keynum] = T-&gt;ptr[0];</span><br><span class="line">504             for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">505             &#123;</span><br><span class="line">506                 b-&gt;key[index + b-&gt;keynum] = T-&gt;key[index];</span><br><span class="line">507                 b-&gt;ptr[index + b-&gt;keynum] = T-&gt;ptr[index];</span><br><span class="line">508                 b-&gt;keynum++;</span><br><span class="line">509             &#125;</span><br><span class="line">510             free(T);</span><br><span class="line">511             for (index = mynum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">512             &#123;</span><br><span class="line">513                 f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">514                 f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">515             &#125;</span><br><span class="line">516             f-&gt;keynum--;</span><br><span class="line">517         &#125;</span><br><span class="line">518         else</span><br><span class="line">519         &#123;</span><br><span class="line">520             T-&gt;keynum++;</span><br><span class="line">521             T-&gt;key[T-&gt;keynum] = f-&gt;key[bronum];</span><br><span class="line">522             T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">523             for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">524             &#123;</span><br><span class="line">525                 T-&gt;key[index + T-&gt;keynum] = b-&gt;key[index];</span><br><span class="line">526                 T-&gt;ptr[index + T-&gt;keynum] = b-&gt;ptr[index];</span><br><span class="line">527                 T-&gt;keynum++;</span><br><span class="line">528             &#125;</span><br><span class="line">529             free(b);</span><br><span class="line">530             for (index = bronum;index &lt;= f-&gt;keynum;index++)</span><br><span class="line">531             &#123;</span><br><span class="line">532                 f-&gt;key[index] = f-&gt;key[index + 1];</span><br><span class="line">533                 f-&gt;ptr[index] = f-&gt;ptr[index + 1];</span><br><span class="line">534             &#125;</span><br><span class="line">535             f-&gt;keynum--;</span><br><span class="line">536         &#125;</span><br><span class="line">537         renewParent(f);</span><br><span class="line">538         if (f-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">539         &#123;</span><br><span class="line">540             //调用借兄弟的函数</span><br><span class="line">541             return borrowBNode(f);</span><br><span class="line">542         &#125;</span><br><span class="line">543     &#125;</span><br><span class="line">544     else//如果兄弟能够帮你</span><br><span class="line">545     &#123;</span><br><span class="line">546         if (bronum &lt; mynum)                    //如果我不是第一个</span><br><span class="line">547         &#123;</span><br><span class="line">548             for (index = 1;index &lt;= T-&gt;keynum;index++)</span><br><span class="line">549             &#123;</span><br><span class="line">550                 T-&gt;key[index + 1] = T-&gt;key[index];</span><br><span class="line">551                 T-&gt;ptr[index + 1] = T-&gt;ptr[index];</span><br><span class="line">552             &#125;</span><br><span class="line">553             T-&gt;ptr[1] = T-&gt;ptr[0];</span><br><span class="line">554             T-&gt;key[1] = f-&gt;key[mynum];</span><br><span class="line">555             T-&gt;ptr[0] = b-&gt;ptr[b-&gt;keynum];</span><br><span class="line">556             T-&gt;keynum++;</span><br><span class="line">557             f-&gt;key[mynum] = b-&gt;key[b-&gt;keynum];</span><br><span class="line">558             b-&gt;key[b-&gt;keynum] = 0;</span><br><span class="line">559             b-&gt;ptr[b-&gt;keynum] = NULL;</span><br><span class="line">560             b-&gt;keynum--;</span><br><span class="line">561 </span><br><span class="line">562         &#125;</span><br><span class="line">563         else                                    //如果我是第一个</span><br><span class="line">564         &#123;</span><br><span class="line">565             T-&gt;keynum++;</span><br><span class="line">566             T-&gt;key[T-&gt;keynum] = f-&gt;key[1];</span><br><span class="line">567             T-&gt;ptr[T-&gt;keynum] = b-&gt;ptr[0];</span><br><span class="line">568             f-&gt;key[1] = b-&gt;key[1];</span><br><span class="line">569             b-&gt;ptr[0] = b-&gt;ptr[1];</span><br><span class="line">570             for (index = 1;index &lt;= b-&gt;keynum;index++)</span><br><span class="line">571             &#123;</span><br><span class="line">572                 b-&gt;key[index] = b-&gt;key[index + 1];</span><br><span class="line">573                 b-&gt;ptr[index] = b-&gt;ptr[index + 1];</span><br><span class="line">574             &#125;</span><br><span class="line">575             b-&gt;keynum--;</span><br><span class="line">576         &#125;</span><br><span class="line">577     &#125;</span><br><span class="line">578     return OK;</span><br><span class="line">579 &#125;</span><br><span class="line">580 </span><br><span class="line">581 /***</span><br><span class="line">582 *  @name           Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">583 *  @description    实现B树元素的删除</span><br><span class="line">584 *  @return         成功返回OK,否则返回ERROR</span><br><span class="line">585 *  @notice</span><br><span class="line">586 ***/</span><br><span class="line">587 Status deleteBTreeRecord(BTree &amp;T, Record e)</span><br><span class="line">588 &#123;</span><br><span class="line">589     BTree p, q;</span><br><span class="line">590     int num, temp, index;</span><br><span class="line">591     Status find_flag;</span><br><span class="line">592     if (T == NULL)</span><br><span class="line">593         return ERROR;</span><br><span class="line">594     find_flag = findBTree(T, p, temp, e.key);</span><br><span class="line">595     if (find_flag == FALSE)</span><br><span class="line">596     &#123;</span><br><span class="line">597         return FALSE;</span><br><span class="line">598     &#125;</span><br><span class="line">599     if (find_flag == TRUE)</span><br><span class="line">600     &#123;</span><br><span class="line">601         //deleteBTreeBNode(p,temp);</span><br><span class="line">602         if (p-&gt;ptr[temp] == NULL)                //如果是叶子节点的话</span><br><span class="line">603         &#123;</span><br><span class="line">604             for (index = temp;index &lt;= p-&gt;keynum;++index)</span><br><span class="line">605             &#123;</span><br><span class="line">606                 p-&gt;key[index] = p-&gt;key[index + 1];</span><br><span class="line">607                 p-&gt;ptr[index] = p-&gt;ptr[index + 1];</span><br><span class="line">608             &#125;</span><br><span class="line">609             p-&gt;keynum--;</span><br><span class="line">610             if (p-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">611             &#123;</span><br><span class="line">612                 //调用借兄弟的函数</span><br><span class="line">613                 if (borrowBNode(p) == EMPTY) T = NULL;</span><br><span class="line">614                 else renewParent(T);</span><br><span class="line">615             &#125;</span><br><span class="line">616             return OK;</span><br><span class="line">617         &#125;</span><br><span class="line">618         else                                    //不是叶子结点的话</span><br><span class="line">619         &#123;</span><br><span class="line">620             //遍历</span><br><span class="line">621             findMax(p-&gt;ptr[temp - 1], q, num);//返回的q一定会是叶子节点</span><br><span class="line">622             p-&gt;key[temp] = q-&gt;key[num];</span><br><span class="line">623             q-&gt;key[num] = 0;</span><br><span class="line">624             q-&gt;keynum--;</span><br><span class="line">625             if (q-&gt;keynum == (m + 1) / 2 - 2)</span><br><span class="line">626             &#123;</span><br><span class="line">627                 //调用借兄弟的函数</span><br><span class="line">628                 if (borrowBNode(q) == EMPTY) T = NULL;</span><br><span class="line">629                 else renewParent(T);</span><br><span class="line">630             &#125;</span><br><span class="line">631             return OK;</span><br><span class="line">632         &#125;</span><br><span class="line">633         return OK;</span><br><span class="line">634     &#125;</span><br><span class="line">635     return ERROR;</span><br><span class="line">636 &#125;</span><br><span class="line">637 /***</span><br><span class="line">638 *  @name           Status initBTree(BTree &amp;t)</span><br><span class="line">639 *  @description    初始化一个空B树</span><br><span class="line">640 *  @return         成功返回OK</span><br><span class="line">641 *  @notice</span><br><span class="line">642 ***/</span><br><span class="line">643 Status initBTree(BTree &amp;t)</span><br><span class="line">644 &#123;</span><br><span class="line">645     t = NULL;</span><br><span class="line">646     return OK;</span><br><span class="line">647 &#125;</span><br><span class="line">648 /***</span><br><span class="line">649 *  @name           Status test()</span><br><span class="line">650 *  @description    针对数据结构实验做的测试函数</span><br><span class="line">651 *  @return         成功返回OK</span><br><span class="line">652 *  @notice</span><br><span class="line">653 ***/</span><br><span class="line">654 Status test()</span><br><span class="line">655 &#123;</span><br><span class="line">656     // 测试代码</span><br><span class="line">657     int n, i;</span><br><span class="line">658     int arr[BTREELENGTH];</span><br><span class="line">659     BTree a;</span><br><span class="line">660     Record  d;</span><br><span class="line">661     srand((unsigned)time(NULL));</span><br><span class="line">662     n = rand() % BTREELENGTH;</span><br><span class="line">663     //scanf(&quot;%d&quot;, &amp;n);                    //可以改为自己输入数据</span><br><span class="line">664     printf(&quot;B树的阶为:%d,插入次数为:%d\n&quot;, m, n);</span><br><span class="line">665     initBTree(a);</span><br><span class="line">666     for (i = 0;i &lt; n;i++)</span><br><span class="line">667     &#123;</span><br><span class="line">668         d.key = rand() % MAXINT;</span><br><span class="line">669         //scanf(&quot;%d&quot;, &amp;d.key);            //可以改为自己输入数据</span><br><span class="line">670         arr[i] = d.key;</span><br><span class="line">671         if (insertBTree(a, d) == OK)</span><br><span class="line">672             printf(&quot;第%d次插入%d:\n&quot;, i + 1, d.key);</span><br><span class="line">673         else</span><br><span class="line">674             printf(&quot;第%d次插入%d不成功:\n&quot;, i + 1, d.key);</span><br><span class="line">675         print(a);</span><br><span class="line">676     &#125;</span><br><span class="line">677     for (i = 0;i &lt; n;i++)</span><br><span class="line">678     &#123;</span><br><span class="line">679         d.key = arr[i];</span><br><span class="line">680         if (deleteBTreeRecord(a, d) == OK)</span><br><span class="line">681             printf(&quot;第%d次删除%d:\n&quot;, i + 1, d.key);</span><br><span class="line">682         else</span><br><span class="line">683             printf(&quot;第%d次删除%d不成功:\n&quot;, i + 1, d.key);</span><br><span class="line">684         print(a);</span><br><span class="line">685     &#125;</span><br><span class="line">686     return OK;</span><br><span class="line">687 </span><br><span class="line">688 &#125;</span><br><span class="line">689 /***</span><br><span class="line">690 主函数</span><br><span class="line">691 ***/</span><br><span class="line">692 int  main()</span><br><span class="line">693 &#123;</span><br><span class="line">694     test();</span><br><span class="line">695     return 0;</span><br><span class="line">696 &#125;</span><br></pre></td></tr></table></figure><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><img src="/2020/09/13/B树与B-树/1.png"><img src="/2020/09/13/B树与B-树/2.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;B树性质&quot;&gt;&lt;a href=&quot;#B树性质&quot; class=&quot;headerlink&quot; title=&quot;B树性质&quot;&gt;&lt;/a&gt;B树性质&lt;/h2&gt;&lt;p&gt;一颗M阶B树T，满足以下条件  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个结点至多拥有M课子树  &lt;/li&gt;
&lt;li&gt;根结点至少拥有两
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="B树" scheme="http://twh233.github.io/tags/B%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>查找与排序-KMP算法栈队列</title>
    <link href="http://twh233.github.io/2020/09/12/%E6%9F%A5%E6%89%BE%E4%B8%8E%E6%8E%92%E5%BA%8F-KMP%E7%AE%97%E6%B3%95%E6%A0%88%E9%98%9F%E5%88%97/"/>
    <id>http://twh233.github.io/2020/09/12/查找与排序-KMP算法栈队列/</id>
    <published>2020-09-12T09:20:57.000Z</published>
    <updated>2020-09-13T06:34:22.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><p>稳定性：不稳定</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><p>例子：拿扑克牌排序</p><p>Input: {4, 3, 8, 5, 2, 6, 1, 7}。</p><p>首先拿起第一张牌, 手上有 {4}。</p><p>拿起第二张牌 3, 把 3insert 到手上的牌 {4}, 得到 {3 ，4}。</p><p>拿起第三张牌 8, 把 8 insert 到手上的牌 {3，4 }, 得到 {3 ，4，8}。</p><p>以此类推。</p><p>稳定性：稳定</p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>分治做法，先分组，把自己组内的先排好序，再合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void shell_sort(int *data, int length) &#123;</span><br><span class="line">    int gap = 0;</span><br><span class="line">    int i = 0, j = 0;</span><br><span class="line"></span><br><span class="line">    for (gap = length / 2; gap &gt;= 1; gap /= 2) &#123; // 第一层是分组</span><br><span class="line">        for (i = gap; i &lt; length; i++) &#123; // 第二层是先保证前面有序，再遍历后面</span><br><span class="line">            int temp = data[i];</span><br><span class="line">            for (j = i - gap; j &gt;= 0 &amp;&amp; temp &lt; data[j]; j -= gap) &#123; //把大的挪到后面</span><br><span class="line">                data[j + gap] = data[j];</span><br><span class="line">            &#125;</span><br><span class="line">            data[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平均O(1.3n)</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>分治，把一个集合分成两部分，第一部分再分成两部分，第二部分再分成两部分，直到分到最后一层是两块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void sort(int *data, int *temp, int start, int mid, int end) &#123;</span><br><span class="line">    int i = start, j = mid + 1, k = start;</span><br><span class="line">    while (i &lt;= mid &amp;&amp; j &lt;= end) &#123;</span><br><span class="line">        if (data[i] &lt; data[j]) &#123;</span><br><span class="line">            temp[k++] = data[i++];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            temp[k++] = data[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while (i &lt;= mid) &#123;</span><br><span class="line">        temp[k++] = data[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    while (j &lt;= end) &#123;</span><br><span class="line">        temp[k++] = data[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    for (i = start; i &lt;= end; i++) &#123;</span><br><span class="line">        data[i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void merge_sort(int *data, int *temp, int start, int end) &#123;</span><br><span class="line">    if (start &lt; end) &#123;</span><br><span class="line">        int mid = start + (end - start) / 2;</span><br><span class="line">        merge_sort(data, temp, start, mid);</span><br><span class="line">        merge_sort(data, temp, mid + 1, end);</span><br><span class="line">        sort(data, temp, start, mid, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最差和最好都是 O(nlogn) 稳定</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>第一个值作为哨兵位，从最左端到最右端，如果满足条件，右端–，左端++，直到左端等于右端，那么就确定了哨兵位的位置，赋值即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">void sort(int *data, int left, int right) &#123;</span><br><span class="line"></span><br><span class="line">if (left &gt;= right) return ;</span><br><span class="line"></span><br><span class="line">int i = left;</span><br><span class="line">int j = right;</span><br><span class="line">int key = data[left];</span><br><span class="line"></span><br><span class="line">while (i &lt; j) &#123;</span><br><span class="line"></span><br><span class="line">while (i &lt; j &amp;&amp; key &lt;= data[j]) &#123;</span><br><span class="line">j --;</span><br><span class="line">&#125;</span><br><span class="line">data[i] = data[j];</span><br><span class="line"></span><br><span class="line">while (i &lt; j &amp;&amp; key &gt;= data[i]) &#123;</span><br><span class="line">i ++;</span><br><span class="line">&#125;</span><br><span class="line">data[j] = data[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[i] = key;</span><br><span class="line"></span><br><span class="line">sort(data, left, i - 1);</span><br><span class="line">sort(data, i + 1, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int quick_sort(int *data, int length) &#123;</span><br><span class="line"></span><br><span class="line">sort(data, 0, length-1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>text = “abababababacsdkfasdf”<br>ptn = “abab” 回溯多少。<br>取决于共同前缀与后缀，有多少。<br>abc -&gt; a/ab(前缀) c/bc（后缀）0<br>aba -&gt; a/ab a/ba 1<br>abcabc -&gt; a/ab/abc/abca/abcab<br>          c/bc/abc/cabc/bcabc  3  </p><pre><code>void make_next(const char *pattern, int *next) {    int q, k;    int m = strlen(pattern);    next[0] = 0;    for (q = 1,k = 0;q &lt; m; q ++) {        while (k &gt; 0 &amp;&amp; pattern[q] != pattern[k])            k = next[k-1];        if (pattern[q] == pattern[k]) {            k ++;        }        next[q] = k;    }    // next[0] = 0;    // q=1, k=0, pattern[q]:pattern[k] = b:a, next[1] = 0;    // q=2, k=0, pattern[q]:pattern[k] = c:a, next[2] = 0;    // q=3, k=0, pattern[q]:pattern[k] = a:a, k++, next[3] = 1;    // q=4, k=1, pattern[q]:pattern[k] = b:b, k++, next[4] = 2;    // q=5, k=2, pattern[q]:pattern[k] = c:c, k++, next[5] = 3;    // q=6, k=3, pattern[q]:pattern[k] = d:a, k=next[k-1] -&gt; k=0; next[6] = 0;}int kmp(const char *text, const char *pattern, int *next) {    int n = strlen(text);    int m = strlen(pattern);    make_next(pattern, next);    int i, q;    for (i = 0, q = 0;i &lt; n;i ++) {        while (q &gt; 0 &amp;&amp; pattern[q] != text[i]) {            q = next[q-1];        }        if (pattern[q] == text[i]) {            q ++;        }        if (q == m) {            //printf(&quot;Pattern occurs with shift: %d\n&quot;, (i-m+1));            break;        }    }    return i-q+1;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;h2 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="基础" scheme="http://twh233.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="排序" scheme="http://twh233.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>idea-maven工程配置</title>
    <link href="http://twh233.github.io/2018/08/04/idea-maven%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
    <id>http://twh233.github.io/2018/08/04/idea-maven工程配置/</id>
    <published>2018-08-04T08:55:37.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决idea创建maven工程后无java-resouces文件问题"><a href="#解决idea创建maven工程后无java-resouces文件问题" class="headerlink" title="解决idea创建maven工程后无java,resouces文件问题"></a>解决idea创建maven工程后无java,resouces文件问题</h1><img src="/2018/08/04/idea-maven工程配置/1.png"><ul><li>Project Structure</li></ul><img src="/2018/08/04/idea-maven工程配置/2.png"><ul><li>Modules-Sources</li></ul><img src="/2018/08/04/idea-maven工程配置/3.png"><ul><li>New Folder</li></ul><img src="/2018/08/04/idea-maven工程配置/4.png"><img src="/2018/08/04/idea-maven工程配置/5.png"><h1 id="解决创建properties文件问题"><a href="#解决创建properties文件问题" class="headerlink" title="解决创建properties文件问题"></a>解决创建properties文件问题</h1><img src="/2018/08/04/idea-maven工程配置/6.png"><h1 id="解决idea-application-context-not-configured-for-this-file问题"><a href="#解决idea-application-context-not-configured-for-this-file问题" class="headerlink" title="解决idea application context not configured for this file问题"></a>解决idea application context not configured for this file问题</h1><p>spring配置文件中时常会出现这个提示，翻译过来大概意思就是没有配置该文件到项目中</p><p>于是进入到file-Project Structure中查看</p><p>可以很明显的看到下面有个感叹号，大概意思是下面的文件没有匹配</p><p>知道原因就很好解决问题了，只需要加到项目中去就可以了</p><img src="/2018/08/04/idea-maven工程配置/7.png"><h1 id="解决idea无法创建jsp文件问题"><a href="#解决idea无法创建jsp文件问题" class="headerlink" title="解决idea无法创建jsp文件问题"></a>解决idea无法创建jsp文件问题</h1><p>File-&gt;Project Struction -&gt;modules 按加号 新增web,双击web resource directory 修改路径 web resource directory path </p><p>为 当前项目目录/src/webapp -&gt;WEB-INF-&gt;JSP</p><img src="/2018/08/04/idea-maven工程配置/8.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决idea创建maven工程后无java-resouces文件问题&quot;&gt;&lt;a href=&quot;#解决idea创建maven工程后无java-resouces文件问题&quot; class=&quot;headerlink&quot; title=&quot;解决idea创建maven工程后无java,re
      
    
    </summary>
    
      <category term="idea" scheme="http://twh233.github.io/categories/idea/"/>
    
    
      <category term="idea" scheme="http://twh233.github.io/tags/idea/"/>
    
  </entry>
  
</feed>
