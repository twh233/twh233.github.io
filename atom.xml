<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Twh233&#39;s Blog</title>
  
  <subtitle>Love Coding,Enjoy Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://twh233.github.io/"/>
  <updated>2019-07-16T11:30:04.000Z</updated>
  <id>http://twh233.github.io/</id>
  
  <author>
    <name>Twh233</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实习笔记6</title>
    <link href="http://twh233.github.io/2019/07/15/%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AE%B06/"/>
    <id>http://twh233.github.io/2019/07/15/实习笔记6/</id>
    <published>2019-07-15T12:07:37.000Z</published>
    <updated>2019-07-16T11:30:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-连接服务器"><a href="#1-连接服务器" class="headerlink" title="1. 连接服务器"></a>1. 连接服务器</h2><p>证书连接服务器<br><img src="/2019/07/15/实习笔记6/1.jpg"></p><img src="/2019/07/15/实习笔记6/2.jpg"><h2 id="2-gojsonq-一个用来查询JSON数据的简单Go包"><a href="#2-gojsonq-一个用来查询JSON数据的简单Go包" class="headerlink" title="2. gojsonq 一个用来查询JSON数据的简单Go包"></a>2. gojsonq 一个用来查询JSON数据的简单Go包</h2><p><a href="https://php.ctolib.com/thedevsaddam-gojsonq.html" target="_blank" rel="noopener">https://php.ctolib.com/thedevsaddam-gojsonq.html</a></p><img src="/2019/07/15/实习笔记6/gojson.png"><h2 id="3-golang-调用lua-插件"><a href="#3-golang-调用lua-插件" class="headerlink" title="3. golang 调用lua 插件"></a>3. golang 调用lua 插件</h2><p><a href="https://github.com/yuin/gopher-lua" target="_blank" rel="noopener">https://github.com/yuin/gopher-lua</a></p><h2 id="4-golang-exec"><a href="#4-golang-exec" class="headerlink" title="4. golang exec"></a>4. golang exec</h2><img src="/2019/07/15/实习笔记6/exec.png"><h2 id="5-常见lua-报错"><a href="#5-常见lua-报错" class="headerlink" title="5. 常见lua 报错"></a>5. 常见lua 报错</h2><p><a href="https://blog.csdn.net/yuanfengyun/article/details/78001988" target="_blank" rel="noopener">https://blog.csdn.net/yuanfengyun/article/details/78001988</a></p><h2 id="6-golang-解析-json"><a href="#6-golang-解析-json" class="headerlink" title="6. golang 解析 json"></a>6. golang 解析 json</h2><img src="/2019/07/15/实习笔记6/3.png"> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-连接服务器&quot;&gt;&lt;a href=&quot;#1-连接服务器&quot; class=&quot;headerlink&quot; title=&quot;1. 连接服务器&quot;&gt;&lt;/a&gt;1. 连接服务器&lt;/h2&gt;&lt;p&gt;证书连接服务器&lt;br&gt;&lt;img src=&quot;/2019/07/15/实习笔记6/1.jpg&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="实习" scheme="http://twh233.github.io/categories/%E5%AE%9E%E4%B9%A0/"/>
    
    
      <category term="实习" scheme="http://twh233.github.io/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>idea-maven工程配置</title>
    <link href="http://twh233.github.io/2018/08/04/idea-maven%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
    <id>http://twh233.github.io/2018/08/04/idea-maven工程配置/</id>
    <published>2018-08-04T08:55:37.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决idea创建maven工程后无java-resouces文件问题"><a href="#解决idea创建maven工程后无java-resouces文件问题" class="headerlink" title="解决idea创建maven工程后无java,resouces文件问题"></a>解决idea创建maven工程后无java,resouces文件问题</h1><img src="/2018/08/04/idea-maven工程配置/1.png"><ul><li>Project Structure</li></ul><img src="/2018/08/04/idea-maven工程配置/2.png"><ul><li>Modules-Sources</li></ul><img src="/2018/08/04/idea-maven工程配置/3.png"><ul><li>New Folder</li></ul><img src="/2018/08/04/idea-maven工程配置/4.png"><img src="/2018/08/04/idea-maven工程配置/5.png"><h1 id="解决创建properties文件问题"><a href="#解决创建properties文件问题" class="headerlink" title="解决创建properties文件问题"></a>解决创建properties文件问题</h1><img src="/2018/08/04/idea-maven工程配置/6.png"><h1 id="解决idea-application-context-not-configured-for-this-file问题"><a href="#解决idea-application-context-not-configured-for-this-file问题" class="headerlink" title="解决idea application context not configured for this file问题"></a>解决idea application context not configured for this file问题</h1><p>spring配置文件中时常会出现这个提示，翻译过来大概意思就是没有配置该文件到项目中</p><p>于是进入到file-Project Structure中查看</p><p>可以很明显的看到下面有个感叹号，大概意思是下面的文件没有匹配</p><p>知道原因就很好解决问题了，只需要加到项目中去就可以了</p><img src="/2018/08/04/idea-maven工程配置/7.png"><h1 id="解决idea无法创建jsp文件问题"><a href="#解决idea无法创建jsp文件问题" class="headerlink" title="解决idea无法创建jsp文件问题"></a>解决idea无法创建jsp文件问题</h1><p>File-&gt;Project Struction -&gt;modules 按加号 新增web,双击web resource directory 修改路径 web resource directory path </p><p>为 当前项目目录/src/webapp -&gt;WEB-INF-&gt;JSP</p><img src="/2018/08/04/idea-maven工程配置/8.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决idea创建maven工程后无java-resouces文件问题&quot;&gt;&lt;a href=&quot;#解决idea创建maven工程后无java-resouces文件问题&quot; class=&quot;headerlink&quot; title=&quot;解决idea创建maven工程后无java,re
      
    
    </summary>
    
      <category term="idea" scheme="http://twh233.github.io/categories/idea/"/>
    
    
      <category term="idea" scheme="http://twh233.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>property文件创建</title>
    <link href="http://twh233.github.io/2018/07/27/property%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA/"/>
    <id>http://twh233.github.io/2018/07/27/property文件创建/</id>
    <published>2018-07-27T09:19:08.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>new-&gt;other-&gt;file-&gt;名字即可</p><img src="/2018/07/27/property文件创建/1.png"><img src="/2018/07/27/property文件创建/2.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;new-&amp;gt;other-&amp;gt;file-&amp;gt;名字即可&lt;/p&gt;
&lt;img src=&quot;/2018/07/27/property文件创建/1.png&quot;&gt;
&lt;img src=&quot;/2018/07/27/property文件创建/2.png&quot;&gt;

      
    
    </summary>
    
      <category term="Maven" scheme="http://twh233.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://twh233.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse-Maven-创建SSM项目</title>
    <link href="http://twh233.github.io/2018/07/19/Eclipse-Maven-%E5%88%9B%E5%BB%BASSM%E9%A1%B9%E7%9B%AE/"/>
    <id>http://twh233.github.io/2018/07/19/Eclipse-Maven-创建SSM项目/</id>
    <published>2018-07-19T02:26:02.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建Maven-web-项目"><a href="#1-创建Maven-web-项目" class="headerlink" title="1.创建Maven web 项目"></a>1.创建Maven web 项目</h2><p>File-&gt;New-&gt;Other-&gt;Maven-&gt;Maven Project</p><img src="/2018/07/19/Eclipse-Maven-创建SSM项目/1.png"><h2 id="2-maven-archetype-webapp"><a href="#2-maven-archetype-webapp" class="headerlink" title="2.maven-archetype-webapp"></a>2.maven-archetype-webapp</h2><p>选择 maven-archetype-webapp</p><img src="/2018/07/19/Eclipse-Maven-创建SSM项目/2.png"><h2 id="3-设置GroupId和Artifact-Id"><a href="#3-设置GroupId和Artifact-Id" class="headerlink" title="3.设置GroupId和Artifact Id"></a>3.设置GroupId和Artifact Id</h2><img src="/2018/07/19/Eclipse-Maven-创建SSM项目/3.png"><h2 id="4-创建java-源代码目录"><a href="#4-创建java-源代码目录" class="headerlink" title="4.创建java 源代码目录"></a>4.创建java 源代码目录</h2><p>在上一步的截图中可以发现，没有地方存放java源文件，这个时候就需要按照如下步骤做：<br>右键项目-&gt;属性-&gt;Java Build Path-&gt;Libraries-&gt;Edit-&gt;Workspace default<br>JRE-&gt;Finish</p><img src="/2018/07/19/Eclipse-Maven-创建SSM项目/4.png"><h2 id="5-pom-xml"><a href="#5-pom-xml" class="headerlink" title="5.pom.xml"></a>5.pom.xml</h2><p>接着复制粘贴pom.xml为下面的代码。 粘贴之后，jsp本来的报错就消失了，不过出来一个新的问题，要求通过Maven更新项目。</p><img src="/2018/07/19/Eclipse-Maven-创建SSM项目/5.png"><p>右键项目-&gt;Maven-&gt;Update Project，会弹出一个对话框，点击Ok，这个问题就消失了。</p><pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &lt;groupId&gt;com.how2java&lt;/groupId&gt;  &lt;artifactId&gt;ssm&lt;/artifactId&gt;  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;  &lt;packaging&gt;war&lt;/packaging&gt;  &lt;properties&gt;    &lt;spring.version&gt;4.1.3.RELEASE&lt;/spring.version&gt;    &lt;pagehelper.version&gt;5.1.2-beta&lt;/pagehelper.version&gt;    &lt;mysql.version&gt;5.1.6&lt;/mysql.version&gt;    &lt;mybatis.spring.version&gt;1.2.3&lt;/mybatis.spring.version&gt;    &lt;mybatis.version&gt;3.1.1&lt;/mybatis.version&gt;    &lt;junit.version&gt;4.12&lt;/junit.version&gt;    &lt;jstl.version&gt;1.2&lt;/jstl.version&gt;    &lt;jsqlparser.version&gt;1.0&lt;/jsqlparser.version&gt;    &lt;jackson.version&gt;1.2.7&lt;/jackson.version&gt;    &lt;servlet-api.version&gt;3.1.0&lt;/servlet-api.version&gt;    &lt;druid.version&gt;1.0.18&lt;/druid.version&gt;    &lt;log4j.version&gt;1.2.16&lt;/log4j.version&gt;    &lt;commons-logging.version&gt;1.2&lt;/commons-logging.version&gt;    &lt;commons-fileupload.version&gt;1.2.1&lt;/commons-fileupload.version&gt;    &lt;commons-io.version&gt;1.3.2&lt;/commons-io.version&gt;    &lt;commons-lang.version&gt;2.6&lt;/commons-lang.version&gt;    &lt;aopalliance.version&gt;1.0&lt;/aopalliance.version&gt;    &lt;mybatis-generator.version&gt;1.3.5&lt;/mybatis-generator.version&gt;  &lt;/properties&gt;  &lt;dependencies&gt;    &lt;dependency&gt;      &lt;groupId&gt;junit&lt;/groupId&gt;      &lt;artifactId&gt;junit&lt;/artifactId&gt;      &lt;version&gt;${junit.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;      &lt;version&gt;${mybatis.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;      &lt;version&gt;${mybatis.spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;mysql&lt;/groupId&gt;      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;      &lt;version&gt;${mysql.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;      &lt;artifactId&gt;druid&lt;/artifactId&gt;      &lt;version&gt;${druid.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework&lt;/groupId&gt;      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;      &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework&lt;/groupId&gt;      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;      &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework&lt;/groupId&gt;      &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;      &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework&lt;/groupId&gt;      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;      &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework&lt;/groupId&gt;      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;      &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.springframework&lt;/groupId&gt;      &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;      &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- JSP相关 --&gt;    &lt;dependency&gt;      &lt;groupId&gt;jstl&lt;/groupId&gt;      &lt;artifactId&gt;jstl&lt;/artifactId&gt;      &lt;version&gt;${jstl.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;      &lt;version&gt;${servlet-api.version}&lt;/version&gt;      &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;    &lt;!-- pageHelper --&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;      &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;      &lt;version&gt;${pagehelper.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--jsqlparser--&gt;    &lt;dependency&gt;      &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;      &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;      &lt;version&gt;${jsqlparser.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;log4j&lt;/groupId&gt;      &lt;artifactId&gt;log4j&lt;/artifactId&gt;      &lt;version&gt;${log4j.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;commons-logging&lt;/groupId&gt;      &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;      &lt;version&gt;${commons-logging.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;      &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;      &lt;version&gt;${commons-fileupload.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;commons-io&lt;/groupId&gt;      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;      &lt;version&gt;${commons-io.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;commons-lang&lt;/groupId&gt;      &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;      &lt;version&gt;${commons-lang.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;aopalliance&lt;/groupId&gt;      &lt;artifactId&gt;aopalliance&lt;/artifactId&gt;      &lt;version&gt;${aopalliance.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;      &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;      &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;      &lt;version&gt;${mybatis-generator.version}&lt;/version&gt;    &lt;/dependency&gt;  &lt;/dependencies&gt;  &lt;build&gt;    &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;    &lt;plugins&gt;      &lt;!-- 资源文件拷贝插件 --&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;        &lt;version&gt;2.7&lt;/version&gt;        &lt;configuration&gt;          &lt;encoding&gt;UTF-8&lt;/encoding&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;      &lt;!-- java编译插件 --&gt;      &lt;plugin&gt;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;        &lt;version&gt;3.2&lt;/version&gt;        &lt;configuration&gt;          &lt;source&gt;1.8&lt;/source&gt;          &lt;target&gt;1.8&lt;/target&gt;          &lt;encoding&gt;UTF-8&lt;/encoding&gt;        &lt;/configuration&gt;      &lt;/plugin&gt;    &lt;/plugins&gt;    &lt;pluginManagement&gt;      &lt;plugins&gt;        &lt;!-- 配置Tomcat插件 --&gt;        &lt;plugin&gt;          &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;          &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;          &lt;version&gt;2.2&lt;/version&gt;        &lt;/plugin&gt;      &lt;/plugins&gt;    &lt;/pluginManagement&gt;    &lt;resources&gt;      &lt;resource&gt;        &lt;directory&gt;src/main/resources&lt;/directory&gt;        &lt;includes&gt;          &lt;include&gt;**/*.properties&lt;/include&gt;          &lt;include&gt;**/*.xml&lt;/include&gt;          &lt;include&gt;**/*.tld&lt;/include&gt;        &lt;/includes&gt;        &lt;filtering&gt;false&lt;/filtering&gt;      &lt;/resource&gt;      &lt;resource&gt;        &lt;directory&gt;src/main/java&lt;/directory&gt;        &lt;includes&gt;          &lt;include&gt;**/*.properties&lt;/include&gt;          &lt;include&gt;**/*.xml&lt;/include&gt;        &lt;/includes&gt;        &lt;filtering&gt;false&lt;/filtering&gt;      &lt;/resource&gt;    &lt;/resources&gt;  &lt;/build&gt;&lt;/project&gt;</code></pre><h2 id="6-web-xml"><a href="#6-web-xml" class="headerlink" title="6.web.xml"></a>6.web.xml</h2><p>(这里我因为两个项目名重复，把新创建的项目改成了ssm2)</p><p>首先覆盖web.xml<br>把下载下来的xxx/ssm/WebContent/WEB-INF/web.xml<br>复制到当前的 ssm/src/main/webapp/web.xml这里  </p><img src="/2018/07/19/Eclipse-Maven-创建SSM项目/6.png"><h2 id="7-jsp"><a href="#7-jsp" class="headerlink" title="7.jsp"></a>7.jsp</h2><p>接着复制jsp目录</p><img src="/2018/07/19/Eclipse-Maven-创建SSM项目/7.png"><h2 id="8-配置文件"><a href="#8-配置文件" class="headerlink" title="8.配置文件"></a>8.配置文件</h2><p>把三个配置文件复制到 ssm/src/main/resources下面</p><img src="/2018/07/19/Eclipse-Maven-创建SSM项目/8.png"><h2 id="9-java源代码"><a href="#9-java源代码" class="headerlink" title="9.java源代码"></a>9.java源代码</h2><p>把java源代码复制到src/main/java下</p><img src="/2018/07/19/Eclipse-Maven-创建SSM项目/9.png"><h2 id="10-关于Category-xml"><a href="#10-关于Category-xml" class="headerlink" title="10.关于Category.xml"></a>10.关于Category.xml</h2><p>按照maven ssm项目风格来说，这个文件本应该放在Resource目录的mapper文件夹下，但是这么做还要修改配置信息，为了避免问题复杂化，而且考虑到即使放在当前位置也是可以正常工作的，所以就暂时不修改它的位置了。</p><h2 id="11-测试"><a href="#11-测试" class="headerlink" title="11.测试"></a>11.测试</h2><p><a href="http://localhost:8080/ssm/listCategory" target="_blank" rel="noopener">http://localhost:8080/ssm/listCategory</a></p><p>由于我数据库中的数据被我删完了所以</p><img src="/2018/07/19/Eclipse-Maven-创建SSM项目/10.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-创建Maven-web-项目&quot;&gt;&lt;a href=&quot;#1-创建Maven-web-项目&quot; class=&quot;headerlink&quot; title=&quot;1.创建Maven web 项目&quot;&gt;&lt;/a&gt;1.创建Maven web 项目&lt;/h2&gt;&lt;p&gt;File-&amp;gt;New-&amp;
      
    
    </summary>
    
      <category term="Maven" scheme="http://twh233.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://twh233.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse-Maven-Web 创建</title>
    <link href="http://twh233.github.io/2018/07/18/Eclipse-Maven-Web-%E5%88%9B%E5%BB%BA/"/>
    <id>http://twh233.github.io/2018/07/18/Eclipse-Maven-Web-创建/</id>
    <published>2018-07-18T09:25:32.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-新建Maven项目"><a href="#1-新建Maven项目" class="headerlink" title="1.新建Maven项目"></a>1.新建Maven项目</h2><img src="/2018/07/18/Eclipse-Maven-Web-创建/1.png"><h2 id="2-请把Artifact-ld-换成webapp版本"><a href="#2-请把Artifact-ld-换成webapp版本" class="headerlink" title="2.请把Artifact ld 换成webapp版本"></a>2.请把Artifact ld 换成webapp版本</h2><img src="/2018/07/18/Eclipse-Maven-Web-创建/2.png"><h2 id="3-补充名称"><a href="#3-补充名称" class="headerlink" title="3.补充名称"></a>3.补充名称</h2><img src="/2018/07/18/Eclipse-Maven-Web-创建/4.png"><h2 id="4-此时得到的maven-web-项目的问题"><a href="#4-此时得到的maven-web-项目的问题" class="headerlink" title="4.此时得到的maven web 项目的问题"></a>4.此时得到的maven web 项目的问题</h2><p>此时能得到的maven web 项目，不过有两个问题  </p><pre><code>1. 没有java源代码目录  2. index.jsp报错</code></pre><img src="/2018/07/18/Eclipse-Maven-Web-创建/3.png"><h2 id="5-创建java-源代码目录"><a href="#5-创建java-源代码目录" class="headerlink" title="5.创建java 源代码目录"></a>5.创建java 源代码目录</h2><p>在上一步的截图中可以发现，没有地方存放java源文件，这个时候就需要按照如下步骤做：<br>右键项目-&gt;属性-&gt;Java Build Path-&gt;Libraries-&gt;Edit-&gt;Workspace default<br>JRE-&gt;Finish</p><img src="/2018/07/18/Eclipse-Maven-Web-创建/5.png"><h2 id="6-通过-pom-xml添加servlet-jar-包"><a href="#6-通过-pom-xml添加servlet-jar-包" class="headerlink" title="6.通过 pom.xml添加servlet jar 包"></a>6.通过 pom.xml添加servlet jar 包</h2><img src="/2018/07/18/Eclipse-Maven-Web-创建/11.png"><p>add之后<br><img src="/2018/07/18/Eclipse-Maven-Web-创建/12.png"></p><p>若此时仓库中一个包都没有，那么需要在远程下载包到仓库中</p><p>具体做法：<br>Windows-&gt;Preferences-&gt;Maven</p><img src="/2018/07/18/Eclipse-Maven-Web-创建/13.png"><p>重启eclipse</p><h2 id="7-最后如果pom-xml报错"><a href="#7-最后如果pom-xml报错" class="headerlink" title="7.最后如果pom.xml报错"></a>7.最后如果pom.xml报错</h2><p>估计是你的本地仓库里的包没有下完全</p><p>右键项目-&gt;Maven-&gt;Update Project</p><img src="/2018/07/18/Eclipse-Maven-Web-创建/15.png"><h2 id="8-效果"><a href="#8-效果" class="headerlink" title="8.效果"></a>8.效果</h2><img src="/2018/07/18/Eclipse-Maven-Web-创建/最终.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-新建Maven项目&quot;&gt;&lt;a href=&quot;#1-新建Maven项目&quot; class=&quot;headerlink&quot; title=&quot;1.新建Maven项目&quot;&gt;&lt;/a&gt;1.新建Maven项目&lt;/h2&gt;&lt;img src=&quot;/2018/07/18/Eclipse-Maven-W
      
    
    </summary>
    
      <category term="Maven" scheme="http://twh233.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://twh233.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse Maven 创建</title>
    <link href="http://twh233.github.io/2018/07/18/Eclipse-Maven-%E5%88%9B%E5%BB%BA/"/>
    <id>http://twh233.github.io/2018/07/18/Eclipse-Maven-创建/</id>
    <published>2018-07-18T08:45:15.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-新建Maven-项目"><a href="#1-新建Maven-项目" class="headerlink" title="1.新建Maven 项目"></a>1.新建Maven 项目</h2><p>菜单-&gt;File-&gt;New-&gt;Other-&gt;Maven-&gt;Maven Project</p><img src="/2018/07/18/Eclipse-Maven-创建/1.png"><h2 id="2-这个界面使用默认的选项，点下一步"><a href="#2-这个界面使用默认的选项，点下一步" class="headerlink" title="2.这个界面使用默认的选项，点下一步"></a>2.这个界面使用默认的选项，点下一步</h2><img src="/2018/07/18/Eclipse-Maven-创建/2.png"><h2 id="3-填写信息"><a href="#3-填写信息" class="headerlink" title="3.填写信息"></a>3.填写信息</h2><p>Group Id： 填写包名<br>Artifact Id: 填写j2se<br>然后点击Finish</p><img src="/2018/07/18/Eclipse-Maven-创建/3.png"><h2 id="4-运行App"><a href="#4-运行App" class="headerlink" title="4.运行App"></a>4.运行App</h2><img src="/2018/07/18/Eclipse-Maven-创建/4.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-新建Maven-项目&quot;&gt;&lt;a href=&quot;#1-新建Maven-项目&quot; class=&quot;headerlink&quot; title=&quot;1.新建Maven 项目&quot;&gt;&lt;/a&gt;1.新建Maven 项目&lt;/h2&gt;&lt;p&gt;菜单-&amp;gt;File-&amp;gt;New-&amp;gt;Other-
      
    
    </summary>
    
      <category term="Maven" scheme="http://twh233.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://twh233.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>SSM-restful风格</title>
    <link href="http://twh233.github.io/2018/07/18/SSM-restful%E9%A3%8E%E6%A0%BC/"/>
    <id>http://twh233.github.io/2018/07/18/SSM-restful风格/</id>
    <published>2018-07-18T07:41:15.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Restful简介"><a href="#1-Restful简介" class="headerlink" title="1.Restful简介"></a>1.Restful简介</h2><p>大家在做Web开发的过程中，method常用的值是get和post. 可事实上，method值还可以是put和delete等等其他值。<br>既然method值如此丰富，那么就可以考虑使用同一个url，但是约定不同的method来实施不同的业务，这就是Restful的基本考虑。<br>CRUD是最常见的操作，在使用Restful 风格之前，通常的增加做法是这样的：</p><pre><code>/addCategory?name=xxx</code></pre><p>可是使用了Restful风格之后，增加就变成了：</p><pre><code>/category</code></pre><p>CRUD如下表所示，URL就都使用一样的 “/category”，区别只是在于method不同，服务器根据method的不同来判断浏览器期望做的业务行为</p><img src="/2018/07/18/SSM-restful风格/1.png"><h2 id="2-效果"><a href="#2-效果" class="headerlink" title="2.效果"></a>2.效果</h2><p>地址：<a href="http://127.0.0.1:8080/ssm/category" target="_blank" rel="noopener">http://127.0.0.1:8080/ssm/category</a></p><img src="/2018/07/18/SSM-restful风格/2.png"><h2 id="3-web-xml"><a href="#3-web-xml" class="headerlink" title="3.web.xml"></a>3.web.xml</h2><p>SpringMVC 只能处理post和get,为了还原对put和delete的处理，web.xml里面要加如下过滤器</p><pre><code>&lt;filter&gt;   &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;   &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt;   &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;   &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;</code></pre><p><br></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;         xmlns:web=&quot;http://java.sun.com/xml/ns/javaee&quot;         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt;    &lt;!-- spring的配置文件--&gt;    &lt;context-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;listener&gt;        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;    &lt;/listener&gt;    &lt;filter&gt;       &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;       &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;       &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;       &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;    &lt;filter&gt;         &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;         &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;         &lt;init-param&gt;             &lt;param-name&gt;encoding&lt;/param-name&gt;             &lt;param-value&gt;utf-8&lt;/param-value&gt;         &lt;/init-param&gt;     &lt;/filter&gt;     &lt;filter-mapping&gt;         &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;         &lt;url-pattern&gt;/*&lt;/url-pattern&gt;     &lt;/filter-mapping&gt;        &lt;!-- spring mvc核心：分发servlet --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;!-- spring mvc的配置文件 --&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><h2 id="4-listCategory-jsp"><a href="#4-listCategory-jsp" class="headerlink" title="4.listCategory.jsp"></a>4.listCategory.jsp</h2><p>listCategory.jsp 做了如下修改  </p><ol><li><p>增加<br>1.1 action修改为”category”<br>1.2 增加如下filed, 虽然这个form的method是post, 但是springmvc看到这个_method的值是put后，会把其修改为put.  </p><pre><code>&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;</code></pre></li></ol><ol start="2"><li><p>删除<br>2.1 url修改为category/id<br>2.2 点击超链后，会使用form提交，并且提交_method的值为delete,以达到和增加类似的效果</p><pre><code>$(function(){                          $(&quot;.delete&quot;).click(function(){         var href=$(this).attr(&quot;href&quot;);         $(&quot;#formdelete&quot;).attr(&quot;action&quot;,href).submit();         return false;     }) }) </code></pre></li></ol><ol start="3"><li><p>获取<br>3.1 url修改为了/category/id</p></li><li><p>在最开始增加了jquery.min.js的引入</p><script type="text/javascript" src="js/jquery.min.js"></script></li></ol><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/javascript&quot;&gt;       /*将post method 改变为delete*/      $(function(){                               $(&quot;.delete&quot;).click(function(){               var href=$(this).attr(&quot;href&quot;);               $(&quot;#formdelete&quot;).attr(&quot;action&quot;,href).submit();               return false;           })       })   &lt;/script&gt; &lt;div style=&quot;width:500px;margin:0px auto;text-align:center&quot;&gt;    &lt;table align=&apos;center&apos; border=&apos;1&apos; cellspacing=&apos;0&apos;&gt;        &lt;tr&gt;            &lt;td&gt;id&lt;/td&gt;            &lt;td&gt;name&lt;/td&gt;            &lt;td&gt;编辑&lt;/td&gt;            &lt;td&gt;删除&lt;/td&gt;        &lt;/tr&gt;        &lt;c:forEach items=&quot;${cs}&quot; var=&quot;c&quot; varStatus=&quot;st&quot;&gt;            &lt;tr&gt;                &lt;td&gt;${c.id}&lt;/td&gt;                &lt;td&gt;${c.name}&lt;/td&gt;                &lt;td&gt;&lt;a href=&quot;category/${c.id}&quot;&gt;编辑&lt;/a&gt;&lt;/td&gt;                &lt;td&gt;&lt;a class=&quot;delete&quot; href=&quot;category/${c.id}&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/c:forEach&gt;    &lt;/table&gt;    &lt;div style=&quot;text-align:center&quot;&gt;        &lt;a href=&quot;?start=0&quot;&gt;首  页&lt;/a&gt;        &lt;a href=&quot;?start=${page.start-page.count}&quot;&gt;上一页&lt;/a&gt;        &lt;a href=&quot;?start=${page.start+page.count}&quot;&gt;下一页&lt;/a&gt;        &lt;a href=&quot;?start=${page.last}&quot;&gt;末  页&lt;/a&gt;    &lt;/div&gt;    &lt;div style=&quot;text-align:center;margin-top:40px&quot;&gt;        &lt;form method=&quot;post&quot; action=&quot;category&quot;&gt;        &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;PUT&quot;&gt;            分类名称： &lt;input name=&quot;name&quot; value=&quot;&quot; type=&quot;text&quot;&gt; &lt;br&gt;&lt;br&gt;            &lt;input type=&quot;submit&quot; value=&quot;增加分类&quot;&gt;        &lt;/form&gt;    &lt;/div&gt;    &lt;/div&gt;    &lt;form id=&quot;formdelete&quot; action=&quot;&quot; method=&quot;POST&quot; &gt;       &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt;   &lt;/form&gt;</code></pre><h2 id="5-editCategory-jsp"><a href="#5-editCategory-jsp" class="headerlink" title="5.editCategory.jsp"></a>5.editCategory.jsp</h2><p>action修改为了 category/id</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;div style=&quot;width:500px;margin:0px auto;text-align:center&quot;&gt;    &lt;div style=&quot;text-align:center;margin-top:40px&quot;&gt;        &lt;form method=&quot;post&quot; action=&quot;../category/${c.id}&quot;&gt;            分类名称： &lt;input name=&quot;name&quot; value=&quot;${c.name}&quot; type=&quot;text&quot;&gt; &lt;br&gt;&lt;br&gt;            &lt;input type=&quot;submit&quot; value=&quot;修改分类&quot;&gt;        &lt;/form&gt;    &lt;/div&gt;    &lt;/div&gt;</code></pre><h2 id="6-CategoryController"><a href="#6-CategoryController" class="headerlink" title="6.CategoryController"></a>6.CategoryController</h2><p>CRUD的RequestMapping都修改为了/category,只是method各不相同。<br>其他的没变化</p><pre><code>package com.how2java.controller;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.ModelAndView;import com.how2java.pojo.Category;import com.how2java.service.CategoryService;import com.how2java.util.Page;// 告诉spring mvc这是一个控制器类@Controller@RequestMapping(&quot;&quot;)public class CategoryController {    @Autowired    CategoryService categoryService;    @RequestMapping(value=&quot;/category&quot;,method=RequestMethod.GET)    public ModelAndView listCategory(Page page){        ModelAndView mav = new ModelAndView();        List&lt;Category&gt; cs= categoryService.list(page);        int total = categoryService.total();        page.caculateLast(total);        // 放入转发参数        mav.addObject(&quot;cs&quot;, cs);        // 放入jsp路径        mav.setViewName(&quot;listCategory&quot;);        return mav;    }    @RequestMapping(value=&quot;/category&quot;,method=RequestMethod.PUT)    public ModelAndView addCategory(Category category){        System.out.println(&quot;category.getName():&quot;+category.getName());        categoryService.add(category);        ModelAndView mav = new ModelAndView(&quot;redirect:/category&quot;);        return mav;    }      @RequestMapping(value=&quot;/category/{id}&quot;,method=RequestMethod.DELETE)    public ModelAndView deleteCategory(Category category){        categoryService.delete(category);        ModelAndView mav = new ModelAndView(&quot;redirect:/category&quot;);        return mav;    }      @RequestMapping(value=&quot;/category/{id}&quot;,method=RequestMethod.GET)    public ModelAndView editCategory(Category category){        Category c= categoryService.get(category.getId());        ModelAndView mav = new ModelAndView(&quot;editCategory&quot;);        mav.addObject(&quot;c&quot;, c);        return mav;    }      @RequestMapping(value=&quot;/category/{id}&quot;,method=RequestMethod.POST)    public ModelAndView updateCategory(Category category){        categoryService.update(category);        ModelAndView mav = new ModelAndView(&quot;redirect:/category&quot;);        return mav;    }  }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Restful简介&quot;&gt;&lt;a href=&quot;#1-Restful简介&quot; class=&quot;headerlink&quot; title=&quot;1.Restful简介&quot;&gt;&lt;/a&gt;1.Restful简介&lt;/h2&gt;&lt;p&gt;大家在做Web开发的过程中，method常用的值是get和post.
      
    
    </summary>
    
      <category term="SSM" scheme="http://twh233.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="http://twh233.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM-json</title>
    <link href="http://twh233.github.io/2018/07/18/SSM-json/"/>
    <id>http://twh233.github.io/2018/07/18/SSM-json/</id>
    <published>2018-07-18T07:09:41.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-jqeury-min-js"><a href="#1-jqeury-min-js" class="headerlink" title="1.jqeury.min.js"></a>1.jqeury.min.js</h2><img src="/2018/07/18/SSM-json/1.png"><h2 id="2-json中文问题"><a href="#2-json中文问题" class="headerlink" title="2.json中文问题"></a>2.json中文问题</h2><p>虽然在spring mvc 中文问题里已经提供了过滤器进行ssm的中文处理，但是json处理还要加点额外的内容。<br>把原本的 </p><pre><code>&lt;mvc:annotation-driven /&gt; </code></pre><p>修改为如下：</p><pre><code>&lt;mvc:annotation-driven &gt;   &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;      &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;         &lt;property name=&quot;supportedMediaTypes&quot; value=&quot;text/plain;charset=UTF-8&quot; /&gt;      &lt;/bean&gt;   &lt;/mvc:message-converters&gt;    &lt;/mvc:annotation-driven&gt;</code></pre><p><br></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt;    &lt;context:annotation-config/&gt;    &lt;context:component-scan base-package=&quot;com.how2java.controller&quot;&gt;          &lt;context:include-filter type=&quot;annotation&quot;          expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;    &lt;/context:component-scan&gt;    &lt;mvc:annotation-driven &gt;       &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;          &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;             &lt;property name=&quot;supportedMediaTypes&quot; value=&quot;text/plain;charset=UTF-8&quot; /&gt;          &lt;/bean&gt;       &lt;/mvc:message-converters&gt;       &lt;/mvc:annotation-driven&gt;    &lt;mvc:default-servlet-handler /&gt;    &lt;bean        class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;viewClass&quot;            value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><h2 id="3-CategoryController"><a href="#3-CategoryController" class="headerlink" title="3.CategoryController"></a>3.CategoryController</h2><p>控制器里提供3个方法，分别用来处理json 提交，json获取单个对象，json获取多个对象</p><pre><code>package com.how2java.controller;import java.util.ArrayList;import java.util.List;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.alibaba.fastjson.JSONObject;import com.how2java.pojo.Category;// 告诉spring mvc这是一个控制器类@Controller@RequestMapping(&quot;&quot;)public class CategoryController {    @ResponseBody    @RequestMapping(&quot;/submitCategory&quot;)    public String submitCategory(@RequestBody Category category) {        System.out.println(&quot;SSM接受到浏览器提交的json，并转换为Category对象:&quot;+category);        return &quot;ok&quot;;    }    @ResponseBody    @RequestMapping(&quot;/getOneCategory&quot;)    public String getOneCategory() {         Category c = new Category();         c.setId(100);         c.setName(&quot;第100个分类&quot;);         JSONObject json= new JSONObject();         json.put(&quot;category&quot;, JSONObject.toJSON(c));         return json.toJSONString();    }    @ResponseBody    @RequestMapping(&quot;/getManyCategory&quot;)    public String getManyCategory() {        List&lt;Category&gt; cs = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; 10; i++) {            Category c = new Category();            c.setId(i);            c.setName(&quot;分类名称:&quot;+i);            cs.add(c);        }        return JSONObject.toJSON(cs).toString();    }}</code></pre><h2 id="4-submit-html"><a href="#4-submit-html" class="headerlink" title="4.submit.html"></a>4.submit.html</h2><p>提交成功后，在tomcat控制台查看使用json方式提交的数据</p><p>注： 不要在eclipse自带的浏览器里面点击，自带的浏览器有bug，有时候不能识别jquery, 会导致点击没有反应。 使用独立的浏览器，比如chrome,firefox点击测试</p><img src="/2018/07/18/SSM-json/2.png"><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;用AJAX以JSON方式提交数据&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt;     &lt;form &gt;        id：&lt;input type=&quot;text&quot; id=&quot;id&quot; value=&quot;123&quot; /&gt;&lt;br/&gt;        名称：&lt;input type=&quot;text&quot; id=&quot;name&quot; value=&quot;category xxx&quot;/&gt;&lt;br/&gt;         &lt;input type=&quot;button&quot; value=&quot;提交&quot; id=&quot;sender&quot;&gt;      &lt;/form&gt;     &lt;div id=&quot;messageDiv&quot;&gt;&lt;/div&gt;     &lt;script&gt;     $(&apos;#sender&apos;).click(function(){         var id=document.getElementById(&apos;id&apos;).value;         var name=document.getElementById(&apos;name&apos;).value;         var category={&quot;name&quot;:name,&quot;id&quot;:id};         var jsonData = JSON.stringify(category);        var page=&quot;submitCategory&quot;;         $.ajax({                type:&quot;post&quot;,               url: page,               data:jsonData,               dataType:&quot;json&quot;,               contentType : &quot;application/json;charset=UTF-8&quot;,               success: function(result){               }            });           alert(&quot;提交成功，请在Tomcat控制台查看服务端接收到的数据&quot;);    });    &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;</code></pre><h2 id="5-getOne-html"><a href="#5-getOne-html" class="headerlink" title="5.getOne.html"></a>5.getOne.html</h2><p>点击按钮，获取json数据</p><img src="/2018/07/18/SSM-json/3.png"><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;用AJAX以JSON方式获取数据&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt;     &lt;input type=&quot;button&quot; value=&quot;通过AJAX获取一个Hero对象---&quot; id=&quot;sender&quot;&gt;      &lt;div id=&quot;messageDiv&quot;&gt;&lt;/div&gt;     &lt;script&gt;     $(&apos;#sender&apos;).click(function(){         var url=&quot;getOneCategory&quot;;         $.post(                url,                function(data) {                     var json=JSON.parse(data);                      var name =json.category.name;                      var id = json.category.id;                     $(&quot;#messageDiv&quot;).html(&quot;分类id：&quot;+ id + &quot;&lt;br&gt;分类名称:&quot; +name );         });      });     &lt;/script&gt; &lt;/body&gt; &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="6-getMany-html"><a href="#6-getMany-html" class="headerlink" title="6.getMany.html"></a>6.getMany.html</h2><p>点击按钮，获取多个json数据</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;用AJAX以JSON方式获取数据&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt;     &lt;input type=&quot;button&quot; value=&quot;通过AJAX获取多个Hero对象111&quot; id=&quot;sender&quot;&gt;      &lt;div id=&quot;messageDiv&quot;&gt;&lt;/div&gt;     &lt;script&gt;     $(&apos;#sender&apos;).click(function(){         var url=&quot;getManyCategory&quot;;         $.post(                url,                function(data) {                    console.log(data);                    var categorys = $.parseJSON(data);                    console.log(categorys.length);                     for(i in categorys){                         var old = $(&quot;#messageDiv&quot;).html();                         var category = categorys[i];                         $(&quot;#messageDiv&quot;).html(old + &quot;&lt;br&gt;&quot;+category.id+&quot;   -----   &quot;+category.name);                      }         });      });     &lt;/script&gt; &lt;/body&gt; &lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-jqeury-min-js&quot;&gt;&lt;a href=&quot;#1-jqeury-min-js&quot; class=&quot;headerlink&quot; title=&quot;1.jqeury.min.js&quot;&gt;&lt;/a&gt;1.jqeury.min.js&lt;/h2&gt;&lt;img src=&quot;/2018/07/18
      
    
    </summary>
    
      <category term="SSM" scheme="http://twh233.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="http://twh233.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM-事务管理</title>
    <link href="http://twh233.github.io/2018/07/18/SSM-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>http://twh233.github.io/2018/07/18/SSM-事务管理/</id>
    <published>2018-07-18T06:07:45.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-MYSQL-表的类型必须是INNODB才支持事务"><a href="#1-MYSQL-表的类型必须是INNODB才支持事务" class="headerlink" title="1.MYSQL 表的类型必须是INNODB才支持事务"></a>1.MYSQL 表的类型必须是INNODB才支持事务</h2><p>在Mysql中，只有当表的类型是INNODB的时候，才支持事务，所以需要把表的类型设置为INNODB,否则无法观察到事务.</p><p>修改表的类型为INNODB的SQL：</p><p>alter table category_ ENGINE  = innodb;</p><p>查看表的类型的SQL</p><p>show table status from how2java; </p><h2 id="2-jar包"><a href="#2-jar包" class="headerlink" title="2.jar包"></a>2.jar包</h2><p>aspectjweaver.jar</p><h2 id="3-CategoryService"><a href="#3-CategoryService" class="headerlink" title="3.CategoryService"></a>3.CategoryService</h2><pre><code>package com.how2java.service;import java.util.List;import com.how2java.pojo.Category;public interface CategoryService {    List&lt;Category&gt; list();    void add(Category c);    void update(Category c);    void delete(Category c);    void deleteAll();    Category get(int id);    void addTwo();}</code></pre><h2 id="4-CategoryServiceImpl"><a href="#4-CategoryServiceImpl" class="headerlink" title="4.CategoryServiceImpl"></a>4.CategoryServiceImpl</h2><p>在CategoryServiceImpl中实现deleteAll和addTwo方法。<br>分别做如下事情：</p><ol><li>删除所有Category  </li><li><p>增加2个Category对象，第一个可以正常增加，第二个因为名字太长，加入会失败。</p><p> package com.how2java.service.impl;</p><p> import java.util.List;</p><p> import org.springframework.beans.factory.annotation.Autowired;<br> import org.springframework.stereotype.Service;</p><p> import com.how2java.mapper.CategoryMapper;<br> import com.how2java.pojo.Category;<br> import com.how2java.service.CategoryService;</p><p> @Service<br> public class CategoryServiceImpl  implements CategoryService{</p><pre><code>@AutowiredCategoryMapper categoryMapper;public List&lt;Category&gt; list(){    return categoryMapper.list();}@Overridepublic void add(Category c) {    // TODO Auto-generated method stub    categoryMapper.add(c);}@Overridepublic void update(Category c) {    // TODO Auto-generated method stub    categoryMapper.update(c);}@Overridepublic void delete(Category c) {    // TODO Auto-generated method stub    categoryMapper.delete(c);}@Overridepublic Category get(int id) {    return categoryMapper.get(id);}@Overridepublic void addTwo() {    // TODO Auto-generated method stub    Category c1 = new Category();    c1.setName(&quot;短的名字&quot;);    categoryMapper.add(c1);    Category c2 = new Category();    c2.setName(&quot;名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,&quot;);    categoryMapper.add(c2);}@Overridepublic void deleteAll() {    // TODO Auto-generated method stub    List&lt;Category&gt; cs = list();    for (Category c : cs) {        categoryMapper.delete(c);    }}</code></pre><p> }</p></li></ol><h2 id="5-MybatisTest"><a href="#5-MybatisTest" class="headerlink" title="5.MybatisTest"></a>5.MybatisTest</h2><p>修改测试类MybatisTest ：注入CategoryService 对象，并调用deleteAll和addTwo方法，运行后在数据库中发现只有只有一条数据插入成功了，说明addTwo方法不是事务管理的。 如果是事务管理的，那么就应该都成功，或者都失败。</p><pre><code>package com.how2java.test;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import com.how2java.service.CategoryService;@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)public class MybatisTest {    @Autowired    private CategoryService categoryService;    @Test    public void testAddTwo() {        categoryService.deleteAll();        categoryService.addTwo();    }}</code></pre><h2 id="6-为addTwo方法加上事务注解"><a href="#6-为addTwo方法加上事务注解" class="headerlink" title="6.为addTwo方法加上事务注解"></a>6.为addTwo方法加上事务注解</h2><pre><code>@Transactional(propagation=Propagation.REQUIRED,rollbackForClassName=&quot;Exception&quot;)</code></pre><p><br> </p><pre><code>package com.how2java.service.impl;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.how2java.mapper.CategoryMapper;import com.how2java.pojo.Category;import com.how2java.service.CategoryService;@Servicepublic class CategoryServiceImpl  implements CategoryService{    @Autowired    CategoryMapper categoryMapper;    public List&lt;Category&gt; list(){        return categoryMapper.list();    }    @Override    public void add(Category c) {        // TODO Auto-generated method stub        categoryMapper.add(c);    }    @Override    public void update(Category c) {        // TODO Auto-generated method stub        categoryMapper.update(c);    }    @Override    public void delete(Category c) {        // TODO Auto-generated method stub        categoryMapper.delete(c);    }    @Override    public Category get(int id) {        return categoryMapper.get(id);    }    @Override    @Transactional(propagation=Propagation.REQUIRED,rollbackForClassName=&quot;Exception&quot;)    public void addTwo() {        // TODO Auto-generated method stub        Category c1 = new Category();        c1.setName(&quot;短的名字&quot;);        categoryMapper.add(c1);        Category c2 = new Category();        c2.setName(&quot;名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,名字长对应字段放不下,&quot;);        categoryMapper.add(c2);    }    @Override    public void deleteAll() {        // TODO Auto-generated method stub        List&lt;Category&gt; cs = list();        for (Category c : cs) {            categoryMapper.delete(c);        }    }}</code></pre><h2 id="7-applicationContext-xml"><a href="#7-applicationContext-xml" class="headerlink" title="7.applicationContext.xml"></a>7.applicationContext.xml</h2><p>修改applicationContext，添加事务管理器和事务注解扫描器<br>以及支持AOP方式</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;   &lt;context:annotation-config /&gt;    &lt;context:component-scan base-package=&quot;com.how2java.service&quot; /&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;        &lt;!-- 基本属性 url、user、password --&gt;        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot; /&gt;        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;        &lt;property name=&quot;password&quot; value=&quot;admin&quot; /&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;        &lt;!-- 配置初始化大小、最小、最大 --&gt;        &lt;property name=&quot;initialSize&quot; value=&quot;3&quot; /&gt;        &lt;property name=&quot;minIdle&quot; value=&quot;3&quot; /&gt;        &lt;property name=&quot;maxActive&quot; value=&quot;20&quot; /&gt;        &lt;!-- 配置获取连接等待超时的时间 --&gt;        &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; /&gt;        &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; /&gt;        &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; /&gt;        &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT 1&quot; /&gt;        &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt;        &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; /&gt;        &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; /&gt;        &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;        &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot; /&gt;        &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot; /&gt;    &lt;/bean&gt;    &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.how2java.pojo&quot; /&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/how2java/mapper/*.xml&quot;/&gt;    &lt;/bean&gt;    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;        &lt;property name=&quot;basePackage&quot; value=&quot;com.how2java.mapper&quot;/&gt;    &lt;/bean&gt;    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;    &lt;/bean&gt;    &lt;aop:config&gt;         &lt;aop:pointcut id=&quot;serviceMethod&quot; expression=&quot;execution(* com.how2java.service.*.*(..))&quot;/&gt;         &lt;aop:advisor pointcut-ref=&quot;serviceMethod&quot; advice-ref=&quot;txadvice&quot;/&gt;     &lt;/aop:config&gt; &lt;/beans&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-MYSQL-表的类型必须是INNODB才支持事务&quot;&gt;&lt;a href=&quot;#1-MYSQL-表的类型必须是INNODB才支持事务&quot; class=&quot;headerlink&quot; title=&quot;1.MYSQL 表的类型必须是INNODB才支持事务&quot;&gt;&lt;/a&gt;1.MYSQL 
      
    
    </summary>
    
      <category term="SSM" scheme="http://twh233.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="http://twh233.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM-CRUD</title>
    <link href="http://twh233.github.io/2018/07/18/SSM-CRUD/"/>
    <id>http://twh233.github.io/2018/07/18/SSM-CRUD/</id>
    <published>2018-07-18T02:53:37.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/07/18/SSM-CRUD/1.png"><h2 id="1-添加log4j-properties"><a href="#1-添加log4j-properties" class="headerlink" title="1.添加log4j.properties"></a>1.添加log4j.properties</h2><p>用来记录日志</p><pre><code># Global logging configurationlog4j.rootLogger=ERROR, stdout# MyBatis logging configuration...log4j.logger.com.how2java=TRACE# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</code></pre><h2 id="2-CategoryConroller-java"><a href="#2-CategoryConroller-java" class="headerlink" title="2.CategoryConroller.java"></a>2.CategoryConroller.java</h2><p>在控制器中把所有请求都写好</p><pre><code>package com.how2java.controller;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.ModelAndView;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.how2java.pojo.Category;import com.how2java.service.CategoryService;import com.how2java.util.Page;// 告诉spring mvc这是一个控制器类@Controller@RequestMapping(&quot;&quot;)public class CategoryController {    @Autowired    CategoryService categoryService;    @RequestMapping(&quot;listCategory&quot;)    public ModelAndView listCategory(Page page){        ModelAndView mav = new ModelAndView();        PageHelper.offsetPage(page.getStart(),5);        List&lt;Category&gt; cs= categoryService.list();        int total = (int) new PageInfo&lt;&gt;(cs).getTotal();        page.caculatelast(total);        // 放入转发参数        mav.addObject(&quot;cs&quot;, cs);        // 放入jsp路径        mav.setViewName(&quot;listCategory&quot;);        return mav;    }    @RequestMapping(&quot;addCategory&quot;)    public ModelAndView addCategory(Category category){        categoryService.add(category);        ModelAndView mav = new ModelAndView(&quot;redirect:/listCategory&quot;);        return mav;    }        @RequestMapping(&quot;deleteCategory&quot;)    public ModelAndView deleteCategory(Category category){        categoryService.delete(category);        ModelAndView mav = new ModelAndView(&quot;redirect:/listCategory&quot;);        return mav;    }        @RequestMapping(&quot;editCategory&quot;)    public ModelAndView editCategory(Category category){        Category c= categoryService.get(category.getId());        ModelAndView mav = new ModelAndView(&quot;editCategory&quot;);        mav.addObject(&quot;c&quot;, c);        return mav;    }        @RequestMapping(&quot;updateCategory&quot;)    public ModelAndView updateCategory(Category category){        categoryService.update(category);        ModelAndView mav = new ModelAndView(&quot;redirect:/listCategory&quot;);        return mav;    }    }</code></pre><h2 id="3-CategoryMapper-java"><a href="#3-CategoryMapper-java" class="headerlink" title="3.CategoryMapper.java"></a>3.CategoryMapper.java</h2><pre><code>package com.how2java.mapper;import java.util.List;import com.how2java.pojo.Category;import com.how2java.util.Page;public interface CategoryMapper {    public void add(Category category);    public void update(Category category);    public void delete(Category category);    public Category get(int id);    public List&lt;Category&gt; list();}</code></pre><h2 id="4-Category-xml"><a href="#4-Category-xml" class="headerlink" title="4.Category.xml"></a>4.Category.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;    &lt;mapper namespace=&quot;com.how2java.mapper.CategoryMapper&quot;&gt;        &lt;insert id=&quot;add&quot; parameterType=&quot;Category&quot; &gt;            insert into category_ ( name ) values (#{name})        &lt;/insert&gt;        &lt;delete id=&quot;delete&quot; parameterType=&quot;Category&quot;&gt;            delete from category_ where id= #{id}        &lt;/delete&gt;        &lt;select id=&quot;get&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt;            select * from category_ where id= #{id}        &lt;/select&gt;        &lt;update id=&quot;update&quot; parameterType=&quot;Category&quot;&gt;            update category_ set name= #{name} where id= #{id}        &lt;/update&gt;        &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt;            select * from category_        &lt;/select&gt;    &lt;/mapper&gt;</code></pre><h2 id="5-CategoryService-java"><a href="#5-CategoryService-java" class="headerlink" title="5.CategoryService.java"></a>5.CategoryService.java</h2><p>Service端口的接口</p><pre><code>package com.how2java.service;import java.util.List;import com.how2java.pojo.Category;public interface CategoryService {    List&lt;Category&gt; list();    void add(Category c);    void update(Category c);    void delete(Category c);    Category get(int id);}</code></pre><h2 id="6-CategoryServiceImpl-java"><a href="#6-CategoryServiceImpl-java" class="headerlink" title="6.CategoryServiceImpl.java"></a>6.CategoryServiceImpl.java</h2><p>完善接口</p><pre><code>package com.how2java.service.impl;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.how2java.mapper.CategoryMapper;import com.how2java.pojo.Category;import com.how2java.service.CategoryService;@Servicepublic class CategoryServiceImpl  implements CategoryService{    @Autowired    CategoryMapper categoryMapper;    public List&lt;Category&gt; list(){        return categoryMapper.list();    }    @Override    public void add(Category c) {        // TODO Auto-generated method stub        categoryMapper.add(c);    }    @Override    public void update(Category c) {        // TODO Auto-generated method stub        categoryMapper.update(c);    }    @Override    public void delete(Category c) {        // TODO Auto-generated method stub        categoryMapper.delete(c);    }    @Override    public Category get(int id) {        return categoryMapper.get(id);    }}</code></pre><h2 id="7-MybatisTest-java"><a href="#7-MybatisTest-java" class="headerlink" title="7.MybatisTest.java"></a>7.MybatisTest.java</h2><pre><code>package com.how2java.test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import com.how2java.mapper.CategoryMapper;import com.how2java.pojo.Category;@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)public class MybatisTest {    @Autowired    private CategoryMapper categoryMapper;//    @Test    public void testAdd() {        for (int i = 0; i &lt; 100; i++) {            Category category = new Category();            category.setName(&quot;new Category&quot;);            categoryMapper.add(category);        }    }}</code></pre><h2 id="8-listCategory-jsp"><a href="#8-listCategory-jsp" class="headerlink" title="8.listCategory.jsp"></a>8.listCategory.jsp</h2><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;div style=&quot;width:500px;margin:0px auto;text-align:center&quot;&gt;    &lt;table align=&apos;center&apos; border=&apos;1&apos; cellspacing=&apos;0&apos;&gt;        &lt;tr&gt;            &lt;td&gt;id&lt;/td&gt;            &lt;td&gt;name&lt;/td&gt;            &lt;td&gt;编辑&lt;/td&gt;            &lt;td&gt;删除&lt;/td&gt;        &lt;/tr&gt;        &lt;c:forEach items=&quot;${cs}&quot; var=&quot;c&quot; varStatus=&quot;st&quot;&gt;            &lt;tr&gt;                &lt;td&gt;${c.id}&lt;/td&gt;                &lt;td&gt;${c.name}&lt;/td&gt;                &lt;td&gt;&lt;a href=&quot;editCategory?id=${c.id}&quot;&gt;编辑&lt;/a&gt;&lt;/td&gt;                &lt;td&gt;&lt;a href=&quot;deleteCategory?id=${c.id}&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/c:forEach&gt;    &lt;/table&gt;    &lt;div style=&quot;text-align:center&quot;&gt;        &lt;a href=&quot;?start=0&quot;&gt;首  页&lt;/a&gt;        &lt;a href=&quot;?start=${page.start-page.count}&quot;&gt;上一页&lt;/a&gt;        &lt;a href=&quot;?start=${page.start+page.count}&quot;&gt;下一页&lt;/a&gt;        &lt;a href=&quot;?start=${page.last}&quot;&gt;末  页&lt;/a&gt;    &lt;/div&gt;    &lt;div style=&quot;text-align:center;margin-top:40px&quot;&gt;        &lt;form method=&quot;post&quot; action=&quot;addCategory&quot;&gt;            分类名称： &lt;input name=&quot;name&quot; value=&quot;&quot; type=&quot;text&quot;&gt; &lt;br&gt;&lt;br&gt;            &lt;input type=&quot;submit&quot; value=&quot;增加分类&quot;&gt;        &lt;/form&gt;    &lt;/div&gt;    &lt;/div&gt;</code></pre><h2 id="9-editCategory-jsp"><a href="#9-editCategory-jsp" class="headerlink" title="9.editCategory.jsp"></a>9.editCategory.jsp</h2><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;div style=&quot;width:500px;margin:0px auto;text-align:center&quot;&gt;    &lt;div style=&quot;text-align:center;margin-top:40px&quot;&gt;        &lt;form method=&quot;post&quot; action=&quot;updateCategory&quot;&gt;            分类名称： &lt;input name=&quot;name&quot; value=&quot;${c.name}&quot; type=&quot;text&quot;&gt; &lt;br&gt;&lt;br&gt;            &lt;input type=&quot;hidden&quot; value=&quot;${c.id}&quot; name=&quot;id&quot;&gt;            &lt;input type=&quot;submit&quot; value=&quot;增加分类&quot;&gt;        &lt;/form&gt;    &lt;/div&gt;     &lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/07/18/SSM-CRUD/1.png&quot;&gt;
&lt;h2 id=&quot;1-添加log4j-properties&quot;&gt;&lt;a href=&quot;#1-添加log4j-properties&quot; class=&quot;headerlink&quot; title=&quot;1.添加log4j.pro
      
    
    </summary>
    
      <category term="SSM" scheme="http://twh233.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="http://twh233.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM-连接池</title>
    <link href="http://twh233.github.io/2018/07/18/SSM-%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://twh233.github.io/2018/07/18/SSM-连接池/</id>
    <published>2018-07-18T02:51:56.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改applicationContext-xml"><a href="#修改applicationContext-xml" class="headerlink" title="修改applicationContext.xml"></a>修改applicationContext.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;   &lt;context:annotation-config /&gt;    &lt;context:component-scan base-package=&quot;com.how2java.service&quot; /&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;        &lt;!-- 基本属性 url、user、password --&gt;        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot; /&gt;        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;        &lt;property name=&quot;password&quot; value=&quot;admin&quot; /&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;        &lt;!-- 配置初始化大小、最小、最大 --&gt;        &lt;property name=&quot;initialSize&quot; value=&quot;3&quot; /&gt;        &lt;property name=&quot;minIdle&quot; value=&quot;3&quot; /&gt;        &lt;property name=&quot;maxActive&quot; value=&quot;20&quot; /&gt;        &lt;!-- 配置获取连接等待超时的时间 --&gt;        &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; /&gt;        &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; /&gt;        &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; /&gt;        &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT 1&quot; /&gt;        &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; /&gt;        &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; /&gt;        &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; /&gt;        &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;        &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot; /&gt;        &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot; /&gt;    &lt;/bean&gt;&lt;!--     &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;   --&gt;&lt;!--       &lt;property name=&quot;driverClassName&quot;&gt;   --&gt;&lt;!--           &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;   --&gt;&lt;!--       &lt;/property&gt;   --&gt;&lt;!--       &lt;property name=&quot;url&quot;&gt;   --&gt;&lt;!--           &lt;value&gt;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&lt;/value&gt;   --&gt;&lt;!--       &lt;/property&gt;   --&gt;&lt;!--       &lt;property name=&quot;username&quot;&gt;   --&gt;&lt;!--           &lt;value&gt;root&lt;/value&gt;   --&gt;&lt;!--       &lt;/property&gt;   --&gt;&lt;!--       &lt;property name=&quot;password&quot;&gt;   --&gt;&lt;!--           &lt;value&gt;admin&lt;/value&gt;   --&gt;&lt;!--       &lt;/property&gt;      --&gt;&lt;!--     &lt;/bean&gt;    --&gt;    &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.how2java.pojo&quot; /&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/how2java/mapper/*.xml&quot;/&gt;    &lt;/bean&gt;    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;        &lt;property name=&quot;basePackage&quot; value=&quot;com.how2java.mapper&quot;/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修改applicationContext-xml&quot;&gt;&lt;a href=&quot;#修改applicationContext-xml&quot; class=&quot;headerlink&quot; title=&quot;修改applicationContext.xml&quot;&gt;&lt;/a&gt;修改applicationC
      
    
    </summary>
    
      <category term="SSM" scheme="http://twh233.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="http://twh233.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM-PageHelper</title>
    <link href="http://twh233.github.io/2018/07/18/SSM-PageHelper/"/>
    <id>http://twh233.github.io/2018/07/18/SSM-PageHelper/</id>
    <published>2018-07-18T02:37:32.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-jar包"><a href="#1-jar包" class="headerlink" title="1.jar包"></a>1.jar包</h2><p>需要导入的包有pagehelper-5.1.0-beta2.jar，jsqlparser-1.0.jar </p><h2 id="2-applicationContext-xml"><a href="#2-applicationContext-xml" class="headerlink" title="2.applicationContext.xml"></a>2.applicationContext.xml</h2><p>增加PageHelp插件配置</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;     &lt;!-- 1. 通过注解，将Service的生命周期纳入Spring的管理 --&gt;     &lt;context:annotation-config /&gt;     &lt;context:component-scan base-package=&quot;com.how2java.service&quot; /&gt;     &lt;!-- 2. 配置数据源 --&gt;     &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;       &lt;property name=&quot;driverClassName&quot;&gt;           &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;       &lt;/property&gt;       &lt;property name=&quot;url&quot;&gt;              &lt;value&gt;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&lt;/value&gt;       &lt;/property&gt;       &lt;property name=&quot;username&quot;&gt;              &lt;value&gt;root&lt;/value&gt;       &lt;/property&gt;       &lt;property name=&quot;password&quot;&gt;              &lt;value&gt;admin&lt;/value&gt;       &lt;/property&gt;      &lt;/bean&gt;      &lt;!-- 3. 扫描存放SQL语句的Category.xml --&gt;      &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;              &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.how2java.pojo&quot; /&gt;            &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;            &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/how2java/mapper/*.xml&quot;/&gt;            &lt;property name=&quot;plugins&quot;&gt;                &lt;array&gt;                  &lt;bean class=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;                    &lt;property name=&quot;properties&quot;&gt;                      &lt;!--使用下面的方式配置参数，一行配置一个 --&gt;                      &lt;value&gt;                      &lt;/value&gt;                    &lt;/property&gt;                  &lt;/bean&gt;                &lt;/array&gt;             &lt;/property&gt;         &lt;/bean&gt;      &lt;!-- 4. 扫描Mapper，并将其生命周期纳入Spring的管理 --&gt;      &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;            &lt;property name=&quot;basePackage&quot; value=&quot;com.how2java.mapper&quot;/&gt;      &lt;/bean&gt;&lt;/beans&gt;</code></pre><h2 id="3-CategoryService"><a href="#3-CategoryService" class="headerlink" title="3.CategoryService"></a>3.CategoryService</h2><p>CategoryService去掉total方法和list(Page) 方法</p><pre><code>package com.how2java.service;import java.util.List;import com.how2java.pojo.Category;import com.how2java.util.Page;public interface CategoryService {    List&lt;Category&gt; list();}</code></pre><h2 id="4-CategoryServiceImpl"><a href="#4-CategoryServiceImpl" class="headerlink" title="4.CategoryServiceImpl"></a>4.CategoryServiceImpl</h2><p>CategoryServiceImpl去掉total方法和list(Page) 方法</p><pre><code>package com.how2java.service.impl;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.how2java.mapper.CategoryMapper;import com.how2java.pojo.Category;import com.how2java.service.CategoryService;@Servicepublic class CategoryServiceImpl  implements CategoryService{    @Autowired    CategoryMapper categoryMapper;    public List&lt;Category&gt; list(){        return categoryMapper.list();    }}</code></pre><h2 id="5-CategoryMapper"><a href="#5-CategoryMapper" class="headerlink" title="5.CategoryMapper"></a>5.CategoryMapper</h2><p>CategoryMapper去掉total方法和list(Page) 方法</p><pre><code>package com.how2java.mapper;import java.util.List;import com.how2java.pojo.Category;import com.how2java.util.Page;public interface CategoryMapper {    public int add(Category category);     public void delete(int id);     public Category get(int id);     public int update(Category category);      public List&lt;Category&gt; list();}</code></pre><h2 id="6-Category-xml"><a href="#6-Category-xml" class="headerlink" title="6.Category.xml"></a>6.Category.xml</h2><p>Category.xml去掉total对应的sql语句，list也去掉limit</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;    &lt;mapper namespace=&quot;com.how2java.mapper.CategoryMapper&quot;&gt;        &lt;insert id=&quot;add&quot; parameterType=&quot;Category&quot; &gt;            insert into category_ ( name ) values (#{name})           &lt;/insert&gt;        &lt;delete id=&quot;delete&quot; parameterType=&quot;Category&quot; &gt;            delete from category_ where id= #{id}          &lt;/delete&gt;        &lt;select id=&quot;get&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt;            select * from   category_  where id= #{id}           &lt;/select&gt;        &lt;update id=&quot;update&quot; parameterType=&quot;Category&quot; &gt;            update category_ set name=#{name} where id=#{id}           &lt;/update&gt;        &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt;            select * from   category_             &lt;/select&gt;    &lt;/mapper&gt;</code></pre><h2 id="7-CategoryController"><a href="#7-CategoryController" class="headerlink" title="7.CategoryController"></a>7.CategoryController</h2><p>CategoryController在调用categoryService.list(); 之前，执行：</p><p>PageHelper.offsetPage(page.getStart(),5);</p><p>并通过int total = (int) new PageInfo&lt;&gt;(cs).getTotal();获取总数。<br>其他都不变</p><pre><code>package com.how2java.controller;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.support.PagedListHolder;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.ModelAndView;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.how2java.pojo.Category;import com.how2java.service.CategoryService;import com.how2java.util.Page;// 告诉spring mvc这是一个控制器类@Controller@RequestMapping(&quot;&quot;)public class CategoryController {    @Autowired    CategoryService categoryService;    @RequestMapping(&quot;listCategory&quot;)    public ModelAndView listCategory(Page page){        ModelAndView mav = new ModelAndView();        PageHelper.offsetPage(page.getStart(),5);        List&lt;Category&gt; cs= categoryService.list();        int total = (int) new PageInfo&lt;&gt;(cs).getTotal();        page.caculateLast(total);        // 放入转发参数        mav.addObject(&quot;cs&quot;, cs);        // 放入jsp路径        mav.setViewName(&quot;listCategory&quot;);        return mav;    }}</code></pre><h2 id="8-MybatisTest"><a href="#8-MybatisTest" class="headerlink" title="8.MybatisTest"></a>8.MybatisTest</h2><p>注释掉原来的代码 </p><pre><code>package com.how2java.test;import java.util.List;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import com.how2java.mapper.CategoryMapper;import com.how2java.pojo.Category;import com.how2java.util.Page;@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)public class MybatisTest {//    @Autowired//    private CategoryMapper categoryMapper;//////  @Test//    public void testAdd() {//        for (int i = 0; i &lt; 100; i++) {//            Category category = new Category();//            category.setName(&quot;new Category&quot;);//            categoryMapper.add(category);//        }////    }//    //    @Test//    public void testTotal() {//        int total = categoryMapper.total();//        System.out.println(total);//    }////    @Test//    public void testList() {//        Page p = new Page();//        p.setStart(2);//        p.setCount(3);//        List&lt;Category&gt; cs=categoryMapper.list(p);//        for (Category c : cs) {//            System.out.println(c.getName());//        }//    }}</code></pre><h2 id="9-测试"><a href="#9-测试" class="headerlink" title="9.测试"></a>9.测试</h2><img src="/2018/07/18/SSM-PageHelper/1.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-jar包&quot;&gt;&lt;a href=&quot;#1-jar包&quot; class=&quot;headerlink&quot; title=&quot;1.jar包&quot;&gt;&lt;/a&gt;1.jar包&lt;/h2&gt;&lt;p&gt;需要导入的包有pagehelper-5.1.0-beta2.jar，jsqlparser-1.0.jar &lt;
      
    
    </summary>
    
      <category term="SSM" scheme="http://twh233.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="http://twh233.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM-分页</title>
    <link href="http://twh233.github.io/2018/07/18/SSM-%E5%88%86%E9%A1%B5/"/>
    <id>http://twh233.github.io/2018/07/18/SSM-分页/</id>
    <published>2018-07-18T02:09:43.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/07/18/SSM-分页/1.png"><h2 id="分页类-1-Page"><a href="#分页类-1-Page" class="headerlink" title="分页类:1.Page"></a>分页类:1.Page</h2><p>Page类用于存放分页信息：<br>start: 开始位置<br>count: 每页的个数<br>last: 最后一页的位置<br>caculateLast()方法: 通过总数total和每页的个数计算出最后一页的位置</p><pre><code>package com.how2java.util;public class Page {    int start=0;    int count = 5;    int last = 0;    public int getStart() {        return start;    }    public void setStart(int start) {        this.start = start;    }    public int getCount() {        return count;    }    public void setCount(int count) {        this.count = count;    }    public int getLast() {        return last;    }    public void setLast(int last) {        this.last = last;    }    public void caculatelast(int total) {        // 假设总数是50，是能够被5整除的，那么最后一页的开始就是45        if(total % count == 0) {            last = total - count;        }        // 假设总数是51，不能够被5整除的，那么最后一页的开始就是50        else {            last = total - total % count;        }    }}</code></pre><h2 id="2-Category-xml"><a href="#2-Category-xml" class="headerlink" title="2.Category.xml"></a>2.Category.xml</h2><p>修改list，根据当有分页信息的时候，进行分页查询<br>增加total sql语句</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;    &lt;mapper namespace=&quot;com.how2java.mapper.CategoryMapper&quot;&gt;        &lt;insert id=&quot;add&quot; parameterType=&quot;Category&quot; &gt;            insert into category_ ( name ) values (#{name})           &lt;/insert&gt;        &lt;delete id=&quot;delete&quot; parameterType=&quot;Category&quot; &gt;            delete from category_ where id= #{id}          &lt;/delete&gt;        &lt;select id=&quot;get&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt;            select * from   category_  where id= #{id}           &lt;/select&gt;        &lt;update id=&quot;update&quot; parameterType=&quot;Category&quot; &gt;            update category_ set name=#{name} where id=#{id}           &lt;/update&gt;        &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt;            select * from   category_                 &lt;if test=&quot;start!=null and count!=null&quot;&gt;                    limit #{start},#{count}            &lt;/if&gt;        &lt;/select&gt;        &lt;select id=&quot;total&quot; resultType=&quot;int&quot;&gt;            select count(*) from   category_             &lt;/select&gt;                &lt;/mapper&gt;</code></pre><h2 id="3-CategoryMapper"><a href="#3-CategoryMapper" class="headerlink" title="3.CategoryMapper"></a>3.CategoryMapper</h2><p>增加total方法用于调用Category.xml 中total对应的sql语句<br>增加 list(Page page)，根据分页来查询数据</p><pre><code>package com.how2java.mapper;import java.util.List;import com.how2java.pojo.Category;import com.how2java.util.Page;public interface CategoryMapper {    public int add(Category category);     public void delete(int id);     public Category get(int id);     public int update(Category category);      public List&lt;Category&gt; list();    public List&lt;Category&gt; list(Page page);    public int total(); }</code></pre><h2 id="4-CategoryService"><a href="#4-CategoryService" class="headerlink" title="4.CategoryService"></a>4.CategoryService</h2><p>增加total用于获取所有<br>增加 list(Page page)，根据分页来查询数据</p><pre><code>package com.how2java.service;import java.util.List;import com.how2java.pojo.Category;import com.how2java.util.Page;public interface CategoryService {    List&lt;Category&gt; list();    int total();    List&lt;Category&gt; list(Page page);}</code></pre><h2 id="5-CategoryServiceImpl"><a href="#5-CategoryServiceImpl" class="headerlink" title="5.CategoryServiceImpl"></a>5.CategoryServiceImpl</h2><p>实现total()和list(Page page) 方法</p><pre><code>package com.how2java.service.impl;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.how2java.mapper.CategoryMapper;import com.how2java.pojo.Category;import com.how2java.service.CategoryService;import com.how2java.util.Page;@Servicepublic class CategoryServiceImpl  implements CategoryService{    @Autowired    CategoryMapper categoryMapper;    public List&lt;Category&gt; list(){        return categoryMapper.list();    }    @Override    public List&lt;Category&gt; list(Page page) {        // TODO Auto-generated method stub        return categoryMapper.list(page);    }    @Override    public int total() {        return categoryMapper.total();    };}</code></pre><h2 id="6-CategoryController"><a href="#6-CategoryController" class="headerlink" title="6.CategoryController"></a>6.CategoryController</h2><p>修改listCategory，接受分页信息的注入</p><p> listCategory(Page page)</p><p>根据分页对象，进行查询获取对象集合cs</p><p>List<category> cs= categoryService.list(page);</category></p><p>根据总数，计算出最后一页的信息</p><p>int total = categoryService.total();</p><pre><code>package com.how2java.controller;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.ModelAndView;import com.how2java.pojo.Category;import com.how2java.service.CategoryService;import com.how2java.util.Page;// 告诉spring mvc这是一个控制器类@Controller@RequestMapping(&quot;&quot;)public class CategoryController {    @Autowired    CategoryService categoryService;    @RequestMapping(&quot;listCategory&quot;)    public ModelAndView listCategory(Page page){        ModelAndView mav = new ModelAndView();        List&lt;Category&gt; cs= categoryService.list(page);        int total = categoryService.total();        page.caculateLast(total);        // 放入转发参数        mav.addObject(&quot;cs&quot;, cs);        // 放入jsp路径        mav.setViewName(&quot;listCategory&quot;);        return mav;    }}</code></pre><h2 id="7-listCategory-jsp"><a href="#7-listCategory-jsp" class="headerlink" title="7.listCategory.jsp"></a>7.listCategory.jsp</h2><p>修改listCategory.jsp，分别提供首页，上一页，下一页，末页等链接</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt; &lt;div style=&quot;width:500px;margin:0px auto;text-align:center&quot;&gt;    &lt;table align=&apos;center&apos; border=&apos;1&apos; cellspacing=&apos;0&apos;&gt;        &lt;tr&gt;            &lt;td&gt;id&lt;/td&gt;            &lt;td&gt;name&lt;/td&gt;        &lt;/tr&gt;        &lt;c:forEach items=&quot;${cs}&quot; var=&quot;c&quot; varStatus=&quot;st&quot;&gt;            &lt;tr&gt;                &lt;td&gt;${c.id}&lt;/td&gt;                &lt;td&gt;${c.name}&lt;/td&gt;            &lt;/tr&gt;        &lt;/c:forEach&gt;    &lt;/table&gt;    &lt;div style=&quot;text-align:center&quot;&gt;        &lt;a href=&quot;?start=0&quot;&gt;首  页&lt;/a&gt;        &lt;a href=&quot;?start=${page.start-page.count}&quot;&gt;上一页&lt;/a&gt;        &lt;a href=&quot;?start=${page.start+page.count}&quot;&gt;下一页&lt;/a&gt;        &lt;a href=&quot;?start=${page.last}&quot;&gt;末  页&lt;/a&gt;    &lt;/div&gt; &lt;/div&gt;</code></pre><h2 id="8-增加100个对象"><a href="#8-增加100个对象" class="headerlink" title="8.增加100个对象"></a>8.增加100个对象</h2><p>修改MybatisTest类</p><pre><code>package com.how2java.test;import java.util.List;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import com.how2java.mapper.CategoryMapper;import com.how2java.pojo.Category;import com.how2java.util.Page;@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)public class MybatisTest {    @Autowired    private CategoryMapper categoryMapper;//  @Test    public void testAdd() {        for (int i = 0; i &lt; 100; i++) {            Category category = new Category();            category.setName(&quot;new Category&quot;);            categoryMapper.add(category);        }    }    @Test    public void testTotal() {        int total = categoryMapper.total();        System.out.println(total);    }    @Test    public void testList() {        Page p = new Page();        p.setStart(2);        p.setCount(3);        List&lt;Category&gt; cs=categoryMapper.list(p);        for (Category c : cs) {            System.out.println(c.getName());        }    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/07/18/SSM-分页/1.png&quot;&gt;
&lt;h2 id=&quot;分页类-1-Page&quot;&gt;&lt;a href=&quot;#分页类-1-Page&quot; class=&quot;headerlink&quot; title=&quot;分页类:1.Page&quot;&gt;&lt;/a&gt;分页类:1.Page&lt;/h2&gt;&lt;p&gt;P
      
    
    </summary>
    
      <category term="SSM" scheme="http://twh233.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="http://twh233.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>SSM-整合步骤</title>
    <link href="http://twh233.github.io/2018/07/17/SSM-%E6%95%B4%E5%90%88%E6%AD%A5%E9%AA%A4/"/>
    <id>http://twh233.github.io/2018/07/17/SSM-整合步骤/</id>
    <published>2018-07-17T12:22:24.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>持久层：DAO层（mapper）<br>DAO层：DAO层主要是做数据持久层的工作，负责与数据库进行联络的一些任务都封装在此，<br>DAO层的设计首先是设计DAO的接口，<br>然后在Spring的配置文件中定义此接口的实现类，<br>然后就可在模块中调用此接口来进行数据业务的处理，而不用关心此接口的具体实现类是哪个类，显得结构非常清晰，<br>DAO层的数据源配置，以及有关数据库连接的参数都在Spring的配置文件中进行配置。</p><p>业务层：Service层<br>Service层：Service层主要负责业务模块的逻辑应用设计。<br>首先设计接口，再设计其实现的类<br>接着再在Spring的配置文件中配置其实现的关联。这样我们就可以在应用中调用Service接口来进行业务处理。<br>Service层的业务实现，具体要调用到已定义的DAO层的接口，<br>封装Service层的业务逻辑有利于通用的业务逻辑的独立性和重复利用性，程序显得非常简洁。</p><p>表现层：Controller层（Handler层）<br>Controller层:Controller层负责具体的业务模块流程的控制，<br>在此层里面要调用Service层的接口来控制业务流程，<br>控制的配置也同样是在Spring的配置文件里面进行，针对具体的业务流程，会有不同的控制器，我们具体的设计过程中可以将流程进行抽象归纳，设计出可以重复利用的子单元流程模块，这样不仅使程序结构变得清晰，也大大减少了代码量。</p><p>View层<br>View层 此层与控制层结合比较紧密，需要二者结合起来协同工发。View层主要负责前台jsp页面的表示.</p><img src="/2018/07/17/SSM-整合步骤/2.png"><h2 id="1-思路图"><a href="#1-思路图" class="headerlink" title="1.思路图"></a>1.思路图</h2><ol><li>首先浏览器上访问路径 /listCategory</li><li>tomcat根据web.xml上的配置信息，拦截到了/listCategory，并将其交由DispatcherServlet处理。</li><li>DispatcherServlet 根据springMVC的配置，将这次请求交由CategoryController类进行处理，所以需要进行这个类的实例化</li><li>在实例化CategoryController的时候，注入CategoryServiceImpl。 (自动装配实现了CategoryService接口的的实例，只有CategoryServiceImpl实现了CategoryService接口，所以就会注入CategoryServiceImpl)</li><li>在实例化CategoryServiceImpl的时候，又注入CategoryMapper</li><li>根据ApplicationContext.xml中的配置信息，将CategoryMapper和Category.xml关联起来了。</li><li>这样拿到了实例化好了的CategoryController,并调用listCategory方法</li><li>在listCategory方法中，访问CategoryService,并获取数据，并把数据放在”cs”上，接着服务端跳转到listCategory.jsp去</li><li>最后在listCategory.jsp 中显示数据</li></ol><img src="/2018/07/17/SSM-整合步骤/1.png"><h2 id="2-数据库"><a href="#2-数据库" class="headerlink" title="2.数据库"></a>2.数据库</h2><pre><code>create database how2java; use how2java;CREATE TABLE category_ (  id int(11) NOT NULL AUTO_INCREMENT,  name varchar(30) ,  PRIMARY KEY (id)) DEFAULT CHARSET=UTF8;use how2java;insert into category_ values(null,&quot;category1&quot;);insert into category_ values(null,&quot;category2&quot;);insert into category_ values(null,&quot;category3&quot;);insert into category_ values(null,&quot;category4&quot;);insert into category_ values(null,&quot;category5&quot;);select * from category_</code></pre><h2 id="3-新建项目"><a href="#3-新建项目" class="headerlink" title="3.新建项目"></a>3.新建项目</h2><p>在eclipse中新建项目ssm，使用dynamic web project的方式</p><h2 id="4-导入jar包"><a href="#4-导入jar包" class="headerlink" title="4.导入jar包"></a>4.导入jar包</h2><p>导入lib.rar包</p><h2 id="5-pojo"><a href="#5-pojo" class="headerlink" title="5.pojo"></a>5.pojo</h2><pre><code>package com.how2java.pojo;public class Category {    private int id;    private String name;    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    @Override    public String toString() {        return &quot;Category [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;;    }}</code></pre><h2 id="6-CategoryMapper"><a href="#6-CategoryMapper" class="headerlink" title="6.CategoryMapper"></a>6.CategoryMapper</h2><pre><code>package com.how2java.mapper;import java.util.List;import com.how2java.pojo.Category;public interface CategoryMapper {    public void add(Category category);     public void delete(int id);     public Category get(int id);     public void update(Category category);      public List&lt;Category&gt; list();    public int count(); }</code></pre><h2 id="7-Category-xml"><a href="#7-Category-xml" class="headerlink" title="7.Category.xml"></a>7.Category.xml</h2><p>Category.xml需要和CategoryMapper放在同一个包下面，并且namespace必须写CategoryMapper的完整类名</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;    &lt;mapper namespace=&quot;com.how2java.mapper.CategoryMapper&quot;&gt;        &lt;insert id=&quot;add&quot; parameterType=&quot;Category&quot; &gt;            insert into category_ ( name ) values (#{name})           &lt;/insert&gt;        &lt;delete id=&quot;delete&quot; parameterType=&quot;Category&quot; &gt;            delete from category_ where id= #{id}          &lt;/delete&gt;        &lt;select id=&quot;get&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt;            select * from   category_  where id= #{id}           &lt;/select&gt;        &lt;update id=&quot;update&quot; parameterType=&quot;Category&quot; &gt;            update category_ set name=#{name} where id=#{id}           &lt;/update&gt;        &lt;select id=&quot;list&quot; resultType=&quot;Category&quot;&gt;            select * from   category_             &lt;/select&gt;        &lt;/mapper&gt;</code></pre><h2 id="8-CategoryService"><a href="#8-CategoryService" class="headerlink" title="8.CategoryService"></a>8.CategoryService</h2><pre><code>package com.how2java.service;import java.util.List;import com.how2java.pojo.Category;public interface CategoryService {    List&lt;Category&gt; list();}</code></pre><h2 id="9-CategoryServiceImpl"><a href="#9-CategoryServiceImpl" class="headerlink" title="9.CategoryServiceImpl"></a>9.CategoryServiceImpl</h2><p>CategoryServiceImpl被注解@Service标示为一个Service<br>并且装配了categoryMapper</p><p>在CategoryServiceImpl类前面有一个@Service,表示它被Spring管理起来了。<br>@Service<br>public class CategoryServiceImpl </p><p>@Autowired<br>CategoryService categoryService;<br>这句话的意思是找到实现了CategoryService 接口的类装配进来</p><p>所以Spring就会找到它管理的CategoryServiceImpl 类装配（注入）进去。</p><p>而CategoryService 本身是接口，没法被注入的啦</p><pre><code>package com.how2java.service.impl;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.how2java.mapper.CategoryMapper;import com.how2java.pojo.Category;import com.how2java.service.CategoryService;@Servicepublic class CategoryServiceImpl  implements CategoryService{    @Autowired    CategoryMapper categoryMapper;    public List&lt;Category&gt; list(){        return categoryMapper.list();    }}</code></pre><h2 id="10-CategoryController"><a href="#10-CategoryController" class="headerlink" title="10.CategoryController"></a>10.CategoryController</h2><p>CategoryController被@Controller标示为了控制器<br>自动装配了categoryService<br>通过@RequestMapping映射访问路径/listCategory路径到方法listCategory()。<br>在listCategory()方法中，通过categoryService获取后，然后存放在”cs”这个key上。  </p><p>@RequestMapping(“”) (绝对路径)倘若写成了<br>@RequestMapping(“abc”), 那么访问的时候就需要在地址栏里加上/abc/</p><pre><code>package com.how2java.controller;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.ModelAndView;import com.how2java.pojo.Category;import com.how2java.service.CategoryService;// 告诉spring mvc这是一个控制器类@Controller@RequestMapping(&quot;&quot;)public class CategoryController {    @Autowired    CategoryService categoryService;    @RequestMapping(&quot;listCategory&quot;)    public ModelAndView listCategory(){        ModelAndView mav = new ModelAndView();        List&lt;Category&gt; cs= categoryService.list();        // 放入转发参数        mav.addObject(&quot;cs&quot;, cs);        // 放入jsp路径        mav.setViewName(&quot;listCategory&quot;);        return mav;    }}</code></pre><h2 id="11-web-xml"><a href="#11-web-xml" class="headerlink" title="11.web.xml"></a>11.web.xml</h2><p>在WEB-INF目录下新增加web.xml，这个web.xml有两个作用：</p><ol><li><p>通过ContextLoaderListener在web app启动的时候，获取contextConfigLocation配置文件的文件名applicationContext.xml，并进行Spring相关初始化工作</p></li><li><p>有任何访问，都被DispatcherServlet所拦截，这就是Spring MVC那套工作机制了。</p></li></ol><p><br></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;         xmlns:web=&quot;http://java.sun.com/xml/ns/javaee&quot;         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt;    &lt;!-- spring的配置文件--&gt;    &lt;context-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;listener&gt;        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;    &lt;/listener&gt;    &lt;!-- spring mvc核心：分发servlet --&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;!-- spring mvc的配置文件 --&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><h2 id="12-applicationContext-xml"><a href="#12-applicationContext-xml" class="headerlink" title="12.applicationContext.xml"></a>12.applicationContext.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;     &lt;!-- 1. 通过注解，将Service的生命周期纳入Spring的管理 --&gt;     &lt;context:annotation-config /&gt;     &lt;context:component-scan base-package=&quot;com.how2java.service&quot; /&gt;     &lt;!-- 2. 配置数据源 --&gt;     &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;       &lt;property name=&quot;driverClassName&quot;&gt;           &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;       &lt;/property&gt;       &lt;property name=&quot;url&quot;&gt;              &lt;value&gt;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&lt;/value&gt;       &lt;/property&gt;       &lt;property name=&quot;username&quot;&gt;              &lt;value&gt;root&lt;/value&gt;       &lt;/property&gt;       &lt;property name=&quot;password&quot;&gt;              &lt;value&gt;admin&lt;/value&gt;       &lt;/property&gt;      &lt;/bean&gt;      &lt;!-- 3. 扫描存放SQL语句的Category.xml --&gt;      &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;              &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.how2java.pojo&quot; /&gt;            &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;            &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/how2java/mapper/*.xml&quot;/&gt;      &lt;/bean&gt;      &lt;!-- 4. 扫描Mapper，并将其生命周期纳入Spring的管理 --&gt;      &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;            &lt;property name=&quot;basePackage&quot; value=&quot;com.how2java.mapper&quot;/&gt;      &lt;/bean&gt;&lt;/beans&gt;</code></pre><h2 id="13-springMVC-xml"><a href="#13-springMVC-xml" class="headerlink" title="13.springMVC.xml"></a>13.springMVC.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:jdbc=&quot;http://www.springframework.org/schema/jdbc&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt;    &lt;!-- 1. 扫描Controller,并将其生命周期纳入Spring管理 --&gt;    &lt;context:annotation-config/&gt;    &lt;context:component-scan base-package=&quot;com.how2java.controller&quot;&gt;          &lt;context:include-filter type=&quot;annotation&quot;           expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;    &lt;/context:component-scan&gt;       &lt;!-- 2.注解驱动，以使得访问路径与方法的匹配可以通过注解配置 --&gt;    &lt;mvc:annotation-driven /&gt;       &lt;!-- 3. 静态页面，如html,css,js,images可以访问 --&gt;       &lt;mvc:default-servlet-handler /&gt;       &lt;!-- 4. 视图定位到/WEB/INF/jsp 这个目录下 --&gt;       &lt;bean  class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;viewClass&quot;            value=&quot;org.springframework.web.servlet.view.JstlView&quot; /&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;    &lt;/bean&gt; &lt;/beans&gt;</code></pre><h2 id="14-listCategory-jsp"><a href="#14-listCategory-jsp" class="headerlink" title="14.listCategory.jsp"></a>14.listCategory.jsp</h2><p>在WEB-INF下创建jsp目录，并创建文件listCategory.jsp。<br>在这个jsp文件中，通过forEach标签，遍历CategoryController传递过来的集合数据。</p><pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;    pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot;%&gt;&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;&lt;table align=&apos;center&apos; border=&apos;1&apos; cellspacing=&apos;0&apos;&gt;    &lt;tr&gt;        &lt;td&gt;id&lt;/td&gt;        &lt;td&gt;name&lt;/td&gt;    &lt;/tr&gt;    &lt;c:forEach items=&quot;${cs}&quot; var=&quot;c&quot; varStatus=&quot;st&quot;&gt;        &lt;tr&gt;            &lt;td&gt;${c.id}&lt;/td&gt;            &lt;td&gt;${c.name}&lt;/td&gt;        &lt;/tr&gt;    &lt;/c:forEach&gt;&lt;/table&gt;</code></pre><h2 id="15-测试"><a href="#15-测试" class="headerlink" title="15.测试"></a>15.测试</h2><p>部署在Tomcat中，重启tomcat，然后访问地址，观察效果</p><p><a href="http://127.0.0.1:8080/ssm/listCategory" target="_blank" rel="noopener">http://127.0.0.1:8080/ssm/listCategory</a></p><img src="/2018/07/17/SSM-整合步骤/3.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;持久层：DAO层（mapper）&lt;br&gt;DAO层：DAO层主要是做数据持久层的工作，负责与数据库进行联络的一些任务都封装在此，&lt;br&gt;DAO层的设计首先是设计DAO的接口，&lt;br&gt;然后在Spring的配置文件中定义此接口的实现类，&lt;br&gt;然后就可在模块中调用此接口来进行数据
      
    
    </summary>
    
      <category term="SSM" scheme="http://twh233.github.io/categories/SSM/"/>
    
    
      <category term="SSM" scheme="http://twh233.github.io/tags/SSM/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-逆向工程</title>
    <link href="http://twh233.github.io/2018/07/17/Mybatis-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://twh233.github.io/2018/07/17/Mybatis-逆向工程/</id>
    <published>2018-07-17T07:46:40.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Mybatis Generator是一个用于Mybatis逆向工程的工具。<br>前面学习的方式都是先有pojo, mapper, xml, 然后再创建表。</p><p>用逆向工程的方式，首先保证数据库里有表，然后通过Mybatis Generator生成pojo, mapper和xml。 </p><p>可以节约大家的时间，提高开发效率，降低出错几率</p><h2 id="2-jar包导入"><a href="#2-jar包导入" class="headerlink" title="2.jar包导入"></a>2.jar包导入</h2><p>需要额外的Mybatis Generator jar包（mybatis-generator-core-1.3.5.jar）</p><h2 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h2><img src="/2018/07/17/Mybatis-逆向工程/1.png"><p>在src目录下创建generatorConfig.xml</p><p>这个配置文件有如下作用</p><ol><li>指定 mysql jdbcjar 包的位置,这里用的位置是 e:/project/mybatis/lib/mysql-connector-java-5.0.8-bin.jar   </li><li>设置数据库链接账号密码  </li><li>指定pojo,mapper,xml分别生成的包名  </li><li><p>指定表名以及表名对应的类名<br>4.1 使用自增长键：</p><p> <property name="my.isgen.usekeys" value="true"></property></p> <generatedkey column="id" sqlstatement="JDBC"></generatedkey></li></ol><p><br></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;    &lt;!--数据库驱动--&gt;    &lt;!--        如果IDE(eclipse或者idea) 项目里导入了jar包，那么就不需要配置了jar包的绝对路径了         &lt;classPathEntry    location=&quot;e:/project/mybatis/lib/mysql-connector-java-5.0.8-bin.jar&quot;/&gt;    --&gt;    &lt;context id=&quot;DB2Tables&quot;    targetRuntime=&quot;MyBatis3&quot;&gt;        &lt;commentGenerator&gt;            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;            &lt;property name=&quot;suppressAllComments&quot; value=&quot;false&quot;/&gt;        &lt;/commentGenerator&gt;        &lt;!--数据库链接地址账号密码--&gt;        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost/how2java&quot; userId=&quot;root&quot; password=&quot;admin&quot;&gt;        &lt;/jdbcConnection&gt;        &lt;javaTypeResolver&gt;            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;        &lt;/javaTypeResolver&gt;        &lt;!--生成Model类存放位置--&gt;        &lt;javaModelGenerator targetPackage=&quot;com.how2java.pojo&quot; targetProject=&quot;src&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;        &lt;/javaModelGenerator&gt;        &lt;!--生成映射文件存放位置--&gt;        &lt;sqlMapGenerator targetPackage=&quot;com.how2java.pojo&quot; targetProject=&quot;src&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;/sqlMapGenerator&gt;        &lt;!--生成Dao类存放位置--&gt;        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.how2java.mapper&quot; targetProject=&quot;src&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;/javaClientGenerator&gt;        &lt;!--生成对应表及类名--&gt;        &lt;table tableName=&quot;category_&quot; domainObjectName=&quot;Category&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;true&quot; selectByExampleQueryId=&quot;false&quot;&gt;            &lt;property name=&quot;my.isgen.usekeys&quot; value=&quot;true&quot;/&gt;            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;JDBC&quot;/&gt;               &lt;/table&gt;&lt;!--         &lt;table tableName=&quot;product_&quot; domainObjectName=&quot;Product&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt; --&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><h2 id="4-TestMybatisGenerator"><a href="#4-TestMybatisGenerator" class="headerlink" title="4.TestMybatisGenerator"></a>4.TestMybatisGenerator</h2><p>运行成功之后，就会在对应位置生成pojo,xml,和mapper</p><pre><code>package com.how2java;import java.io.File;import java.io.InputStream;import java.util.ArrayList;import java.util.List;import org.mybatis.generator.api.MyBatisGenerator;import org.mybatis.generator.config.Configuration;import org.mybatis.generator.config.xml.ConfigurationParser;import org.mybatis.generator.internal.DefaultShellCallback;public class TestMybatisGenerator {    public static void main(String[] args) throws Exception {        List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();        boolean overwrite = true;        InputStream is= TestMybatisGenerator.class.getClassLoader().getResource(&quot;generatorConfig.xml&quot;).openStream();        ConfigurationParser cp = new ConfigurationParser(warnings);        Configuration config = cp.parseConfiguration(is);        is.close();        DefaultShellCallback callback = new DefaultShellCallback(overwrite);        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);        myBatisGenerator.generate(null);        System.out.println(&quot;生成代码成功，刷新项目，查看文件,然后执行TestMybatis.java&quot;);    }}</code></pre><h2 id="5-TestMybatis"><a href="#5-TestMybatis" class="headerlink" title="5.TestMybatis"></a>5.TestMybatis</h2><p>运行TestMybatis，执行自动生成的mapper，借助CategoryExample 进行模糊查询名称里出现了9的分类</p><img src="/2018/07/17/Mybatis-逆向工程/2.png"><pre><code>package com.how2java;import java.io.InputStream;import java.util.List;//import com.how2java.mapper.CategoryMapper;//import com.how2java.pojo.Category;//import com.how2java.pojo.CategoryExample;//import com.how2java.mapper.CategoryMapper;//import com.how2java.pojo.CategoryExample;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.how2java.mapper.CategoryMapper;import com.how2java.pojo.Category;import com.how2java.pojo.CategoryExample;public class TestMybatis {    public static void main(String args[]) throws Exception {        System.out.println(&quot;先运行TestMybatisGenerator创建mapper,pojo,xml 等文件，然后取消import里被注释的，以及接下来的注释，并执行代码&quot;);//        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession session=sqlSessionFactory.openSession();        CategoryExample example = new CategoryExample();        example.createCriteria().andNameLike(&quot;%9%&quot;);        CategoryMapper mapper = session.getMapper(CategoryMapper.class);        List&lt;Category&gt; cs= mapper.selectByExample(example);        for (Category c : cs) {            System.out.println(c.getName());        }    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h2&gt;&lt;p&gt;Mybatis Generator是一个用于Mybatis逆向工程的工具。&lt;br&gt;前面学习的方式都是先有pojo, mapp
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://twh233.github.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://twh233.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-c3p0连接池</title>
    <link href="http://twh233.github.io/2018/07/17/Mybatis-c3p0%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://twh233.github.io/2018/07/17/Mybatis-c3p0连接池/</id>
    <published>2018-07-17T07:46:22.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-需要导入c3p0的jar包"><a href="#1-需要导入c3p0的jar包" class="headerlink" title="1.需要导入c3p0的jar包"></a>1.需要导入c3p0的jar包</h2><h2 id="2-C3P0DataSourceFactory"><a href="#2-C3P0DataSourceFactory" class="headerlink" title="2.C3P0DataSourceFactory"></a>2.C3P0DataSourceFactory</h2><p>Mybatis使用C3P0有点怪怪的，需要自己写个类继承UnpooledDataSourceFactory，然后指定dataSource 为ComboPooledDataSource。<br>这个ComboPooledDataSource就是c3p0的数据源。</p><pre><code>package org.mybatis.c3p0;import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;import com.mchange.v2.c3p0.ComboPooledDataSource;public class C3P0DataSourceFactory extends UnpooledDataSourceFactory{        public C3P0DataSourceFactory(){           this.dataSource =new ComboPooledDataSource();        }}</code></pre><h2 id="3-mybatis-config-xml"><a href="#3-mybatis-config-xml" class="headerlink" title="3.mybatis-config.xml"></a>3.mybatis-config.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;typeAliases&gt;      &lt;package name=&quot;com.how2java.pojo&quot;/&gt;    &lt;/typeAliases&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;&lt;!--             &lt;dataSource type=&quot;POOLED&quot;&gt; --&gt;&lt;!--                 &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; --&gt;&lt;!--                 &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt; --&gt;&lt;!--                 &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; --&gt;&lt;!--                 &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt; --&gt;&lt;!--             &lt;/dataSource&gt; --&gt;            &lt;dataSource type=&quot;org.mybatis.c3p0.C3P0DataSourceFactory&quot;&gt;                  &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;                       &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;autoReconnect=true&amp;amp;failOverReadOnly=false&quot;/&gt;                      &lt;property name=&quot;user&quot; value=&quot;root&quot; /&gt;                      &lt;property name=&quot;password&quot; value=&quot;admin&quot; /&gt;                  &lt;!-- 连接池初始化大小为3 --&gt;                  &lt;property name=&quot;initialPoolSize&quot; value=&quot;3&quot;/&gt;                  &lt;!-- 连接池最大为10 --&gt;                  &lt;property name=&quot;maxPoolSize&quot; value=&quot;10&quot;/&gt;                  &lt;!-- 连接池最小为3 --&gt;                  &lt;property name=&quot;minPoolSize&quot; value=&quot;3&quot;/&gt;                  &lt;!-- 连接池在无空闲连接可用时一次性最多创建的新数据库连接数  --&gt;                  &lt;property name=&quot;acquireIncrement&quot; value=&quot;5&quot;/&gt;                  &lt;!-- 连接的最大空闲时间，如果超过这个时间（秒），某个数据库连接还没有被使用，则会断开掉这个连接。如果为0，则永远不会断开连接,即回收此连接 --&gt;                  &lt;property name=&quot;maxIdleTime&quot; value=&quot;30&quot;/&gt;                  &lt;!-- 最大的Statement数量 --&gt;                  &lt;property name=&quot;maxStatements&quot; value=&quot;500&quot;/&gt;                  &lt;!-- 每个连接启动的最大Statement数量 --&gt;                  &lt;property name=&quot;maxStatementsPerConnection&quot; value=&quot;50&quot;/&gt;                  &lt;!-- 同时运行的线程数 --&gt;                  &lt;property name=&quot;numHelperThreads&quot; value=&quot;5&quot;/&gt;           &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-需要导入c3p0的jar包&quot;&gt;&lt;a href=&quot;#1-需要导入c3p0的jar包&quot; class=&quot;headerlink&quot; title=&quot;1.需要导入c3p0的jar包&quot;&gt;&lt;/a&gt;1.需要导入c3p0的jar包&lt;/h2&gt;&lt;h2 id=&quot;2-C3P0DataSou
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://twh233.github.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://twh233.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-缓存</title>
    <link href="http://twh233.github.io/2018/07/17/Mybatis-%E7%BC%93%E5%AD%98/"/>
    <id>http://twh233.github.io/2018/07/17/Mybatis-缓存/</id>
    <published>2018-07-17T07:35:19.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h1><h2 id="1-在一个Session里查相同id的数据"><a href="#1-在一个Session里查相同id的数据" class="headerlink" title="1.在一个Session里查相同id的数据"></a>1.在一个Session里查相同id的数据</h2><p>如图所示，在session1中查询两次id=1的Category对象。<br>第一次会去数据库中取数据，但是第二次就不会访问数据库了，而是直接从session中取出来。</p><img src="/2018/07/17/Mybatis-缓存/1.png"><pre><code>package com.how2java;import java.io.IOException;import java.io.InputStream;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.how2java.pojo.Category;public class TestMybatis {    public static void main(String[] args) throws IOException {        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession session1 = sqlSessionFactory.openSession();        Category c1 = session1.selectOne(&quot;getCategory&quot;, 1);        System.out.println(c1);        Category c2 = session1.selectOne(&quot;getCategory&quot;, 1);        System.out.println(c2);        session1.commit();        session1.close();    }}</code></pre><h2 id="2-在不同Session里查相同id的数据"><a href="#2-在不同Session里查相同id的数据" class="headerlink" title="2.在不同Session里查相同id的数据"></a>2.在不同Session里查相同id的数据</h2><p>这一次，另外打开一个session,取同样id的数据，就会发现需要执行sql语句，证实了一级缓存是在session里的</p><img src="/2018/07/17/Mybatis-缓存/2.png"><pre><code>package com.how2java;import java.io.IOException;import java.io.InputStream;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.how2java.pojo.Category;public class TestMybatis {    public static void main(String[] args) throws IOException {        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession session1 = sqlSessionFactory.openSession();        Category c1 = session1.selectOne(&quot;getCategory&quot;, 1);        System.out.println(c1);        Category c2 = session1.selectOne(&quot;getCategory&quot;, 1);        System.out.println(c2);        session1.commit();        session1.close();        SqlSession session2 = sqlSessionFactory.openSession();        Category c3 = session2.selectOne(&quot;getCategory&quot;, 1);        System.out.println(c3);            session2.commit();        session2.close();    }}</code></pre><h1 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h1><h2 id="1-启动二级缓存"><a href="#1-启动二级缓存" class="headerlink" title="1.启动二级缓存"></a>1.启动二级缓存</h2><p>11行新增一个段配置，以支持二级缓存</p><pre><code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code></pre><p><br></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;settings&gt;             &lt;!-- 打开延迟加载的开关 --&gt;             &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot; /&gt;             &lt;!-- 将积极加载改为消息加载即按需加载 --&gt;             &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;            &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;        &lt;/settings&gt;       &lt;typeAliases&gt;      &lt;package name=&quot;com.how2java.pojo&quot;/&gt;    &lt;/typeAliases&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt;        &lt;mapper class=&quot;com.how2java.mapper.CategoryMapper&quot;/&gt;         &lt;mapper class=&quot;com.how2java.mapper.ProductMapper&quot;/&gt;     &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h2 id="2-Category-xml"><a href="#2-Category-xml" class="headerlink" title="2.Category.xml"></a>2.Category.xml</h2><p>在第7行新增<cache>以启动Category对象的二级缓存</cache></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;    &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt;        &lt;cache/&gt;        &lt;insert id=&quot;addCategory&quot; parameterType=&quot;Category&quot; &gt;            insert into category_ ( name ) values (#{name})           &lt;/insert&gt;        &lt;delete id=&quot;deleteCategory&quot; parameterType=&quot;Category&quot; &gt;            delete from category_ where id= #{id}          &lt;/delete&gt;        &lt;select id=&quot;getCategory&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt;            select * from   category_  where id= #{id}           &lt;/select&gt;        &lt;update id=&quot;updateCategory&quot; parameterType=&quot;Category&quot; &gt;            update category_ set name=#{name} where id=#{id}           &lt;/update&gt;        &lt;select id=&quot;listCategory&quot; resultType=&quot;Category&quot;&gt;            select * from   category_                &lt;if test=&quot;start!=null and count!=null&quot;&gt;                    limit #{start},#{count}                &lt;/if&gt;        &lt;/select&gt;        &lt;/mapper&gt;</code></pre><h2 id="3-序列化Category"><a href="#3-序列化Category" class="headerlink" title="3.序列化Category"></a>3.序列化Category</h2><p>让Category实现序列化接口</p><pre><code>package com.how2java.pojo;import java.io.Serializable;import java.util.List;public class Category implements Serializable{    private int id;    private String name;    List&lt;Product&gt; products;    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public List&lt;Product&gt; getProducts() {        return products;    }    public void setProducts(List&lt;Product&gt; products) {        this.products = products;    }    @Override    public String toString() {        return &quot;Category [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;;    }}</code></pre><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><p>再次运行TestMybatis，如图所示，在同一个SessionFactory下查询id=1的数据，只有第一次需要执行sql语句，以后都是从缓存中取出</p><img src="/2018/07/17/Mybatis-缓存/3.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一级缓存&quot;&gt;&lt;a href=&quot;#一级缓存&quot; class=&quot;headerlink&quot; title=&quot;一级缓存&quot;&gt;&lt;/a&gt;一级缓存&lt;/h1&gt;&lt;h2 id=&quot;1-在一个Session里查相同id的数据&quot;&gt;&lt;a href=&quot;#1-在一个Session里查相同id的数据&quot; c
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://twh233.github.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://twh233.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-分页</title>
    <link href="http://twh233.github.io/2018/07/17/Mybatis-%E5%88%86%E9%A1%B5/"/>
    <id>http://twh233.github.io/2018/07/17/Mybatis-分页/</id>
    <published>2018-07-17T07:08:22.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-数据设置为100条"><a href="#1-数据设置为100条" class="headerlink" title="1.数据设置为100条"></a>1.数据设置为100条</h2><p>为了观察分页查询的效果，把分类表里的数据都删除掉，然后新增100个数据</p><pre><code>package com.how2java;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.how2java.pojo.Category;public class TestMybatis {    public static void main(String[] args) throws IOException {        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession session = sqlSessionFactory.openSession();        List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;);        for (Category c : cs) {            session.delete(&quot;deleteCategory&quot;, c);        }        for (int i = 0; i &lt; 100; i++) {            Category c = new Category();            c.setName(&quot;category name &quot; + i);            session.insert(&quot;addCategory&quot;, c);        }        List&lt;Category&gt; cs2 = session.selectList(&quot;listCategory&quot;);        for (Category c : cs2) {            System.out.println(c.getName());        }        session.commit();        session.close();    }}</code></pre><h2 id="2-mybatis-config-xml"><a href="#2-mybatis-config-xml" class="headerlink" title="2.mybatis-config.xml"></a>2.mybatis-config.xml</h2><p>添加15-19行代码表示开启PageHelper插件</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;settings&gt;             &lt;!-- 打开延迟加载的开关 --&gt;             &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot; /&gt;             &lt;!-- 将积极加载改为消息加载即按需加载 --&gt;             &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;         &lt;/settings&gt;       &lt;typeAliases&gt;      &lt;package name=&quot;com.how2java.pojo&quot;/&gt;    &lt;/typeAliases&gt;    &lt;plugins&gt;        &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;         &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt;        &lt;mapper class=&quot;com.how2java.mapper.CategoryMapper&quot;/&gt;         &lt;mapper class=&quot;com.how2java.mapper.ProductMapper&quot;/&gt;     &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h2 id="3-Category-xml"><a href="#3-Category-xml" class="headerlink" title="3.Category.xml"></a>3.Category.xml</h2><p>24-26行的limit注释掉，因为分页相关工作，会由PageHelper去做掉，不需要自己去写了</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;    &lt;mapper namespace=&quot;com.how2java.pojo&quot;&gt;        &lt;insert id=&quot;addCategory&quot; parameterType=&quot;Category&quot; &gt;            insert into category_ ( name ) values (#{name})           &lt;/insert&gt;        &lt;delete id=&quot;deleteCategory&quot; parameterType=&quot;Category&quot; &gt;            delete from category_ where id= #{id}          &lt;/delete&gt;        &lt;select id=&quot;getCategory&quot; parameterType=&quot;_int&quot; resultType=&quot;Category&quot;&gt;            select * from   category_  where id= #{id}           &lt;/select&gt;        &lt;update id=&quot;updateCategory&quot; parameterType=&quot;Category&quot; &gt;            update category_ set name=#{name} where id=#{id}           &lt;/update&gt;        &lt;select id=&quot;listCategory&quot; resultType=&quot;Category&quot;&gt;            select * from   category_&lt;!--                 &lt;if test=&quot;start!=null and count!=null&quot;&gt; --&gt;&lt;!--                     limit #{start},#{count} --&gt;&lt;!--                 &lt;/if&gt; --&gt;        &lt;/select&gt;        &lt;/mapper&gt;</code></pre><h2 id="4-分页查询"><a href="#4-分页查询" class="headerlink" title="4.分页查询"></a>4.分页查询</h2><p>查询很有意思，只需要在执行查询所有的调用之前，执行一条语句即可：</p><p>PageHelper.offsetPage(0, 5);</p><p>这就表示查出第一页的数据，每页5条</p><img src="/2018/07/17/Mybatis-分页/4.png"><pre><code>package com.how2java;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.github.pagehelper.PageHelper;import com.how2java.pojo.Category;public class TestMybatis {    public static void main(String[] args) throws IOException, InterruptedException {        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession session = sqlSessionFactory.openSession();        PageHelper.offsetPage(0, 5);        List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;);        for (Category c : cs) {            System.out.println(c.getName());        }        session.commit();        session.close();    }}</code></pre><h2 id="5-获取总数"><a href="#5-获取总数" class="headerlink" title="5.获取总数"></a>5.获取总数</h2><p>通过第31行的代码</p><p>PageInfo page= new PageInfo&lt;&gt;(cs);</p><p>就可以获取分页信息，包括总数以及其他的</p><img src="/2018/07/17/Mybatis-分页/5.png"><pre><code>package com.how2java;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.how2java.pojo.Category;public class TestMybatis {    public static void main(String[] args) throws IOException, InterruptedException {        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession session = sqlSessionFactory.openSession();        PageHelper.offsetPage(0, 5);        List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;);        for (Category c : cs) {            System.out.println(c.getName());        }        PageInfo pageInfo = new PageInfo&lt;&gt;(cs);        System.out.println(&quot;总数：&quot;+pageInfo.getTotal());        System.out.println(pageInfo);        session.commit();        session.close();    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-数据设置为100条&quot;&gt;&lt;a href=&quot;#1-数据设置为100条&quot; class=&quot;headerlink&quot; title=&quot;1.数据设置为100条&quot;&gt;&lt;/a&gt;1.数据设置为100条&lt;/h2&gt;&lt;p&gt;为了观察分页查询的效果，把分类表里的数据都删除掉，然后新增100个数
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://twh233.github.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://twh233.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-延迟加载</title>
    <link href="http://twh233.github.io/2018/07/17/Mybatis-%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    <id>http://twh233.github.io/2018/07/17/Mybatis-延迟加载/</id>
    <published>2018-07-17T06:52:36.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>延迟加载主要是用于Mybatis自己会执行没有让他执行的SQL语句，<br>为了避免所以添加延迟加载。</p><h2 id="1-未添加的效果"><a href="#1-未添加的效果" class="headerlink" title="1.未添加的效果"></a>1.未添加的效果</h2><p>把27,28,29注释掉，只获取分类，不获取产品，执行后发现，获取产品的SQL语句也执行了</p><img src="/2018/07/17/Mybatis-延迟加载/1.png"><pre><code>package com.how2java;import java.io.IOException;import java.io.InputStream;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import com.how2java.mapper.CategoryMapper;import com.how2java.pojo.Category;public class TestMybatis {    public static void main(String[] args) throws IOException {        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession session = sqlSessionFactory.openSession();        CategoryMapper mapper = session.getMapper(CategoryMapper.class);        List&lt;Category&gt; cs = mapper.list();        for (Category c : cs) {            System.out.println(c.getName());//          List&lt;Product&gt; ps = c.getProducts();//          for (Product p : ps) {//              System.out.println(&quot;\t&quot;+p.getName());//          }        }        session.commit();        session.close();    }}</code></pre><h2 id="2-mybatis-config-xml"><a href="#2-mybatis-config-xml" class="headerlink" title="2.mybatis-config.xml"></a>2.mybatis-config.xml</h2><p>修改mybatis-config.xml，在6-11行添加延迟加载的配置</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;settings&gt;          &lt;!-- 打开延迟加载的开关 --&gt;          &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot; /&gt;          &lt;!-- 将积极加载改为消息加载即按需加载 --&gt;          &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;     &lt;/settings&gt;     &lt;typeAliases&gt;      &lt;package name=&quot;com.how2java.pojo&quot;/&gt;    &lt;/typeAliases&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt;        &lt;mapper class=&quot;com.how2java.mapper.CategoryMapper&quot;/&gt;         &lt;mapper class=&quot;com.how2java.mapper.ProductMapper&quot;/&gt;     &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h2 id="3-效果"><a href="#3-效果" class="headerlink" title="3.效果"></a>3.效果</h2><p>执行同样的操作，可以观察到，只查询了category_表的数据，没有查询product_表的数据</p><img src="/2018/07/17/Mybatis-延迟加载/2.png"><p>获取分类对应的产品集合，这个时候，才会去对product_表进行查询</p><p>将注释取消之后</p><img src="/2018/07/17/Mybatis-延迟加载/3.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;延迟加载主要是用于Mybatis自己会执行没有让他执行的SQL语句，&lt;br&gt;为了避免所以添加延迟加载。&lt;/p&gt;
&lt;h2 id=&quot;1-未添加的效果&quot;&gt;&lt;a href=&quot;#1-未添加的效果&quot; class=&quot;headerlink&quot; title=&quot;1.未添加的效果&quot;&gt;&lt;/a&gt;1.未
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://twh233.github.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://twh233.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-事务管理</title>
    <link href="http://twh233.github.io/2018/07/17/Mybatis-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>http://twh233.github.io/2018/07/17/Mybatis-事务管理/</id>
    <published>2018-07-17T06:45:52.000Z</published>
    <updated>2019-07-15T12:00:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>同一个事务，若有一个操作没成功，那么这个事务的其他操作也不能成功</p><h2 id="1-JDBC方式"><a href="#1-JDBC方式" class="headerlink" title="1.JDBC方式"></a>1.JDBC方式</h2><p>确保12行是</p><pre><code>&lt;transactionManager type=&quot;JDBC&quot;/&gt;</code></pre><p><br></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;typeAliases&gt;      &lt;package name=&quot;com.how2java.pojo&quot;/&gt;    &lt;/typeAliases&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;admin&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;com/how2java/pojo/Category.xml&quot;/&gt;        &lt;mapper class=&quot;com.how2java.mapper.CategoryMapper&quot;/&gt;     &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h2 id="2-测试代码"><a href="#2-测试代码" class="headerlink" title="2.测试代码"></a>2.测试代码</h2><p>38行的代码提交事务session.commit();</p><img src="/2018/07/17/Mybatis-事务管理/2.png"><pre><code>package com.how2java;import java.io.IOException;import java.io.InputStream;import java.sql.SQLException;import java.util.List;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.apache.ibatis.transaction.Transaction;import org.apache.ibatis.transaction.TransactionFactory;import org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;import com.how2java.mapper.CategoryMapper;import com.how2java.pojo.Category;public class TestMybatis {    public static void main(String[] args) throws IOException, SQLException {        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        SqlSession session = sqlSessionFactory.openSession();        CategoryMapper mapper = session.getMapper(CategoryMapper.class);        Category c1 = new Category();        c1.setName(&quot;长度够短的名称&quot;);        mapper.add(c1);        Category c2 = new Category();        c2.setName(&quot;超过最大长度30的名称超过最大长度30的名称超过最大长度30的名称超过最大长度30的名称超过最大长度30的名称超过最大长度30的名称&quot;);        mapper.add(c2);               listAll(mapper);        session.commit();        session.close();    }    private static void listAll(CategoryMapper mapper) {        List&lt;Category&gt; cs = mapper.list();        for (Category c : cs) {            System.out.println(c.getName());        }    }}</code></pre><h2 id="3-Mysql的表必须是INNODB"><a href="#3-Mysql的表必须是INNODB" class="headerlink" title="3.Mysql的表必须是INNODB"></a>3.Mysql的表必须是INNODB</h2><p>在Mysql中，只有当表的类型是INNODB的时候，才支持事务，所以需要把表category_的类型设置为INNODB,否则无法观察到事务.</p><p>修改表的类型为INNODB的SQL：</p><p>alter table category_ ENGINE  = innodb;</p><p>查看表的类型的SQL</p><p>show table status from how2java; </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;同一个事务，若有一个操作没成功，那么这个事务的其他操作也不能成功&lt;/p&gt;
&lt;h2 id=&quot;1-JDBC方式&quot;&gt;&lt;a href=&quot;#1-JDBC方式&quot; class=&quot;headerlink&quot; title=&quot;1.JDBC方式&quot;&gt;&lt;/a&gt;1.JDBC方式&lt;/h2&gt;&lt;p&gt;确保12行是
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://twh233.github.io/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://twh233.github.io/tags/Mybatis/"/>
    
  </entry>
  
</feed>
